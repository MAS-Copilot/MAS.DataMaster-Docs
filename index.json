{
  "api/MAS.Analyzers.ClassLengthAnalyzer.html": {
    "href": "api/MAS.Analyzers.ClassLengthAnalyzer.html",
    "title": "Class ClassLengthAnalyzer | DataMaster",
    "summary": "Class ClassLengthAnalyzer Namespace MAS.Analyzers Assembly MAS.Analyzers.dll [DiagnosticAnalyzer(\"C#\", new string[] { })] public class ClassLengthAnalyzer : DiagnosticAnalyzer Inheritance object DiagnosticAnalyzer ClassLengthAnalyzer Inherited Members DiagnosticAnalyzer.Equals(object) DiagnosticAnalyzer.GetHashCode() DiagnosticAnalyzer.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties SupportedDiagnostics Returns a set of descriptors for the diagnostics that this analyzer is capable of producing. public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } Property Value ImmutableArray<DiagnosticDescriptor> Methods Initialize(AnalysisContext) Called once at session start to register actions in the analysis context. public override void Initialize(AnalysisContext context) Parameters context AnalysisContext"
  },
  "api/MAS.Analyzers.Descriptors.ClassLengthAnalyzerDescriptors.html": {
    "href": "api/MAS.Analyzers.Descriptors.ClassLengthAnalyzerDescriptors.html",
    "title": "Class ClassLengthAnalyzerDescriptors | DataMaster",
    "summary": "Class ClassLengthAnalyzerDescriptors Namespace MAS.Analyzers.Descriptors Assembly MAS.Analyzers.dll public static class ClassLengthAnalyzerDescriptors Inheritance object ClassLengthAnalyzerDescriptors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Descriptor public static readonly DiagnosticDescriptor Descriptor Field Value DiagnosticDescriptor"
  },
  "api/MAS.Analyzers.Descriptors.MethodLengthAnalyzerDescriptors.html": {
    "href": "api/MAS.Analyzers.Descriptors.MethodLengthAnalyzerDescriptors.html",
    "title": "Class MethodLengthAnalyzerDescriptors | DataMaster",
    "summary": "Class MethodLengthAnalyzerDescriptors Namespace MAS.Analyzers.Descriptors Assembly MAS.Analyzers.dll public static class MethodLengthAnalyzerDescriptors Inheritance object MethodLengthAnalyzerDescriptors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Descriptor public static readonly DiagnosticDescriptor Descriptor Field Value DiagnosticDescriptor"
  },
  "api/MAS.Analyzers.Descriptors.NamingConventionAnalyzerDescriptors.html": {
    "href": "api/MAS.Analyzers.Descriptors.NamingConventionAnalyzerDescriptors.html",
    "title": "Class NamingConventionAnalyzerDescriptors | DataMaster",
    "summary": "Class NamingConventionAnalyzerDescriptors Namespace MAS.Analyzers.Descriptors Assembly MAS.Analyzers.dll public static class NamingConventionAnalyzerDescriptors Inheritance object NamingConventionAnalyzerDescriptors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AsyncMethodShouldEndWithAsync public static readonly DiagnosticDescriptor AsyncMethodShouldEndWithAsync Field Value DiagnosticDescriptor BooleanVariableNameShouldHavePrefix public static readonly DiagnosticDescriptor BooleanVariableNameShouldHavePrefix Field Value DiagnosticDescriptor ClassNameShouldBePascalCase public static readonly DiagnosticDescriptor ClassNameShouldBePascalCase Field Value DiagnosticDescriptor CollectionVariableNameShouldBePlural public static readonly DiagnosticDescriptor CollectionVariableNameShouldBePlural Field Value DiagnosticDescriptor ConstantShouldBeUppercase public static readonly DiagnosticDescriptor ConstantShouldBeUppercase Field Value DiagnosticDescriptor DelegateNameShouldBePascalCase public static readonly DiagnosticDescriptor DelegateNameShouldBePascalCase Field Value DiagnosticDescriptor EnumNameShouldBePascalCase public static readonly DiagnosticDescriptor EnumNameShouldBePascalCase Field Value DiagnosticDescriptor EnumValueShouldBePascalCase public static readonly DiagnosticDescriptor EnumValueShouldBePascalCase Field Value DiagnosticDescriptor EventNameShouldBePascalCase public static readonly DiagnosticDescriptor EventNameShouldBePascalCase Field Value DiagnosticDescriptor GenericTypeParameterNameShouldStartWithT public static readonly DiagnosticDescriptor GenericTypeParameterNameShouldStartWithT Field Value DiagnosticDescriptor LocalVariableNameShouldBeCamelCase public static readonly DiagnosticDescriptor LocalVariableNameShouldBeCamelCase Field Value DiagnosticDescriptor MethodNameShouldBePascalCase public static readonly DiagnosticDescriptor MethodNameShouldBePascalCase Field Value DiagnosticDescriptor NamespaceNameShouldBePascalCase public static readonly DiagnosticDescriptor NamespaceNameShouldBePascalCase Field Value DiagnosticDescriptor ParameterNameShouldBeCamelCase public static readonly DiagnosticDescriptor ParameterNameShouldBeCamelCase Field Value DiagnosticDescriptor PrivateFieldShouldStartWithUnderscore public static readonly DiagnosticDescriptor PrivateFieldShouldStartWithUnderscore Field Value DiagnosticDescriptor PropertyNameShouldBePascalCase public static readonly DiagnosticDescriptor PropertyNameShouldBePascalCase Field Value DiagnosticDescriptor StaticFieldNameShouldBePascalCase public static readonly DiagnosticDescriptor StaticFieldNameShouldBePascalCase Field Value DiagnosticDescriptor StructNameShouldBePascalCase public static readonly DiagnosticDescriptor StructNameShouldBePascalCase Field Value DiagnosticDescriptor"
  },
  "api/MAS.Analyzers.Descriptors.NestingLevelAnalyzerDescriptors.html": {
    "href": "api/MAS.Analyzers.Descriptors.NestingLevelAnalyzerDescriptors.html",
    "title": "Class NestingLevelAnalyzerDescriptors | DataMaster",
    "summary": "Class NestingLevelAnalyzerDescriptors Namespace MAS.Analyzers.Descriptors Assembly MAS.Analyzers.dll public static class NestingLevelAnalyzerDescriptors Inheritance object NestingLevelAnalyzerDescriptors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorDescriptor public static readonly DiagnosticDescriptor ErrorDescriptor Field Value DiagnosticDescriptor WarningDescriptor public static readonly DiagnosticDescriptor WarningDescriptor Field Value DiagnosticDescriptor"
  },
  "api/MAS.Analyzers.Descriptors.html": {
    "href": "api/MAS.Analyzers.Descriptors.html",
    "title": "Namespace MAS.Analyzers.Descriptors | DataMaster",
    "summary": "Namespace MAS.Analyzers.Descriptors Classes ClassLengthAnalyzerDescriptors MethodLengthAnalyzerDescriptors NamingConventionAnalyzerDescriptors NestingLevelAnalyzerDescriptors"
  },
  "api/MAS.Analyzers.MethodLengthAnalyzer.html": {
    "href": "api/MAS.Analyzers.MethodLengthAnalyzer.html",
    "title": "Class MethodLengthAnalyzer | DataMaster",
    "summary": "Class MethodLengthAnalyzer Namespace MAS.Analyzers Assembly MAS.Analyzers.dll [DiagnosticAnalyzer(\"C#\", new string[] { })] public class MethodLengthAnalyzer : DiagnosticAnalyzer Inheritance object DiagnosticAnalyzer MethodLengthAnalyzer Inherited Members DiagnosticAnalyzer.Equals(object) DiagnosticAnalyzer.GetHashCode() DiagnosticAnalyzer.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties SupportedDiagnostics Returns a set of descriptors for the diagnostics that this analyzer is capable of producing. public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } Property Value ImmutableArray<DiagnosticDescriptor> Methods Initialize(AnalysisContext) Called once at session start to register actions in the analysis context. public override void Initialize(AnalysisContext context) Parameters context AnalysisContext"
  },
  "api/MAS.Analyzers.NamingConventionAnalyzer.html": {
    "href": "api/MAS.Analyzers.NamingConventionAnalyzer.html",
    "title": "Class NamingConventionAnalyzer | DataMaster",
    "summary": "Class NamingConventionAnalyzer Namespace MAS.Analyzers Assembly MAS.Analyzers.dll [DiagnosticAnalyzer(\"C#\", new string[] { })] public class NamingConventionAnalyzer : DiagnosticAnalyzer Inheritance object DiagnosticAnalyzer NamingConventionAnalyzer Inherited Members DiagnosticAnalyzer.Equals(object) DiagnosticAnalyzer.GetHashCode() DiagnosticAnalyzer.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties SupportedDiagnostics Returns a set of descriptors for the diagnostics that this analyzer is capable of producing. public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } Property Value ImmutableArray<DiagnosticDescriptor> Methods Initialize(AnalysisContext) Called once at session start to register actions in the analysis context. public override void Initialize(AnalysisContext context) Parameters context AnalysisContext"
  },
  "api/MAS.Analyzers.NestingLevelAnalyzer.html": {
    "href": "api/MAS.Analyzers.NestingLevelAnalyzer.html",
    "title": "Class NestingLevelAnalyzer | DataMaster",
    "summary": "Class NestingLevelAnalyzer Namespace MAS.Analyzers Assembly MAS.Analyzers.dll [DiagnosticAnalyzer(\"C#\", new string[] { })] public class NestingLevelAnalyzer : DiagnosticAnalyzer Inheritance object DiagnosticAnalyzer NestingLevelAnalyzer Inherited Members DiagnosticAnalyzer.Equals(object) DiagnosticAnalyzer.GetHashCode() DiagnosticAnalyzer.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties SupportedDiagnostics Returns a set of descriptors for the diagnostics that this analyzer is capable of producing. public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } Property Value ImmutableArray<DiagnosticDescriptor> Methods Initialize(AnalysisContext) Called once at session start to register actions in the analysis context. public override void Initialize(AnalysisContext context) Parameters context AnalysisContext"
  },
  "api/MAS.Analyzers.html": {
    "href": "api/MAS.Analyzers.html",
    "title": "Namespace MAS.Analyzers | DataMaster",
    "summary": "Namespace MAS.Analyzers Classes ClassLengthAnalyzer MethodLengthAnalyzer NamingConventionAnalyzer NestingLevelAnalyzer"
  },
  "api/MAS.Communication.InstanceKeyHelper.html": {
    "href": "api/MAS.Communication.InstanceKeyHelper.html",
    "title": "Class InstanceKeyHelper | DataMaster",
    "summary": "Class InstanceKeyHelper Namespace MAS.Communication Assembly MAS.Communication.dll 实例键帮助类 public static class InstanceKeyHelper Inheritance object InstanceKeyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetKey(ICommunicationConfig) 根据配置获取实例键 public static string GetKey(ICommunicationConfig config) Parameters config ICommunicationConfig 协议配置参数 Returns string 指定的实例字符串键"
  },
  "api/MAS.Communication.S7Protocols.S7ProtocolHelper.html": {
    "href": "api/MAS.Communication.S7Protocols.S7ProtocolHelper.html",
    "title": "Class S7ProtocolHelper | DataMaster",
    "summary": "Class S7ProtocolHelper Namespace MAS.Communication.S7Protocols Assembly MAS.Communication.dll Helper class for S7Protocols public static class S7ProtocolHelper Inheritance object S7ProtocolHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseCpuType(string) 将字符串解析为 CpuType 枚举 public static CpuType ParseCpuType(string cpuType) Parameters cpuType string CPU类型 Returns CpuType CpuType枚举 Exceptions PlcException CPU 不支持时抛出此异常"
  },
  "api/MAS.Communication.S7Protocols.html": {
    "href": "api/MAS.Communication.S7Protocols.html",
    "title": "Namespace MAS.Communication.S7Protocols | DataMaster",
    "summary": "Namespace MAS.Communication.S7Protocols Classes S7ProtocolHelper Helper class for S7Protocols"
  },
  "api/MAS.Communication.ServiceCollectionExtensions.html": {
    "href": "api/MAS.Communication.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.Communication Assembly MAS.Communication.dll 提供扩展方法，用于在 IServiceCollection 中注册与通讯相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCommunicationService(IServiceCollection) 在指定的 IServiceCollection 中注册与通讯相关的服务 public static IServiceCollection AddCommunicationService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.Communication.html": {
    "href": "api/MAS.Communication.html",
    "title": "Namespace MAS.Communication | DataMaster",
    "summary": "Namespace MAS.Communication Classes ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与通讯相关的服务"
  },
  "api/MAS.Compilation.CodeTemplateHelper.html": {
    "href": "api/MAS.Compilation.CodeTemplateHelper.html",
    "title": "Class CodeTemplateHelper | DataMaster",
    "summary": "Class CodeTemplateHelper Namespace MAS.Compilation Assembly MAS.Compilation.dll 代码模板 public static class CodeTemplateHelper Inheritance object CodeTemplateHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetClass(string, string) 获取类的代码模板 public static string GetClass(string @namespace, string className) Parameters namespace string 命名空间 className string 类名 Returns string 类的代码字符串 GetDataExportScript(string, string, string) 获取数据导出脚本的代码模板 public static string GetDataExportScript(string @namespace, string scriptName, string structType) Parameters namespace string 命名空间 scriptName string 脚本名称 structType string 对应数据结构类型 Returns string 结构体的代码字符串 GetEntity(string, string) 获取实体类的代码模板 public static string GetEntity(string @namespace, string entityName) Parameters namespace string 命名空间 entityName string 实体名称 Returns string 结构体的代码字符串 GetMapper(string, string, string, string) 获取映射器类的代码模板 public static string GetMapper(string @namespace, string mapperName, string structName, string entityName) Parameters namespace string 映射器的命名空间 mapperName string 映射器类的名称 structName string 对应的结构体名称 entityName string 对应的实体名称 Returns string 映射器的代码字符串 GetPipeline(Guid, string, string, string) 获取管道代码模板 public static string GetPipeline(Guid pipelineId, string pipelineName, string className, string @namespace = \"MAS.SharedLibrary.Controls.ImageProceFlow\") Parameters pipelineId Guid 管道 Id pipelineName string 管道名称 className string 类名 namespace string 命名空间 Returns string 管道代码字符串 GetReadTaskHandlerType(string, string) 获取读取任务类型代码模板 public static string GetReadTaskHandlerType(string @namespace, string structName) Parameters namespace string 命名空间 structName string 结构体名称 Returns string 类的代码字符串 GetRepository(string, string, string) 获取仓储类的代码模板 public static string GetRepository(string @namespace, string repositoryName, string entityName) Parameters namespace string 仓储的命名空间 repositoryName string 仓储类的名称 entityName string 对应的实体名称 Returns string 仓储类的代码字符串 GetStruct(string, string) 获取结构体的代码模板 public static string GetStruct(string @namespace, string structName) Parameters namespace string 命名空间 structName string 结构体名称 Returns string 结构体的代码字符串"
  },
  "api/MAS.Compilation.CompilationHelper.html": {
    "href": "api/MAS.Compilation.CompilationHelper.html",
    "title": "Class CompilationHelper | DataMaster",
    "summary": "Class CompilationHelper Namespace MAS.Compilation Assembly MAS.Compilation.dll 提供C#代码编译辅助功能 public static class CompilationHelper Inheritance object CompilationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompileAndSaveToDll(List<SyntaxTree>, List<MetadataReference>, string, string) 从提供的语法树和元数据引用创建一个编译对象，并将编译结果保存为 DLL 文件 public static EmitResult CompileAndSaveToDll(List<SyntaxTree> syntaxTrees, List<MetadataReference> references, string assemblyName, string outputDllPath) Parameters syntaxTrees List<SyntaxTree> 语法树的列表 references List<MetadataReference> 元数据引用的列表 assemblyName string 程序集名称 outputDllPath string 输出的 DLL 文件路径 Returns EmitResult 编译结果 CreateCompilation(List<SyntaxTree>, List<MetadataReference>, string) 创建 CSharpCompilation 对象 public static CSharpCompilation CreateCompilation(List<SyntaxTree> syntaxTrees, List<MetadataReference> references, string assemblyName) Parameters syntaxTrees List<SyntaxTree> 语法树的列表 references List<MetadataReference> 元数据引用的列表 assemblyName string 程序集名称 Returns CSharpCompilation 创建的编译对象 EmitCompilation(CSharpCompilation, out MemoryStream) 编译代码并将结果输出到内存流 public static EmitResult EmitCompilation(CSharpCompilation compilation, out MemoryStream ms) Parameters compilation CSharpCompilation 编译对象 ms MemoryStream 输出的内存流 Returns EmitResult 编译结果 EmitCompilation(CSharpCompilation, string) 编译代码并将结果保存到指定的 dll 文件路径 public static EmitResult EmitCompilation(CSharpCompilation compilation, string outputDllPath) Parameters compilation CSharpCompilation 编译对象 outputDllPath string 保存的dll文件路径 Returns EmitResult 编译结果 EmitCompilationToDisk(CSharpCompilation, string) 将给定的编译对象编译成程序集，并将结果保存到指定的磁盘路径 public static EmitResult EmitCompilationToDisk(CSharpCompilation compilation, string outputPath) Parameters compilation CSharpCompilation 已准备好的编译对象，包含了所有需要编译的源代码和引用 outputPath string 要保存编译后的程序集文件的磁盘路径 Returns EmitResult 编译结果 ExtractTypeSummaryDocumentation(CSharpCompilation, SyntaxTree, Assembly, Dictionary<Type, string>) 从语法树中提取类型的文档摘要 public static void ExtractTypeSummaryDocumentation(CSharpCompilation compilation, SyntaxTree syntaxTree, Assembly compiledAssembly, Dictionary<Type, string> typeDocumentationMap) Parameters compilation CSharpCompilation 编译后的 C# 编译对象 syntaxTree SyntaxTree 要处理的语法树 compiledAssembly Assembly 编译后的程序集 typeDocumentationMap Dictionary<Type, string> 类型到文档摘要的映射字典 GetMetadataReferences(IEnumerable<MetadataReference>?) 获取当前应用域中所有必要的元数据引用 public static List<MetadataReference> GetMetadataReferences(IEnumerable<MetadataReference>? additionalReferences = null) Parameters additionalReferences IEnumerable<MetadataReference> 额外的元数据引用 Returns List<MetadataReference> 元数据引用的列表 IsValidCSharpIdentifier(string) 检查给定的字符串是否是有效的 C# 标识符 public static bool IsValidCSharpIdentifier(string identifier) Parameters identifier string 要检查的字符串 Returns bool 如果是有效的C#标识符，则为 true；否则为 false LoadFromDll(string) 从指定的 DLL 文件路径加载程序集 public static Assembly LoadFromDll(string dllPath) Parameters dllPath string DLL 文件路径 Returns Assembly 加载后的程序集 LoadFromMemory(byte[]) 从内存中的字节数组加载程序集 public static Assembly LoadFromMemory(byte[] assemblyBytes) Parameters assemblyBytes byte[] 程序集的字节数组 Returns Assembly 加载后的程序集 LogDiagnostics(IEnumerable<Diagnostic>) 记录并返回编译时的诊断信息 public static string LogDiagnostics(IEnumerable<Diagnostic> diagnostics) Parameters diagnostics IEnumerable<Diagnostic> 诊断信息的集合 Returns string 包含所有诊断信息的字符串 MapTypeToFilePath(CSharpCompilation, string, SyntaxTree, Assembly, Dictionary<Type, string>) 映射类型到文件路径 public static void MapTypeToFilePath(CSharpCompilation compilation, string filePath, SyntaxTree syntaxTree, Assembly compiledAssembly, Dictionary<Type, string> typeFilePathMap) Parameters compilation CSharpCompilation 编译后的 C# 编译对象 filePath string 语法树对应的文件路径 syntaxTree SyntaxTree 要处理的语法树 compiledAssembly Assembly 编译后的程序集 typeFilePathMap Dictionary<Type, string> 类型到文件路径的映射字典 ReadAndParseSyntaxTreesAsync(IEnumerable<string>) 异步读取并解析所有 .cs 文件的语法树 public static Task<Dictionary<string, SyntaxTree>> ReadAndParseSyntaxTreesAsync(IEnumerable<string> files) Parameters files IEnumerable<string> .cs 文件路径的集合 Returns Task<Dictionary<string, SyntaxTree>> 返回文件路径与语法树的映射 SaveAssembly(string, byte[]) 将字节数组形式的程序集保存为 DLL 文件 public static void SaveAssembly(string outputPath, byte[] assemblyBytes) Parameters outputPath string 输出的文件路径 assemblyBytes byte[] 程序集的字节数组"
  },
  "api/MAS.Compilation.NamespaceHelper.html": {
    "href": "api/MAS.Compilation.NamespaceHelper.html",
    "title": "Class NamespaceHelper | DataMaster",
    "summary": "Class NamespaceHelper Namespace MAS.Compilation Assembly MAS.Compilation.dll 命名空间帮助类，从路径转换为命名空间 public static class NamespaceHelper Inheritance object NamespaceHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCustomNamespace(IBuildConfig, params string[]) 根据配置和路径段生成自定义命名空间 public static string GetCustomNamespace(IBuildConfig config, params string[] segments) Parameters config IBuildConfig 构建配置接口实例 segments string[] 用于扩展命名空间的字符串数组 Returns string 生成的命名空间字符串 GetNamespaceFromPath(string) 将相对路径转换为命名空间，通过替换路径分隔符为点 public static string GetNamespaceFromPath(string relativePath) Parameters relativePath string 相对路径 Returns string 生成的命名空间 GetValidNamespaceFromPath(string) 将相对路径转换为合法的命名空间，通过替换路径分隔符为点，并替换非法字符 public static string GetValidNamespaceFromPath(string relativePath) Parameters relativePath string 相对路径 Returns string 生成的合法命名空间"
  },
  "api/MAS.Compilation.ServiceCollectionExtensions.html": {
    "href": "api/MAS.Compilation.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.Compilation Assembly MAS.Compilation.dll 提供扩展方法，用于在 IServiceCollection 中注册与编译相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCompilationService(IServiceCollection) 在指定的 IServiceCollection 中注册与编译相关的服务 public static IServiceCollection AddCompilationService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.Compilation.html": {
    "href": "api/MAS.Compilation.html",
    "title": "Namespace MAS.Compilation | DataMaster",
    "summary": "Namespace MAS.Compilation Classes CodeTemplateHelper 代码模板 CompilationHelper 提供C#代码编译辅助功能 NamespaceHelper 命名空间帮助类，从路径转换为命名空间 ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与编译相关的服务"
  },
  "api/MAS.Controls.LoadAnimation.CircularProgressIndicator.html": {
    "href": "api/MAS.Controls.LoadAnimation.CircularProgressIndicator.html",
    "title": "Class CircularProgressIndicator | DataMaster",
    "summary": "Class CircularProgressIndicator Namespace MAS.Controls.LoadAnimation Assembly MAS.Controls.dll CircularProgressIndicator.xaml 的交互逻辑 public class CircularProgressIndicator : UserControl, IAnimatable, ISupportInitialize, IFrameworkInputElement, IInputElement, IQueryAmbient, IAddChild, IComponentConnector Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl CircularProgressIndicator Implements IAnimatable ISupportInitialize IFrameworkInputElement IInputElement IQueryAmbient IAddChild IComponentConnector Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.ContentStringFormatProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.HasContentProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentChanged(object, object) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.Content ContentControl.ContentStringFormat ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.HasContent ContentControl.LogicalChildren Control.BackgroundProperty Control.BorderBrushProperty Control.BorderThicknessProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.ForegroundProperty Control.HorizontalContentAlignmentProperty Control.IsTabStopProperty Control.MouseDoubleClickEvent Control.PaddingProperty Control.PreviewMouseDoubleClickEvent Control.TabIndexProperty Control.TemplateProperty Control.VerticalContentAlignmentProperty Control.ArrangeOverride(Size) Control.MeasureOverride(Size) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.Background Control.BorderBrush Control.BorderThickness Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.Foreground Control.HandlesScrolling Control.HorizontalContentAlignment Control.IsTabStop Control.Padding Control.TabIndex Control.Template Control.VerticalContentAlignment Control.MouseDoubleClick Control.PreviewMouseDoubleClick FrameworkElement.ActualHeightProperty FrameworkElement.ActualWidthProperty FrameworkElement.BindingGroupProperty FrameworkElement.ContextMenuClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuProperty FrameworkElement.CursorProperty FrameworkElement.DataContextProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.FlowDirectionProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.ForceCursorProperty FrameworkElement.HeightProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.InputScopeProperty FrameworkElement.LanguageProperty FrameworkElement.LayoutTransformProperty FrameworkElement.LoadedEvent FrameworkElement.MarginProperty FrameworkElement.MaxHeightProperty FrameworkElement.MaxWidthProperty FrameworkElement.MinHeightProperty FrameworkElement.MinWidthProperty FrameworkElement.NameProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.StyleProperty FrameworkElement.TagProperty FrameworkElement.ToolTipClosingEvent FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipProperty FrameworkElement.UnloadedEvent FrameworkElement.UseLayoutRoundingProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.WidthProperty FrameworkElement.AddLogicalChild(object) FrameworkElement.ApplyTemplate() FrameworkElement.ArrangeCore(Rect) FrameworkElement.BeginInit() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.EndInit() FrameworkElement.FindName(string) FrameworkElement.FindResource(object) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.GetLayoutClip(Size) FrameworkElement.GetTemplateChild(string) FrameworkElement.GetUIParentCore() FrameworkElement.GetVisualChild(int) FrameworkElement.MeasureCore(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.OnApplyTemplate() FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.RegisterName(string, object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.TryFindResource(object) FrameworkElement.UnregisterName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.ActualHeight FrameworkElement.ActualWidth FrameworkElement.BindingGroup FrameworkElement.ContextMenu FrameworkElement.Cursor FrameworkElement.DataContext FrameworkElement.DefaultStyleKey FrameworkElement.FlowDirection FrameworkElement.FocusVisualStyle FrameworkElement.ForceCursor FrameworkElement.Height FrameworkElement.HorizontalAlignment FrameworkElement.InheritanceBehavior FrameworkElement.InputScope FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.Language FrameworkElement.LayoutTransform FrameworkElement.Margin FrameworkElement.MaxHeight FrameworkElement.MaxWidth FrameworkElement.MinHeight FrameworkElement.MinWidth FrameworkElement.Name FrameworkElement.OverridesDefaultStyle FrameworkElement.Parent FrameworkElement.Resources FrameworkElement.Style FrameworkElement.Tag FrameworkElement.TemplatedParent FrameworkElement.ToolTip FrameworkElement.Triggers FrameworkElement.UseLayoutRounding FrameworkElement.VerticalAlignment FrameworkElement.VisualChildrenCount FrameworkElement.Width FrameworkElement.ContextMenuClosing FrameworkElement.ContextMenuOpening FrameworkElement.DataContextChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.SourceUpdated FrameworkElement.TargetUpdated FrameworkElement.ToolTipClosing FrameworkElement.ToolTipOpening FrameworkElement.Unloaded UIElement.AllowDropProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.BitmapEffectInputProperty UIElement.BitmapEffectProperty UIElement.CacheModeProperty UIElement.ClipProperty UIElement.ClipToBoundsProperty UIElement.DragEnterEvent UIElement.DragLeaveEvent UIElement.DragOverEvent UIElement.DropEvent UIElement.EffectProperty UIElement.FocusableProperty UIElement.GiveFeedbackEvent UIElement.GotFocusEvent UIElement.GotKeyboardFocusEvent UIElement.GotMouseCaptureEvent UIElement.GotStylusCaptureEvent UIElement.GotTouchCaptureEvent UIElement.IsEnabledProperty UIElement.IsFocusedProperty UIElement.IsHitTestVisibleProperty UIElement.IsKeyboardFocusedProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsManipulationEnabledProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusOverProperty UIElement.IsVisibleProperty UIElement.KeyDownEvent UIElement.KeyUpEvent UIElement.LostFocusEvent UIElement.LostKeyboardFocusEvent UIElement.LostMouseCaptureEvent UIElement.LostStylusCaptureEvent UIElement.LostTouchCaptureEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationStartingEvent UIElement.MouseDownEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.MouseLeftButtonDownEvent UIElement.MouseLeftButtonUpEvent UIElement.MouseMoveEvent UIElement.MouseRightButtonDownEvent UIElement.MouseRightButtonUpEvent UIElement.MouseUpEvent UIElement.MouseWheelEvent UIElement.OpacityMaskProperty UIElement.OpacityProperty UIElement.PreviewDragEnterEvent UIElement.PreviewDragLeaveEvent UIElement.PreviewDragOverEvent UIElement.PreviewDropEvent UIElement.PreviewGiveFeedbackEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.PreviewKeyDownEvent UIElement.PreviewKeyUpEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.PreviewMouseDownEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.PreviewMouseUpEvent UIElement.PreviewMouseWheelEvent UIElement.PreviewQueryContinueDragEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewStylusDownEvent UIElement.PreviewStylusInAirMoveEvent UIElement.PreviewStylusInRangeEvent UIElement.PreviewStylusMoveEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.PreviewStylusUpEvent UIElement.PreviewTextInputEvent UIElement.PreviewTouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.QueryContinueDragEvent UIElement.QueryCursorEvent UIElement.RenderTransformOriginProperty UIElement.RenderTransformProperty UIElement.SnapsToDevicePixelsProperty UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.StylusDownEvent UIElement.StylusEnterEvent UIElement.StylusInAirMoveEvent UIElement.StylusInRangeEvent UIElement.StylusLeaveEvent UIElement.StylusMoveEvent UIElement.StylusOutOfRangeEvent UIElement.StylusSystemGestureEvent UIElement.StylusUpEvent UIElement.TextInputEvent UIElement.TouchDownEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.TouchMoveEvent UIElement.TouchUpEvent UIElement.UidProperty UIElement.VisibilityProperty UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.Arrange(Rect) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.CaptureMouse() UIElement.CaptureStylus() UIElement.CaptureTouch(TouchDevice) UIElement.Focus() UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.HitTestCore(PointHitTestParameters) UIElement.InputHitTest(Point) UIElement.InvalidateArrange() UIElement.InvalidateMeasure() UIElement.InvalidateVisual() UIElement.Measure(Size) UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnDragEnter(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnRender(DrawingContext) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.RaiseEvent(RoutedEventArgs) UIElement.ReleaseAllTouchCaptures() UIElement.ReleaseMouseCapture() UIElement.ReleaseStylusCapture() UIElement.ReleaseTouchCapture(TouchDevice) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.TranslatePoint(Point, UIElement) UIElement.UpdateLayout() UIElement.AllowDrop UIElement.AreAnyTouchesCaptured UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesOver UIElement.BitmapEffect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Clip UIElement.ClipToBounds UIElement.CommandBindings UIElement.DesiredSize UIElement.Effect UIElement.Focusable UIElement.HasAnimatedProperties UIElement.HasEffectiveKeyboardFocus UIElement.InputBindings UIElement.IsArrangeValid UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsFocused UIElement.IsHitTestVisible UIElement.IsInputMethodEnabled UIElement.IsKeyboardFocused UIElement.IsKeyboardFocusWithin UIElement.IsManipulationEnabled UIElement.IsMeasureValid UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusOver UIElement.IsVisible UIElement.Opacity UIElement.OpacityMask UIElement.PersistId UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.SnapsToDevicePixels UIElement.StylusPlugIns UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesDirectlyOver UIElement.TouchesOver UIElement.Uid UIElement.Visibility UIElement.DragEnter UIElement.DragLeave UIElement.DragOver UIElement.Drop UIElement.FocusableChanged UIElement.GiveFeedback UIElement.GotFocus UIElement.GotKeyboardFocus UIElement.GotMouseCapture UIElement.GotStylusCapture UIElement.GotTouchCapture UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsKeyboardFocusedChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsMouseDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsVisibleChanged UIElement.KeyDown UIElement.KeyUp UIElement.LayoutUpdated UIElement.LostFocus UIElement.LostKeyboardFocus UIElement.LostMouseCapture UIElement.LostStylusCapture UIElement.LostTouchCapture UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationStarted UIElement.ManipulationStarting UIElement.MouseDown UIElement.MouseEnter UIElement.MouseLeave UIElement.MouseLeftButtonDown UIElement.MouseLeftButtonUp UIElement.MouseMove UIElement.MouseRightButtonDown UIElement.MouseRightButtonUp UIElement.MouseUp UIElement.MouseWheel UIElement.PreviewDragEnter UIElement.PreviewDragLeave UIElement.PreviewDragOver UIElement.PreviewDrop UIElement.PreviewGiveFeedback UIElement.PreviewGotKeyboardFocus UIElement.PreviewKeyDown UIElement.PreviewKeyUp UIElement.PreviewLostKeyboardFocus UIElement.PreviewMouseDown UIElement.PreviewMouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.PreviewMouseMove UIElement.PreviewMouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.PreviewMouseUp UIElement.PreviewMouseWheel UIElement.PreviewQueryContinueDrag UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewStylusDown UIElement.PreviewStylusInAirMove UIElement.PreviewStylusInRange UIElement.PreviewStylusMove UIElement.PreviewStylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.PreviewStylusUp UIElement.PreviewTextInput UIElement.PreviewTouchDown UIElement.PreviewTouchMove UIElement.PreviewTouchUp UIElement.QueryContinueDrag UIElement.QueryCursor UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.StylusDown UIElement.StylusEnter UIElement.StylusInAirMove UIElement.StylusInRange UIElement.StylusLeave UIElement.StylusMove UIElement.StylusOutOfRange UIElement.StylusSystemGesture UIElement.StylusUp UIElement.TextInput UIElement.TouchDown UIElement.TouchEnter UIElement.TouchLeave UIElement.TouchMove UIElement.TouchUp Visual.AddVisualChild(Visual) Visual.FindCommonVisualAncestor(DependencyObject) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.PointFromScreen(Point) Visual.PointToScreen(Point) Visual.RemoveVisualChild(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToAncestor(Visual) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualBitmapScalingMode Visual.VisualCacheMode Visual.VisualClearTypeHint Visual.VisualClip Visual.VisualEdgeMode Visual.VisualEffect Visual.VisualOffset Visual.VisualOpacity Visual.VisualOpacityMask Visual.VisualParent Visual.VisualScrollableAreaClip Visual.VisualTextHintingMode Visual.VisualTextRenderingMode Visual.VisualTransform Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetLocalValueEnumerator() DependencyObject.GetValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CircularProgressIndicator() 构造函数，初始化 CircularProgressIndicator 新实例 public CircularProgressIndicator() Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MAS.Controls.LoadAnimation.LoadAnimationControl.html": {
    "href": "api/MAS.Controls.LoadAnimation.LoadAnimationControl.html",
    "title": "Class LoadAnimationControl | DataMaster",
    "summary": "Class LoadAnimationControl Namespace MAS.Controls.LoadAnimation Assembly MAS.Controls.dll LoadAnimationControl.xaml 的交互逻辑 public class LoadAnimationControl : UserControl, IAnimatable, ISupportInitialize, IFrameworkInputElement, IInputElement, IQueryAmbient, IAddChild, IComponentConnector Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl LoadAnimationControl Implements IAnimatable ISupportInitialize IFrameworkInputElement IInputElement IQueryAmbient IAddChild IComponentConnector Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.ContentStringFormatProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.HasContentProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentChanged(object, object) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.Content ContentControl.ContentStringFormat ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.HasContent ContentControl.LogicalChildren Control.BackgroundProperty Control.BorderBrushProperty Control.BorderThicknessProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.ForegroundProperty Control.HorizontalContentAlignmentProperty Control.IsTabStopProperty Control.MouseDoubleClickEvent Control.PaddingProperty Control.PreviewMouseDoubleClickEvent Control.TabIndexProperty Control.TemplateProperty Control.VerticalContentAlignmentProperty Control.ArrangeOverride(Size) Control.MeasureOverride(Size) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.Background Control.BorderBrush Control.BorderThickness Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.Foreground Control.HandlesScrolling Control.HorizontalContentAlignment Control.IsTabStop Control.Padding Control.TabIndex Control.Template Control.VerticalContentAlignment Control.MouseDoubleClick Control.PreviewMouseDoubleClick FrameworkElement.ActualHeightProperty FrameworkElement.ActualWidthProperty FrameworkElement.BindingGroupProperty FrameworkElement.ContextMenuClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuProperty FrameworkElement.CursorProperty FrameworkElement.DataContextProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.FlowDirectionProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.ForceCursorProperty FrameworkElement.HeightProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.InputScopeProperty FrameworkElement.LanguageProperty FrameworkElement.LayoutTransformProperty FrameworkElement.LoadedEvent FrameworkElement.MarginProperty FrameworkElement.MaxHeightProperty FrameworkElement.MaxWidthProperty FrameworkElement.MinHeightProperty FrameworkElement.MinWidthProperty FrameworkElement.NameProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.StyleProperty FrameworkElement.TagProperty FrameworkElement.ToolTipClosingEvent FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipProperty FrameworkElement.UnloadedEvent FrameworkElement.UseLayoutRoundingProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.WidthProperty FrameworkElement.AddLogicalChild(object) FrameworkElement.ApplyTemplate() FrameworkElement.ArrangeCore(Rect) FrameworkElement.BeginInit() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.EndInit() FrameworkElement.FindName(string) FrameworkElement.FindResource(object) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.GetLayoutClip(Size) FrameworkElement.GetTemplateChild(string) FrameworkElement.GetUIParentCore() FrameworkElement.GetVisualChild(int) FrameworkElement.MeasureCore(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.OnApplyTemplate() FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.RegisterName(string, object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.TryFindResource(object) FrameworkElement.UnregisterName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.ActualHeight FrameworkElement.ActualWidth FrameworkElement.BindingGroup FrameworkElement.ContextMenu FrameworkElement.Cursor FrameworkElement.DataContext FrameworkElement.DefaultStyleKey FrameworkElement.FlowDirection FrameworkElement.FocusVisualStyle FrameworkElement.ForceCursor FrameworkElement.Height FrameworkElement.HorizontalAlignment FrameworkElement.InheritanceBehavior FrameworkElement.InputScope FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.Language FrameworkElement.LayoutTransform FrameworkElement.Margin FrameworkElement.MaxHeight FrameworkElement.MaxWidth FrameworkElement.MinHeight FrameworkElement.MinWidth FrameworkElement.Name FrameworkElement.OverridesDefaultStyle FrameworkElement.Parent FrameworkElement.Resources FrameworkElement.Style FrameworkElement.Tag FrameworkElement.TemplatedParent FrameworkElement.ToolTip FrameworkElement.Triggers FrameworkElement.UseLayoutRounding FrameworkElement.VerticalAlignment FrameworkElement.VisualChildrenCount FrameworkElement.Width FrameworkElement.ContextMenuClosing FrameworkElement.ContextMenuOpening FrameworkElement.DataContextChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.SourceUpdated FrameworkElement.TargetUpdated FrameworkElement.ToolTipClosing FrameworkElement.ToolTipOpening FrameworkElement.Unloaded UIElement.AllowDropProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.BitmapEffectInputProperty UIElement.BitmapEffectProperty UIElement.CacheModeProperty UIElement.ClipProperty UIElement.ClipToBoundsProperty UIElement.DragEnterEvent UIElement.DragLeaveEvent UIElement.DragOverEvent UIElement.DropEvent UIElement.EffectProperty UIElement.FocusableProperty UIElement.GiveFeedbackEvent UIElement.GotFocusEvent UIElement.GotKeyboardFocusEvent UIElement.GotMouseCaptureEvent UIElement.GotStylusCaptureEvent UIElement.GotTouchCaptureEvent UIElement.IsEnabledProperty UIElement.IsFocusedProperty UIElement.IsHitTestVisibleProperty UIElement.IsKeyboardFocusedProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsManipulationEnabledProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusOverProperty UIElement.IsVisibleProperty UIElement.KeyDownEvent UIElement.KeyUpEvent UIElement.LostFocusEvent UIElement.LostKeyboardFocusEvent UIElement.LostMouseCaptureEvent UIElement.LostStylusCaptureEvent UIElement.LostTouchCaptureEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationStartingEvent UIElement.MouseDownEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.MouseLeftButtonDownEvent UIElement.MouseLeftButtonUpEvent UIElement.MouseMoveEvent UIElement.MouseRightButtonDownEvent UIElement.MouseRightButtonUpEvent UIElement.MouseUpEvent UIElement.MouseWheelEvent UIElement.OpacityMaskProperty UIElement.OpacityProperty UIElement.PreviewDragEnterEvent UIElement.PreviewDragLeaveEvent UIElement.PreviewDragOverEvent UIElement.PreviewDropEvent UIElement.PreviewGiveFeedbackEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.PreviewKeyDownEvent UIElement.PreviewKeyUpEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.PreviewMouseDownEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.PreviewMouseUpEvent UIElement.PreviewMouseWheelEvent UIElement.PreviewQueryContinueDragEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewStylusDownEvent UIElement.PreviewStylusInAirMoveEvent UIElement.PreviewStylusInRangeEvent UIElement.PreviewStylusMoveEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.PreviewStylusUpEvent UIElement.PreviewTextInputEvent UIElement.PreviewTouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.QueryContinueDragEvent UIElement.QueryCursorEvent UIElement.RenderTransformOriginProperty UIElement.RenderTransformProperty UIElement.SnapsToDevicePixelsProperty UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.StylusDownEvent UIElement.StylusEnterEvent UIElement.StylusInAirMoveEvent UIElement.StylusInRangeEvent UIElement.StylusLeaveEvent UIElement.StylusMoveEvent UIElement.StylusOutOfRangeEvent UIElement.StylusSystemGestureEvent UIElement.StylusUpEvent UIElement.TextInputEvent UIElement.TouchDownEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.TouchMoveEvent UIElement.TouchUpEvent UIElement.UidProperty UIElement.VisibilityProperty UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.Arrange(Rect) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.CaptureMouse() UIElement.CaptureStylus() UIElement.CaptureTouch(TouchDevice) UIElement.Focus() UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.HitTestCore(PointHitTestParameters) UIElement.InputHitTest(Point) UIElement.InvalidateArrange() UIElement.InvalidateMeasure() UIElement.InvalidateVisual() UIElement.Measure(Size) UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnDragEnter(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnRender(DrawingContext) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.RaiseEvent(RoutedEventArgs) UIElement.ReleaseAllTouchCaptures() UIElement.ReleaseMouseCapture() UIElement.ReleaseStylusCapture() UIElement.ReleaseTouchCapture(TouchDevice) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.TranslatePoint(Point, UIElement) UIElement.UpdateLayout() UIElement.AllowDrop UIElement.AreAnyTouchesCaptured UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesOver UIElement.BitmapEffect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Clip UIElement.ClipToBounds UIElement.CommandBindings UIElement.DesiredSize UIElement.Effect UIElement.Focusable UIElement.HasAnimatedProperties UIElement.HasEffectiveKeyboardFocus UIElement.InputBindings UIElement.IsArrangeValid UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsFocused UIElement.IsHitTestVisible UIElement.IsInputMethodEnabled UIElement.IsKeyboardFocused UIElement.IsKeyboardFocusWithin UIElement.IsManipulationEnabled UIElement.IsMeasureValid UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusOver UIElement.IsVisible UIElement.Opacity UIElement.OpacityMask UIElement.PersistId UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.SnapsToDevicePixels UIElement.StylusPlugIns UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesDirectlyOver UIElement.TouchesOver UIElement.Uid UIElement.Visibility UIElement.DragEnter UIElement.DragLeave UIElement.DragOver UIElement.Drop UIElement.FocusableChanged UIElement.GiveFeedback UIElement.GotFocus UIElement.GotKeyboardFocus UIElement.GotMouseCapture UIElement.GotStylusCapture UIElement.GotTouchCapture UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsKeyboardFocusedChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsMouseDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsVisibleChanged UIElement.KeyDown UIElement.KeyUp UIElement.LayoutUpdated UIElement.LostFocus UIElement.LostKeyboardFocus UIElement.LostMouseCapture UIElement.LostStylusCapture UIElement.LostTouchCapture UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationStarted UIElement.ManipulationStarting UIElement.MouseDown UIElement.MouseEnter UIElement.MouseLeave UIElement.MouseLeftButtonDown UIElement.MouseLeftButtonUp UIElement.MouseMove UIElement.MouseRightButtonDown UIElement.MouseRightButtonUp UIElement.MouseUp UIElement.MouseWheel UIElement.PreviewDragEnter UIElement.PreviewDragLeave UIElement.PreviewDragOver UIElement.PreviewDrop UIElement.PreviewGiveFeedback UIElement.PreviewGotKeyboardFocus UIElement.PreviewKeyDown UIElement.PreviewKeyUp UIElement.PreviewLostKeyboardFocus UIElement.PreviewMouseDown UIElement.PreviewMouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.PreviewMouseMove UIElement.PreviewMouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.PreviewMouseUp UIElement.PreviewMouseWheel UIElement.PreviewQueryContinueDrag UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewStylusDown UIElement.PreviewStylusInAirMove UIElement.PreviewStylusInRange UIElement.PreviewStylusMove UIElement.PreviewStylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.PreviewStylusUp UIElement.PreviewTextInput UIElement.PreviewTouchDown UIElement.PreviewTouchMove UIElement.PreviewTouchUp UIElement.QueryContinueDrag UIElement.QueryCursor UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.StylusDown UIElement.StylusEnter UIElement.StylusInAirMove UIElement.StylusInRange UIElement.StylusLeave UIElement.StylusMove UIElement.StylusOutOfRange UIElement.StylusSystemGesture UIElement.StylusUp UIElement.TextInput UIElement.TouchDown UIElement.TouchEnter UIElement.TouchLeave UIElement.TouchMove UIElement.TouchUp Visual.AddVisualChild(Visual) Visual.FindCommonVisualAncestor(DependencyObject) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.PointFromScreen(Point) Visual.PointToScreen(Point) Visual.RemoveVisualChild(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToAncestor(Visual) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualBitmapScalingMode Visual.VisualCacheMode Visual.VisualClearTypeHint Visual.VisualClip Visual.VisualEdgeMode Visual.VisualEffect Visual.VisualOffset Visual.VisualOpacity Visual.VisualOpacityMask Visual.VisualParent Visual.VisualScrollableAreaClip Visual.VisualTextHintingMode Visual.VisualTextRenderingMode Visual.VisualTransform Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetLocalValueEnumerator() DependencyObject.GetValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LoadAnimationControl() 构造函数，初始化 LoadAnimationControl 新实例 public LoadAnimationControl() Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MAS.Controls.LoadAnimation.LoadingCircle.html": {
    "href": "api/MAS.Controls.LoadAnimation.LoadingCircle.html",
    "title": "Class LoadingCircle | DataMaster",
    "summary": "Class LoadingCircle Namespace MAS.Controls.LoadAnimation Assembly MAS.Controls.dll LoadingCircle.xaml 的交互逻辑 public class LoadingCircle : UserControl, IAnimatable, ISupportInitialize, IFrameworkInputElement, IInputElement, IQueryAmbient, IAddChild, IComponentConnector Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl LoadingCircle Implements IAnimatable ISupportInitialize IFrameworkInputElement IInputElement IQueryAmbient IAddChild IComponentConnector Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.ContentStringFormatProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.HasContentProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentChanged(object, object) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.Content ContentControl.ContentStringFormat ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.HasContent ContentControl.LogicalChildren Control.BackgroundProperty Control.BorderBrushProperty Control.BorderThicknessProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.ForegroundProperty Control.HorizontalContentAlignmentProperty Control.IsTabStopProperty Control.MouseDoubleClickEvent Control.PaddingProperty Control.PreviewMouseDoubleClickEvent Control.TabIndexProperty Control.TemplateProperty Control.VerticalContentAlignmentProperty Control.ArrangeOverride(Size) Control.MeasureOverride(Size) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.Background Control.BorderBrush Control.BorderThickness Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.Foreground Control.HandlesScrolling Control.HorizontalContentAlignment Control.IsTabStop Control.Padding Control.TabIndex Control.Template Control.VerticalContentAlignment Control.MouseDoubleClick Control.PreviewMouseDoubleClick FrameworkElement.ActualHeightProperty FrameworkElement.ActualWidthProperty FrameworkElement.BindingGroupProperty FrameworkElement.ContextMenuClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuProperty FrameworkElement.CursorProperty FrameworkElement.DataContextProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.FlowDirectionProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.ForceCursorProperty FrameworkElement.HeightProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.InputScopeProperty FrameworkElement.LanguageProperty FrameworkElement.LayoutTransformProperty FrameworkElement.LoadedEvent FrameworkElement.MarginProperty FrameworkElement.MaxHeightProperty FrameworkElement.MaxWidthProperty FrameworkElement.MinHeightProperty FrameworkElement.MinWidthProperty FrameworkElement.NameProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.StyleProperty FrameworkElement.TagProperty FrameworkElement.ToolTipClosingEvent FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipProperty FrameworkElement.UnloadedEvent FrameworkElement.UseLayoutRoundingProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.WidthProperty FrameworkElement.AddLogicalChild(object) FrameworkElement.ApplyTemplate() FrameworkElement.ArrangeCore(Rect) FrameworkElement.BeginInit() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.EndInit() FrameworkElement.FindName(string) FrameworkElement.FindResource(object) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.GetLayoutClip(Size) FrameworkElement.GetTemplateChild(string) FrameworkElement.GetUIParentCore() FrameworkElement.GetVisualChild(int) FrameworkElement.MeasureCore(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.OnApplyTemplate() FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.RegisterName(string, object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.TryFindResource(object) FrameworkElement.UnregisterName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.ActualHeight FrameworkElement.ActualWidth FrameworkElement.BindingGroup FrameworkElement.ContextMenu FrameworkElement.Cursor FrameworkElement.DataContext FrameworkElement.DefaultStyleKey FrameworkElement.FlowDirection FrameworkElement.FocusVisualStyle FrameworkElement.ForceCursor FrameworkElement.Height FrameworkElement.HorizontalAlignment FrameworkElement.InheritanceBehavior FrameworkElement.InputScope FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.Language FrameworkElement.LayoutTransform FrameworkElement.Margin FrameworkElement.MaxHeight FrameworkElement.MaxWidth FrameworkElement.MinHeight FrameworkElement.MinWidth FrameworkElement.Name FrameworkElement.OverridesDefaultStyle FrameworkElement.Parent FrameworkElement.Resources FrameworkElement.Style FrameworkElement.Tag FrameworkElement.TemplatedParent FrameworkElement.ToolTip FrameworkElement.Triggers FrameworkElement.UseLayoutRounding FrameworkElement.VerticalAlignment FrameworkElement.VisualChildrenCount FrameworkElement.Width FrameworkElement.ContextMenuClosing FrameworkElement.ContextMenuOpening FrameworkElement.DataContextChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.SourceUpdated FrameworkElement.TargetUpdated FrameworkElement.ToolTipClosing FrameworkElement.ToolTipOpening FrameworkElement.Unloaded UIElement.AllowDropProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.BitmapEffectInputProperty UIElement.BitmapEffectProperty UIElement.CacheModeProperty UIElement.ClipProperty UIElement.ClipToBoundsProperty UIElement.DragEnterEvent UIElement.DragLeaveEvent UIElement.DragOverEvent UIElement.DropEvent UIElement.EffectProperty UIElement.FocusableProperty UIElement.GiveFeedbackEvent UIElement.GotFocusEvent UIElement.GotKeyboardFocusEvent UIElement.GotMouseCaptureEvent UIElement.GotStylusCaptureEvent UIElement.GotTouchCaptureEvent UIElement.IsEnabledProperty UIElement.IsFocusedProperty UIElement.IsHitTestVisibleProperty UIElement.IsKeyboardFocusedProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsManipulationEnabledProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusOverProperty UIElement.IsVisibleProperty UIElement.KeyDownEvent UIElement.KeyUpEvent UIElement.LostFocusEvent UIElement.LostKeyboardFocusEvent UIElement.LostMouseCaptureEvent UIElement.LostStylusCaptureEvent UIElement.LostTouchCaptureEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationStartingEvent UIElement.MouseDownEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.MouseLeftButtonDownEvent UIElement.MouseLeftButtonUpEvent UIElement.MouseMoveEvent UIElement.MouseRightButtonDownEvent UIElement.MouseRightButtonUpEvent UIElement.MouseUpEvent UIElement.MouseWheelEvent UIElement.OpacityMaskProperty UIElement.OpacityProperty UIElement.PreviewDragEnterEvent UIElement.PreviewDragLeaveEvent UIElement.PreviewDragOverEvent UIElement.PreviewDropEvent UIElement.PreviewGiveFeedbackEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.PreviewKeyDownEvent UIElement.PreviewKeyUpEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.PreviewMouseDownEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.PreviewMouseUpEvent UIElement.PreviewMouseWheelEvent UIElement.PreviewQueryContinueDragEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewStylusDownEvent UIElement.PreviewStylusInAirMoveEvent UIElement.PreviewStylusInRangeEvent UIElement.PreviewStylusMoveEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.PreviewStylusUpEvent UIElement.PreviewTextInputEvent UIElement.PreviewTouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.QueryContinueDragEvent UIElement.QueryCursorEvent UIElement.RenderTransformOriginProperty UIElement.RenderTransformProperty UIElement.SnapsToDevicePixelsProperty UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.StylusDownEvent UIElement.StylusEnterEvent UIElement.StylusInAirMoveEvent UIElement.StylusInRangeEvent UIElement.StylusLeaveEvent UIElement.StylusMoveEvent UIElement.StylusOutOfRangeEvent UIElement.StylusSystemGestureEvent UIElement.StylusUpEvent UIElement.TextInputEvent UIElement.TouchDownEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.TouchMoveEvent UIElement.TouchUpEvent UIElement.UidProperty UIElement.VisibilityProperty UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.Arrange(Rect) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.CaptureMouse() UIElement.CaptureStylus() UIElement.CaptureTouch(TouchDevice) UIElement.Focus() UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.HitTestCore(PointHitTestParameters) UIElement.InputHitTest(Point) UIElement.InvalidateArrange() UIElement.InvalidateMeasure() UIElement.InvalidateVisual() UIElement.Measure(Size) UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnDragEnter(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnRender(DrawingContext) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.RaiseEvent(RoutedEventArgs) UIElement.ReleaseAllTouchCaptures() UIElement.ReleaseMouseCapture() UIElement.ReleaseStylusCapture() UIElement.ReleaseTouchCapture(TouchDevice) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.TranslatePoint(Point, UIElement) UIElement.UpdateLayout() UIElement.AllowDrop UIElement.AreAnyTouchesCaptured UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesOver UIElement.BitmapEffect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Clip UIElement.ClipToBounds UIElement.CommandBindings UIElement.DesiredSize UIElement.Effect UIElement.Focusable UIElement.HasAnimatedProperties UIElement.HasEffectiveKeyboardFocus UIElement.InputBindings UIElement.IsArrangeValid UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsFocused UIElement.IsHitTestVisible UIElement.IsInputMethodEnabled UIElement.IsKeyboardFocused UIElement.IsKeyboardFocusWithin UIElement.IsManipulationEnabled UIElement.IsMeasureValid UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusOver UIElement.IsVisible UIElement.Opacity UIElement.OpacityMask UIElement.PersistId UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.SnapsToDevicePixels UIElement.StylusPlugIns UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesDirectlyOver UIElement.TouchesOver UIElement.Uid UIElement.Visibility UIElement.DragEnter UIElement.DragLeave UIElement.DragOver UIElement.Drop UIElement.FocusableChanged UIElement.GiveFeedback UIElement.GotFocus UIElement.GotKeyboardFocus UIElement.GotMouseCapture UIElement.GotStylusCapture UIElement.GotTouchCapture UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsKeyboardFocusedChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsMouseDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsVisibleChanged UIElement.KeyDown UIElement.KeyUp UIElement.LayoutUpdated UIElement.LostFocus UIElement.LostKeyboardFocus UIElement.LostMouseCapture UIElement.LostStylusCapture UIElement.LostTouchCapture UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationStarted UIElement.ManipulationStarting UIElement.MouseDown UIElement.MouseEnter UIElement.MouseLeave UIElement.MouseLeftButtonDown UIElement.MouseLeftButtonUp UIElement.MouseMove UIElement.MouseRightButtonDown UIElement.MouseRightButtonUp UIElement.MouseUp UIElement.MouseWheel UIElement.PreviewDragEnter UIElement.PreviewDragLeave UIElement.PreviewDragOver UIElement.PreviewDrop UIElement.PreviewGiveFeedback UIElement.PreviewGotKeyboardFocus UIElement.PreviewKeyDown UIElement.PreviewKeyUp UIElement.PreviewLostKeyboardFocus UIElement.PreviewMouseDown UIElement.PreviewMouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.PreviewMouseMove UIElement.PreviewMouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.PreviewMouseUp UIElement.PreviewMouseWheel UIElement.PreviewQueryContinueDrag UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewStylusDown UIElement.PreviewStylusInAirMove UIElement.PreviewStylusInRange UIElement.PreviewStylusMove UIElement.PreviewStylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.PreviewStylusUp UIElement.PreviewTextInput UIElement.PreviewTouchDown UIElement.PreviewTouchMove UIElement.PreviewTouchUp UIElement.QueryContinueDrag UIElement.QueryCursor UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.StylusDown UIElement.StylusEnter UIElement.StylusInAirMove UIElement.StylusInRange UIElement.StylusLeave UIElement.StylusMove UIElement.StylusOutOfRange UIElement.StylusSystemGesture UIElement.StylusUp UIElement.TextInput UIElement.TouchDown UIElement.TouchEnter UIElement.TouchLeave UIElement.TouchMove UIElement.TouchUp Visual.AddVisualChild(Visual) Visual.FindCommonVisualAncestor(DependencyObject) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.PointFromScreen(Point) Visual.PointToScreen(Point) Visual.RemoveVisualChild(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToAncestor(Visual) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualBitmapScalingMode Visual.VisualCacheMode Visual.VisualClearTypeHint Visual.VisualClip Visual.VisualEdgeMode Visual.VisualEffect Visual.VisualOffset Visual.VisualOpacity Visual.VisualOpacityMask Visual.VisualParent Visual.VisualScrollableAreaClip Visual.VisualTextHintingMode Visual.VisualTextRenderingMode Visual.VisualTransform Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetLocalValueEnumerator() DependencyObject.GetValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LoadingCircle() 构造函数，初始化 LoadingCircle 新实例 public LoadingCircle() Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MAS.Controls.LoadAnimation.html": {
    "href": "api/MAS.Controls.LoadAnimation.html",
    "title": "Namespace MAS.Controls.LoadAnimation | DataMaster",
    "summary": "Namespace MAS.Controls.LoadAnimation Classes CircularProgressIndicator CircularProgressIndicator.xaml 的交互逻辑 LoadAnimationControl LoadAnimationControl.xaml 的交互逻辑 LoadingCircle LoadingCircle.xaml 的交互逻辑"
  },
  "api/MAS.Controls.Notifications.TipsNotificationControl.html": {
    "href": "api/MAS.Controls.Notifications.TipsNotificationControl.html",
    "title": "Class TipsNotificationControl | DataMaster",
    "summary": "Class TipsNotificationControl Namespace MAS.Controls.Notifications Assembly MAS.Controls.dll TipsNotificationControl.xaml 的交互逻辑 public class TipsNotificationControl : UserControl, IAnimatable, ISupportInitialize, IFrameworkInputElement, IInputElement, IQueryAmbient, IAddChild, IComponentConnector Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl TipsNotificationControl Implements IAnimatable ISupportInitialize IFrameworkInputElement IInputElement IQueryAmbient IAddChild IComponentConnector Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.ContentStringFormatProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.HasContentProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentChanged(object, object) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.Content ContentControl.ContentStringFormat ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.HasContent ContentControl.LogicalChildren Control.BackgroundProperty Control.BorderBrushProperty Control.BorderThicknessProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.ForegroundProperty Control.HorizontalContentAlignmentProperty Control.IsTabStopProperty Control.MouseDoubleClickEvent Control.PaddingProperty Control.PreviewMouseDoubleClickEvent Control.TabIndexProperty Control.TemplateProperty Control.VerticalContentAlignmentProperty Control.ArrangeOverride(Size) Control.MeasureOverride(Size) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.Background Control.BorderBrush Control.BorderThickness Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.Foreground Control.HandlesScrolling Control.HorizontalContentAlignment Control.IsTabStop Control.Padding Control.TabIndex Control.Template Control.VerticalContentAlignment Control.MouseDoubleClick Control.PreviewMouseDoubleClick FrameworkElement.ActualHeightProperty FrameworkElement.ActualWidthProperty FrameworkElement.BindingGroupProperty FrameworkElement.ContextMenuClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuProperty FrameworkElement.CursorProperty FrameworkElement.DataContextProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.FlowDirectionProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.ForceCursorProperty FrameworkElement.HeightProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.InputScopeProperty FrameworkElement.LanguageProperty FrameworkElement.LayoutTransformProperty FrameworkElement.LoadedEvent FrameworkElement.MarginProperty FrameworkElement.MaxHeightProperty FrameworkElement.MaxWidthProperty FrameworkElement.MinHeightProperty FrameworkElement.MinWidthProperty FrameworkElement.NameProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.StyleProperty FrameworkElement.TagProperty FrameworkElement.ToolTipClosingEvent FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipProperty FrameworkElement.UnloadedEvent FrameworkElement.UseLayoutRoundingProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.WidthProperty FrameworkElement.AddLogicalChild(object) FrameworkElement.ApplyTemplate() FrameworkElement.ArrangeCore(Rect) FrameworkElement.BeginInit() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.EndInit() FrameworkElement.FindName(string) FrameworkElement.FindResource(object) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.GetLayoutClip(Size) FrameworkElement.GetTemplateChild(string) FrameworkElement.GetUIParentCore() FrameworkElement.GetVisualChild(int) FrameworkElement.MeasureCore(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.OnApplyTemplate() FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.RegisterName(string, object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.TryFindResource(object) FrameworkElement.UnregisterName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.ActualHeight FrameworkElement.ActualWidth FrameworkElement.BindingGroup FrameworkElement.ContextMenu FrameworkElement.Cursor FrameworkElement.DataContext FrameworkElement.DefaultStyleKey FrameworkElement.FlowDirection FrameworkElement.FocusVisualStyle FrameworkElement.ForceCursor FrameworkElement.Height FrameworkElement.HorizontalAlignment FrameworkElement.InheritanceBehavior FrameworkElement.InputScope FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.Language FrameworkElement.LayoutTransform FrameworkElement.Margin FrameworkElement.MaxHeight FrameworkElement.MaxWidth FrameworkElement.MinHeight FrameworkElement.MinWidth FrameworkElement.Name FrameworkElement.OverridesDefaultStyle FrameworkElement.Parent FrameworkElement.Resources FrameworkElement.Style FrameworkElement.Tag FrameworkElement.TemplatedParent FrameworkElement.ToolTip FrameworkElement.Triggers FrameworkElement.UseLayoutRounding FrameworkElement.VerticalAlignment FrameworkElement.VisualChildrenCount FrameworkElement.Width FrameworkElement.ContextMenuClosing FrameworkElement.ContextMenuOpening FrameworkElement.DataContextChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.SourceUpdated FrameworkElement.TargetUpdated FrameworkElement.ToolTipClosing FrameworkElement.ToolTipOpening FrameworkElement.Unloaded UIElement.AllowDropProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.BitmapEffectInputProperty UIElement.BitmapEffectProperty UIElement.CacheModeProperty UIElement.ClipProperty UIElement.ClipToBoundsProperty UIElement.DragEnterEvent UIElement.DragLeaveEvent UIElement.DragOverEvent UIElement.DropEvent UIElement.EffectProperty UIElement.FocusableProperty UIElement.GiveFeedbackEvent UIElement.GotFocusEvent UIElement.GotKeyboardFocusEvent UIElement.GotMouseCaptureEvent UIElement.GotStylusCaptureEvent UIElement.GotTouchCaptureEvent UIElement.IsEnabledProperty UIElement.IsFocusedProperty UIElement.IsHitTestVisibleProperty UIElement.IsKeyboardFocusedProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsManipulationEnabledProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusOverProperty UIElement.IsVisibleProperty UIElement.KeyDownEvent UIElement.KeyUpEvent UIElement.LostFocusEvent UIElement.LostKeyboardFocusEvent UIElement.LostMouseCaptureEvent UIElement.LostStylusCaptureEvent UIElement.LostTouchCaptureEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationStartingEvent UIElement.MouseDownEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.MouseLeftButtonDownEvent UIElement.MouseLeftButtonUpEvent UIElement.MouseMoveEvent UIElement.MouseRightButtonDownEvent UIElement.MouseRightButtonUpEvent UIElement.MouseUpEvent UIElement.MouseWheelEvent UIElement.OpacityMaskProperty UIElement.OpacityProperty UIElement.PreviewDragEnterEvent UIElement.PreviewDragLeaveEvent UIElement.PreviewDragOverEvent UIElement.PreviewDropEvent UIElement.PreviewGiveFeedbackEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.PreviewKeyDownEvent UIElement.PreviewKeyUpEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.PreviewMouseDownEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.PreviewMouseUpEvent UIElement.PreviewMouseWheelEvent UIElement.PreviewQueryContinueDragEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewStylusDownEvent UIElement.PreviewStylusInAirMoveEvent UIElement.PreviewStylusInRangeEvent UIElement.PreviewStylusMoveEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.PreviewStylusUpEvent UIElement.PreviewTextInputEvent UIElement.PreviewTouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.QueryContinueDragEvent UIElement.QueryCursorEvent UIElement.RenderTransformOriginProperty UIElement.RenderTransformProperty UIElement.SnapsToDevicePixelsProperty UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.StylusDownEvent UIElement.StylusEnterEvent UIElement.StylusInAirMoveEvent UIElement.StylusInRangeEvent UIElement.StylusLeaveEvent UIElement.StylusMoveEvent UIElement.StylusOutOfRangeEvent UIElement.StylusSystemGestureEvent UIElement.StylusUpEvent UIElement.TextInputEvent UIElement.TouchDownEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.TouchMoveEvent UIElement.TouchUpEvent UIElement.UidProperty UIElement.VisibilityProperty UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.Arrange(Rect) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.CaptureMouse() UIElement.CaptureStylus() UIElement.CaptureTouch(TouchDevice) UIElement.Focus() UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.HitTestCore(PointHitTestParameters) UIElement.InputHitTest(Point) UIElement.InvalidateArrange() UIElement.InvalidateMeasure() UIElement.InvalidateVisual() UIElement.Measure(Size) UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnDragEnter(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnRender(DrawingContext) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.RaiseEvent(RoutedEventArgs) UIElement.ReleaseAllTouchCaptures() UIElement.ReleaseMouseCapture() UIElement.ReleaseStylusCapture() UIElement.ReleaseTouchCapture(TouchDevice) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.TranslatePoint(Point, UIElement) UIElement.UpdateLayout() UIElement.AllowDrop UIElement.AreAnyTouchesCaptured UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesOver UIElement.BitmapEffect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Clip UIElement.ClipToBounds UIElement.CommandBindings UIElement.DesiredSize UIElement.Effect UIElement.Focusable UIElement.HasAnimatedProperties UIElement.HasEffectiveKeyboardFocus UIElement.InputBindings UIElement.IsArrangeValid UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsFocused UIElement.IsHitTestVisible UIElement.IsInputMethodEnabled UIElement.IsKeyboardFocused UIElement.IsKeyboardFocusWithin UIElement.IsManipulationEnabled UIElement.IsMeasureValid UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusOver UIElement.IsVisible UIElement.Opacity UIElement.OpacityMask UIElement.PersistId UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.SnapsToDevicePixels UIElement.StylusPlugIns UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesDirectlyOver UIElement.TouchesOver UIElement.Uid UIElement.Visibility UIElement.DragEnter UIElement.DragLeave UIElement.DragOver UIElement.Drop UIElement.FocusableChanged UIElement.GiveFeedback UIElement.GotFocus UIElement.GotKeyboardFocus UIElement.GotMouseCapture UIElement.GotStylusCapture UIElement.GotTouchCapture UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsKeyboardFocusedChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsMouseDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsVisibleChanged UIElement.KeyDown UIElement.KeyUp UIElement.LayoutUpdated UIElement.LostFocus UIElement.LostKeyboardFocus UIElement.LostMouseCapture UIElement.LostStylusCapture UIElement.LostTouchCapture UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationStarted UIElement.ManipulationStarting UIElement.MouseDown UIElement.MouseEnter UIElement.MouseLeave UIElement.MouseLeftButtonDown UIElement.MouseLeftButtonUp UIElement.MouseMove UIElement.MouseRightButtonDown UIElement.MouseRightButtonUp UIElement.MouseUp UIElement.MouseWheel UIElement.PreviewDragEnter UIElement.PreviewDragLeave UIElement.PreviewDragOver UIElement.PreviewDrop UIElement.PreviewGiveFeedback UIElement.PreviewGotKeyboardFocus UIElement.PreviewKeyDown UIElement.PreviewKeyUp UIElement.PreviewLostKeyboardFocus UIElement.PreviewMouseDown UIElement.PreviewMouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.PreviewMouseMove UIElement.PreviewMouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.PreviewMouseUp UIElement.PreviewMouseWheel UIElement.PreviewQueryContinueDrag UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewStylusDown UIElement.PreviewStylusInAirMove UIElement.PreviewStylusInRange UIElement.PreviewStylusMove UIElement.PreviewStylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.PreviewStylusUp UIElement.PreviewTextInput UIElement.PreviewTouchDown UIElement.PreviewTouchMove UIElement.PreviewTouchUp UIElement.QueryContinueDrag UIElement.QueryCursor UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.StylusDown UIElement.StylusEnter UIElement.StylusInAirMove UIElement.StylusInRange UIElement.StylusLeave UIElement.StylusMove UIElement.StylusOutOfRange UIElement.StylusSystemGesture UIElement.StylusUp UIElement.TextInput UIElement.TouchDown UIElement.TouchEnter UIElement.TouchLeave UIElement.TouchMove UIElement.TouchUp Visual.AddVisualChild(Visual) Visual.FindCommonVisualAncestor(DependencyObject) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.PointFromScreen(Point) Visual.PointToScreen(Point) Visual.RemoveVisualChild(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToAncestor(Visual) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualBitmapScalingMode Visual.VisualCacheMode Visual.VisualClearTypeHint Visual.VisualClip Visual.VisualEdgeMode Visual.VisualEffect Visual.VisualOffset Visual.VisualOpacity Visual.VisualOpacityMask Visual.VisualParent Visual.VisualScrollableAreaClip Visual.VisualTextHintingMode Visual.VisualTextRenderingMode Visual.VisualTransform Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetLocalValueEnumerator() DependencyObject.GetValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TipsNotificationControl() 构造函数，初始化 TipsNotificationControl 新实例 public TipsNotificationControl() Properties BackgroundColor 获取或设置背景颜色 public string BackgroundColor { get; set; } Property Value string IconColor 获取或设置图标颜色 public string IconColor { get; set; } Property Value string IconKind 获取或设置图标 public PackIconKind IconKind { get; set; } Property Value PackIconKind Message 获取或设置消息内容 public string Message { get; set; } Property Value string MessageColor 获取或设置信息内容颜色 public string MessageColor { get; set; } Property Value string Title 获取或设置标题 public string Title { get; set; } Property Value string TitleColor 获取或设置标题颜色 public string TitleColor { get; set; } Property Value string TitleVisibility 获取标题的可见性，根据 Title 是否为空决定 public Visibility TitleVisibility { get; } Property Value Visibility Methods Close() 关闭通知的动画 public void Close() InitializeComponent() InitializeComponent public void InitializeComponent() OnPropertyChanged(string) 触发属性更改通知 protected void OnPropertyChanged(string propertyName) Parameters propertyName string 更改的属性名称 Show() 显示通知的动画 public void Show() Events OnClick 交互的点击事件 public event Action? OnClick Event Type Action OnClose 通知关闭事件 public event Action? OnClose Event Type Action PropertyChanged 触发属性更改通知的事件 public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MAS.Controls.Notifications.ToastNotificationControl.html": {
    "href": "api/MAS.Controls.Notifications.ToastNotificationControl.html",
    "title": "Class ToastNotificationControl | DataMaster",
    "summary": "Class ToastNotificationControl Namespace MAS.Controls.Notifications Assembly MAS.Controls.dll ToastNotificationControl.xaml 的交互逻辑 public class ToastNotificationControl : UserControl, IAnimatable, ISupportInitialize, IFrameworkInputElement, IInputElement, IQueryAmbient, IAddChild, IComponentConnector Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl ToastNotificationControl Implements IAnimatable ISupportInitialize IFrameworkInputElement IInputElement IQueryAmbient IAddChild IComponentConnector Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.ContentStringFormatProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.HasContentProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentChanged(object, object) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.Content ContentControl.ContentStringFormat ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.HasContent ContentControl.LogicalChildren Control.BackgroundProperty Control.BorderBrushProperty Control.BorderThicknessProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.ForegroundProperty Control.HorizontalContentAlignmentProperty Control.IsTabStopProperty Control.MouseDoubleClickEvent Control.PaddingProperty Control.PreviewMouseDoubleClickEvent Control.TabIndexProperty Control.TemplateProperty Control.VerticalContentAlignmentProperty Control.ArrangeOverride(Size) Control.MeasureOverride(Size) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.Background Control.BorderBrush Control.BorderThickness Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.Foreground Control.HandlesScrolling Control.HorizontalContentAlignment Control.IsTabStop Control.Padding Control.TabIndex Control.Template Control.VerticalContentAlignment Control.MouseDoubleClick Control.PreviewMouseDoubleClick FrameworkElement.ActualHeightProperty FrameworkElement.ActualWidthProperty FrameworkElement.BindingGroupProperty FrameworkElement.ContextMenuClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuProperty FrameworkElement.CursorProperty FrameworkElement.DataContextProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.FlowDirectionProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.ForceCursorProperty FrameworkElement.HeightProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.InputScopeProperty FrameworkElement.LanguageProperty FrameworkElement.LayoutTransformProperty FrameworkElement.LoadedEvent FrameworkElement.MarginProperty FrameworkElement.MaxHeightProperty FrameworkElement.MaxWidthProperty FrameworkElement.MinHeightProperty FrameworkElement.MinWidthProperty FrameworkElement.NameProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.StyleProperty FrameworkElement.TagProperty FrameworkElement.ToolTipClosingEvent FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipProperty FrameworkElement.UnloadedEvent FrameworkElement.UseLayoutRoundingProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.WidthProperty FrameworkElement.AddLogicalChild(object) FrameworkElement.ApplyTemplate() FrameworkElement.ArrangeCore(Rect) FrameworkElement.BeginInit() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.EndInit() FrameworkElement.FindName(string) FrameworkElement.FindResource(object) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.GetLayoutClip(Size) FrameworkElement.GetTemplateChild(string) FrameworkElement.GetUIParentCore() FrameworkElement.GetVisualChild(int) FrameworkElement.MeasureCore(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.OnApplyTemplate() FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.RegisterName(string, object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.TryFindResource(object) FrameworkElement.UnregisterName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.ActualHeight FrameworkElement.ActualWidth FrameworkElement.BindingGroup FrameworkElement.ContextMenu FrameworkElement.Cursor FrameworkElement.DataContext FrameworkElement.DefaultStyleKey FrameworkElement.FlowDirection FrameworkElement.FocusVisualStyle FrameworkElement.ForceCursor FrameworkElement.Height FrameworkElement.HorizontalAlignment FrameworkElement.InheritanceBehavior FrameworkElement.InputScope FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.Language FrameworkElement.LayoutTransform FrameworkElement.Margin FrameworkElement.MaxHeight FrameworkElement.MaxWidth FrameworkElement.MinHeight FrameworkElement.MinWidth FrameworkElement.Name FrameworkElement.OverridesDefaultStyle FrameworkElement.Parent FrameworkElement.Resources FrameworkElement.Style FrameworkElement.Tag FrameworkElement.TemplatedParent FrameworkElement.ToolTip FrameworkElement.Triggers FrameworkElement.UseLayoutRounding FrameworkElement.VerticalAlignment FrameworkElement.VisualChildrenCount FrameworkElement.Width FrameworkElement.ContextMenuClosing FrameworkElement.ContextMenuOpening FrameworkElement.DataContextChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.SourceUpdated FrameworkElement.TargetUpdated FrameworkElement.ToolTipClosing FrameworkElement.ToolTipOpening FrameworkElement.Unloaded UIElement.AllowDropProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.BitmapEffectInputProperty UIElement.BitmapEffectProperty UIElement.CacheModeProperty UIElement.ClipProperty UIElement.ClipToBoundsProperty UIElement.DragEnterEvent UIElement.DragLeaveEvent UIElement.DragOverEvent UIElement.DropEvent UIElement.EffectProperty UIElement.FocusableProperty UIElement.GiveFeedbackEvent UIElement.GotFocusEvent UIElement.GotKeyboardFocusEvent UIElement.GotMouseCaptureEvent UIElement.GotStylusCaptureEvent UIElement.GotTouchCaptureEvent UIElement.IsEnabledProperty UIElement.IsFocusedProperty UIElement.IsHitTestVisibleProperty UIElement.IsKeyboardFocusedProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsManipulationEnabledProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusOverProperty UIElement.IsVisibleProperty UIElement.KeyDownEvent UIElement.KeyUpEvent UIElement.LostFocusEvent UIElement.LostKeyboardFocusEvent UIElement.LostMouseCaptureEvent UIElement.LostStylusCaptureEvent UIElement.LostTouchCaptureEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationStartingEvent UIElement.MouseDownEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.MouseLeftButtonDownEvent UIElement.MouseLeftButtonUpEvent UIElement.MouseMoveEvent UIElement.MouseRightButtonDownEvent UIElement.MouseRightButtonUpEvent UIElement.MouseUpEvent UIElement.MouseWheelEvent UIElement.OpacityMaskProperty UIElement.OpacityProperty UIElement.PreviewDragEnterEvent UIElement.PreviewDragLeaveEvent UIElement.PreviewDragOverEvent UIElement.PreviewDropEvent UIElement.PreviewGiveFeedbackEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.PreviewKeyDownEvent UIElement.PreviewKeyUpEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.PreviewMouseDownEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.PreviewMouseUpEvent UIElement.PreviewMouseWheelEvent UIElement.PreviewQueryContinueDragEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewStylusDownEvent UIElement.PreviewStylusInAirMoveEvent UIElement.PreviewStylusInRangeEvent UIElement.PreviewStylusMoveEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.PreviewStylusUpEvent UIElement.PreviewTextInputEvent UIElement.PreviewTouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.QueryContinueDragEvent UIElement.QueryCursorEvent UIElement.RenderTransformOriginProperty UIElement.RenderTransformProperty UIElement.SnapsToDevicePixelsProperty UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.StylusDownEvent UIElement.StylusEnterEvent UIElement.StylusInAirMoveEvent UIElement.StylusInRangeEvent UIElement.StylusLeaveEvent UIElement.StylusMoveEvent UIElement.StylusOutOfRangeEvent UIElement.StylusSystemGestureEvent UIElement.StylusUpEvent UIElement.TextInputEvent UIElement.TouchDownEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.TouchMoveEvent UIElement.TouchUpEvent UIElement.UidProperty UIElement.VisibilityProperty UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.Arrange(Rect) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.CaptureMouse() UIElement.CaptureStylus() UIElement.CaptureTouch(TouchDevice) UIElement.Focus() UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.HitTestCore(PointHitTestParameters) UIElement.InputHitTest(Point) UIElement.InvalidateArrange() UIElement.InvalidateMeasure() UIElement.InvalidateVisual() UIElement.Measure(Size) UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnDragEnter(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnRender(DrawingContext) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.RaiseEvent(RoutedEventArgs) UIElement.ReleaseAllTouchCaptures() UIElement.ReleaseMouseCapture() UIElement.ReleaseStylusCapture() UIElement.ReleaseTouchCapture(TouchDevice) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.TranslatePoint(Point, UIElement) UIElement.UpdateLayout() UIElement.AllowDrop UIElement.AreAnyTouchesCaptured UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesOver UIElement.BitmapEffect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Clip UIElement.ClipToBounds UIElement.CommandBindings UIElement.DesiredSize UIElement.Effect UIElement.Focusable UIElement.HasAnimatedProperties UIElement.HasEffectiveKeyboardFocus UIElement.InputBindings UIElement.IsArrangeValid UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsFocused UIElement.IsHitTestVisible UIElement.IsInputMethodEnabled UIElement.IsKeyboardFocused UIElement.IsKeyboardFocusWithin UIElement.IsManipulationEnabled UIElement.IsMeasureValid UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusOver UIElement.IsVisible UIElement.Opacity UIElement.OpacityMask UIElement.PersistId UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.SnapsToDevicePixels UIElement.StylusPlugIns UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesDirectlyOver UIElement.TouchesOver UIElement.Uid UIElement.Visibility UIElement.DragEnter UIElement.DragLeave UIElement.DragOver UIElement.Drop UIElement.FocusableChanged UIElement.GiveFeedback UIElement.GotFocus UIElement.GotKeyboardFocus UIElement.GotMouseCapture UIElement.GotStylusCapture UIElement.GotTouchCapture UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsKeyboardFocusedChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsMouseDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsVisibleChanged UIElement.KeyDown UIElement.KeyUp UIElement.LayoutUpdated UIElement.LostFocus UIElement.LostKeyboardFocus UIElement.LostMouseCapture UIElement.LostStylusCapture UIElement.LostTouchCapture UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationStarted UIElement.ManipulationStarting UIElement.MouseDown UIElement.MouseEnter UIElement.MouseLeave UIElement.MouseLeftButtonDown UIElement.MouseLeftButtonUp UIElement.MouseMove UIElement.MouseRightButtonDown UIElement.MouseRightButtonUp UIElement.MouseUp UIElement.MouseWheel UIElement.PreviewDragEnter UIElement.PreviewDragLeave UIElement.PreviewDragOver UIElement.PreviewDrop UIElement.PreviewGiveFeedback UIElement.PreviewGotKeyboardFocus UIElement.PreviewKeyDown UIElement.PreviewKeyUp UIElement.PreviewLostKeyboardFocus UIElement.PreviewMouseDown UIElement.PreviewMouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.PreviewMouseMove UIElement.PreviewMouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.PreviewMouseUp UIElement.PreviewMouseWheel UIElement.PreviewQueryContinueDrag UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewStylusDown UIElement.PreviewStylusInAirMove UIElement.PreviewStylusInRange UIElement.PreviewStylusMove UIElement.PreviewStylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.PreviewStylusUp UIElement.PreviewTextInput UIElement.PreviewTouchDown UIElement.PreviewTouchMove UIElement.PreviewTouchUp UIElement.QueryContinueDrag UIElement.QueryCursor UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.StylusDown UIElement.StylusEnter UIElement.StylusInAirMove UIElement.StylusInRange UIElement.StylusLeave UIElement.StylusMove UIElement.StylusOutOfRange UIElement.StylusSystemGesture UIElement.StylusUp UIElement.TextInput UIElement.TouchDown UIElement.TouchEnter UIElement.TouchLeave UIElement.TouchMove UIElement.TouchUp Visual.AddVisualChild(Visual) Visual.FindCommonVisualAncestor(DependencyObject) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.PointFromScreen(Point) Visual.PointToScreen(Point) Visual.RemoveVisualChild(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToAncestor(Visual) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualBitmapScalingMode Visual.VisualCacheMode Visual.VisualClearTypeHint Visual.VisualClip Visual.VisualEdgeMode Visual.VisualEffect Visual.VisualOffset Visual.VisualOpacity Visual.VisualOpacityMask Visual.VisualParent Visual.VisualScrollableAreaClip Visual.VisualTextHintingMode Visual.VisualTextRenderingMode Visual.VisualTransform Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetLocalValueEnumerator() DependencyObject.GetValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ToastNotificationControl() 构造函数，初始化 ToastNotificationControl 新实例 public ToastNotificationControl() Fields ToastProperty 标识Toast依赖属性 public static readonly DependencyProperty ToastProperty Field Value DependencyProperty Properties Toast 获取或设置通知控件显示的toast消息 public string Toast { get; set; } Property Value string 要显示为toast通知的消息 Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MAS.Controls.Notifications.html": {
    "href": "api/MAS.Controls.Notifications.html",
    "title": "Namespace MAS.Controls.Notifications | DataMaster",
    "summary": "Namespace MAS.Controls.Notifications Classes TipsNotificationControl TipsNotificationControl.xaml 的交互逻辑 ToastNotificationControl ToastNotificationControl.xaml 的交互逻辑"
  },
  "api/MAS.Controls.ServiceCollectionExtensions.html": {
    "href": "api/MAS.Controls.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.Controls Assembly MAS.Controls.dll 提供扩展方法，用于在 IServiceCollection 中注册与控件相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddLoadAnimationService(IServiceCollection) 在指定的 IServiceCollection 中注册加载动画服务 public static IServiceCollection AddLoadAnimationService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合 AddNotificationService(IServiceCollection) 在指定的 IServiceCollection 中注册与通知相关的服务 public static IServiceCollection AddNotificationService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.Controls.html": {
    "href": "api/MAS.Controls.html",
    "title": "Namespace MAS.Controls | DataMaster",
    "summary": "Namespace MAS.Controls Classes ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与控件相关的服务"
  },
  "api/MAS.DataExport.ExcelExporterHelper.html": {
    "href": "api/MAS.DataExport.ExcelExporterHelper.html",
    "title": "Class ExcelExporterHelper | DataMaster",
    "summary": "Class ExcelExporterHelper Namespace MAS.DataExport Assembly MAS.DataExport.dll Excel 表格文件导出工具类 public static class ExcelExporterHelper Inheritance object ExcelExporterHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppendRowToExcel(string, string, List<string>, int) 追加一整行数据到指定的工作表 public static void AppendRowToExcel(string filePath, string sheetName, List<string> values, int rowIndex) Parameters filePath string Excel文件路径 sheetName string 工作表名称 values List<string> 按顺序的单元格值列表 rowIndex int 要插入的行索引 CleanInvalidXmlChars(string) 清除输入字符串中的非法XML字符 public static string CleanInvalidXmlChars(string text) Parameters text string 包含潜在非法XML字符的输入字符串 Returns string 已移除所有非法XML字符的字符串 Remarks 通过筛选出有效的XML字符来确保字符串可以安全地用于XML文档 CreateEmptyExcel(string, string) 创建一个新的Excel文件并添加空白工作表 public static void CreateEmptyExcel(string filePath, string sheetName = \"Sheet1\") Parameters filePath string 文件路径 sheetName string 工作表名称 ExportItemToExcel<T>(T, string, string?) 导出单个数据对象到 Excel 文件 public static void ExportItemToExcel<T>(T item, string filePath, string? sheetName) Parameters item T 待导出的数据对象 filePath string 文件路径 sheetName string 工作表的名称 Type Parameters T 数据对象类型 ExportItemsToExcel<T>(IEnumerable<T>, string, string?) 导出数据对象集合到 Excel 文件 public static void ExportItemsToExcel<T>(IEnumerable<T> items, string filePath, string? sheetName) Parameters items IEnumerable<T> 待导出的数据对象集合 filePath string 文件路径 sheetName string 工作表的名称 Type Parameters T 数据对象类型 WriteValuesToExcel(string, string, Dictionary<string, string>, bool) 将指定的值写入到 Excel 文件中的指定位置，支持新建或追加写入 public static void WriteValuesToExcel(string filePath, string sheetName, Dictionary<string, string> cellValues, bool isAppend) Parameters filePath string Excel 文件的路径 sheetName string 工作表的名称 cellValues Dictionary<string, string> 要写入的单元格位置和对应的值，键为单元格引用（如\"A3\"），值为要写入的内容 isAppend bool 如果为 true，则在已有文件中追加写入；如果为 false，则新建文件"
  },
  "api/MAS.DataExport.IgnoreInExcelExportAttribute.html": {
    "href": "api/MAS.DataExport.IgnoreInExcelExportAttribute.html",
    "title": "Class IgnoreInExcelExportAttribute | DataMaster",
    "summary": "Class IgnoreInExcelExportAttribute Namespace MAS.DataExport Assembly MAS.DataExport.dll 自定义属性，用于标记在Excel导出中应忽略的属性和字段 [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class IgnoreInExcelExportAttribute : Attribute Inheritance object Attribute IgnoreInExcelExportAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MAS.DataExport.InstanceKeyHelper.html": {
    "href": "api/MAS.DataExport.InstanceKeyHelper.html",
    "title": "Class InstanceKeyHelper | DataMaster",
    "summary": "Class InstanceKeyHelper Namespace MAS.DataExport Assembly MAS.DataExport.dll 实例键帮助类 public class InstanceKeyHelper Inheritance object InstanceKeyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetKey(IDataExportConfig) 根据配置获取实例键 public static string GetKey(IDataExportConfig config) Parameters config IDataExportConfig 协议配置参数 Returns string 实例字符串键"
  },
  "api/MAS.DataExport.ServiceCollectionExtensions.html": {
    "href": "api/MAS.DataExport.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.DataExport Assembly MAS.DataExport.dll 提供扩展方法，用于在 IServiceCollection 中注册与数据库相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDataExportService(IServiceCollection) 在指定的 IServiceCollection 中注册与数据导出相关的服务 public static IServiceCollection AddDataExportService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.DataExport.html": {
    "href": "api/MAS.DataExport.html",
    "title": "Namespace MAS.DataExport | DataMaster",
    "summary": "Namespace MAS.DataExport Classes ExcelExporterHelper Excel 表格文件导出工具类 IgnoreInExcelExportAttribute 自定义属性，用于标记在Excel导出中应忽略的属性和字段 ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与数据库相关的服务"
  },
  "api/MAS.Database.DataAccess.EntityHelper.html": {
    "href": "api/MAS.Database.DataAccess.EntityHelper.html",
    "title": "Class EntityHelper | DataMaster",
    "summary": "Class EntityHelper Namespace MAS.Database.DataAccess Assembly MAS.Database.dll 实体辅助类，用于操作实体类的元数据 public static class EntityHelper Inheritance object EntityHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCompositeUniqueKeys<TEntity>() 获取实体的组合唯一键 public static IEnumerable<string[]> GetCompositeUniqueKeys<TEntity>() Returns IEnumerable<string[]> 组合唯一键列名数组 Type Parameters TEntity 实体类型 GetPrimaryKey<TEntity>() 获取实体的主键字段名 public static string GetPrimaryKey<TEntity>() Returns string 主键字段名 Type Parameters TEntity 实体类型 GetPropertiesExcluding<TEntity>(params string[]) 获取实体的所有字段（排除指定字段） public static IEnumerable<PropertyInfo> GetPropertiesExcluding<TEntity>(params string[] excludedFields) Parameters excludedFields string[] 需要排除的字段名 Returns IEnumerable<PropertyInfo> 剩余字段的集合 Type Parameters TEntity 实体类型 GetTableName<TEntity>() 获取实体类对应的数据库表名 public static string GetTableName<TEntity>() Returns string 实体类对应的数据库表名 Type Parameters TEntity 实体类型 GetUniqueKey<TEntity>() 获取实体的唯一键字段名 public static string GetUniqueKey<TEntity>() Returns string 唯一键字段名 Type Parameters TEntity 实体类型"
  },
  "api/MAS.Database.DataAccess.GenerateSqlHelper.html": {
    "href": "api/MAS.Database.DataAccess.GenerateSqlHelper.html",
    "title": "Class GenerateSqlHelper | DataMaster",
    "summary": "Class GenerateSqlHelper Namespace MAS.Database.DataAccess Assembly MAS.Database.dll 生成SQL语句帮助类 public static class GenerateSqlHelper Inheritance object GenerateSqlHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateCreateTableSql(Type) 根据实体类型生成 CREATE TABLE SQL 语句 public static string GenerateCreateTableSql(Type type) Parameters type Type 实体类型 Returns string 对应的 CREATE TABLE SQL 语句 GenerateCreateTableSqlForEntities(params Type[]) 为多个实体类型生成 CREATE TABLE IF NOT EXISTS SQL 语句 public static IEnumerable<string> GenerateCreateTableSqlForEntities(params Type[] entityTypes) Parameters entityTypes Type[] 实体类型数组 Returns IEnumerable<string> 包含所有 CREATE TABLE SQL 语句的集合 GenerateCreateTableSql<T>() 根据实体类型生成 CREATE TABLE IF NOT EXISTS SQL 语句 public static string GenerateCreateTableSql<T>() Returns string 对应的 CREATE TABLE SQL 语句 Type Parameters T 实体类型 GetDeleteStatement<T>(string) 为指定的实体生成动态的 SQL DELETE 语句 public static string GetDeleteStatement<T>(string conditionField) Parameters conditionField string 用于 WHERE 子句的字段名称 Returns string 根据条件字段生成的 SQL DELETE 语句 例如： DELETE FROM TableName WHERE ConditionField = @ConditionField; Type Parameters T 实体的类型 GetDeleteStatement<T>(string[]) 为指定的实体生成动态的 SQL DELETE 语句，基于多个条件字段（组合唯一键） public static string GetDeleteStatement<T>(string[] conditionFields) Parameters conditionFields string[] 用于 WHERE 子句的字段名称数组 Returns string 根据条件字段生成的 SQL DELETE 语句 例如： DELETE FROM TableName WHERE ConditionField1 = @ConditionField1 AND ConditionField2 = @ConditionField2; Type Parameters T 实体的类型 GetInsertOnDuplicateKeyUpdateStatement<TEntity>() 生成 MySQL 的 INSERT ... ON DUPLICATE KEY UPDATE 语句（支持所有唯一约束） public static string GetInsertOnDuplicateKeyUpdateStatement<TEntity>() where TEntity : class Returns string 生成的 SQL 语句 Type Parameters TEntity 实体类型 GetInsertOnDuplicateKeyUpdateStatement<TEntity>(string) 生成 MySQL 的 INSERT ... ON DUPLICATE KEY UPDATE 语句（基于单列唯一键） public static string GetInsertOnDuplicateKeyUpdateStatement<TEntity>(string uniqueKey) where TEntity : class Parameters uniqueKey string 唯一键字段名称 Returns string 生成的 SQL 语句 Type Parameters TEntity 实体类型 GetInsertStatement<T>(T, string, bool) 为指定的实体生成动态的SQL INSERT语句 public static string GetInsertStatement<T>(T item, string primaryKeyField, bool isPrimaryKeyAutoIncrement = true) Parameters item T 包含要插入数据的实体实例 primaryKeyField string 主键字段的名称 isPrimaryKeyAutoIncrement bool 指示主键字段是否由数据库自动递增 如果设置为 true，则主键字段将在INSERT语句中被排除 Returns string 根据提供的实体和主键配置生成的SQL INSERT语句。 例如： INSERT INTO TableName (Column1, Column2) VALUES (@Column1, @Column2); Type Parameters T 实体的类型。 GetSelectAllStatement<T>() 为指定的实体生成动态的 SQL SELECT 语句，检索所有记录 public static string GetSelectAllStatement<T>() Returns string 根据实体生成的 SQL SELECT 语句 例如： SELECT * FROM TableName; Type Parameters T 实体的类型 GetSelectByIdStatement<T>(string) 为指定的实体生成动态的 SQL SELECT 语句，通过主键筛选单个记录 public static string GetSelectByIdStatement<T>(string primaryKey) Parameters primaryKey string 用于 WHERE 子句的主键字段名称 Returns string 根据主键生成的 SQL SELECT 语句 例如： SELECT * FROM TableName WHERE PrimaryKey = @PrimaryKey; Type Parameters T 实体的类型 GetUpdateStatement<T>(T, string) 为指定的实体生成动态的 SQL UPDATE 语句 public static string GetUpdateStatement<T>(T item, string conditionField) Parameters item T 包含要更新数据的实体实例 conditionField string 用于 WHERE 子句的条件字段名称 Returns string 根据提供的实体和条件字段生成的 SQL UPDATE 语句 例如： UPDATE TableName SET Column1 = @Column1, Column2 = @Column2 WHERE ConditionField = @ConditionField; Type Parameters T 实体的类型 GetUpdateStatement<T>(T, string[]) 为指定的实体生成动态的 SQL UPDATE 语句，基于多个条件字段（组合唯一键） public static string GetUpdateStatement<T>(T item, string[] conditionFields) Parameters item T 包含要更新数据的实体实例 conditionFields string[] 用于 WHERE 子句的条件字段名称数组 Returns string 根据提供的实体和条件字段生成的 SQL UPDATE 语句 例如： UPDATE TableName SET Column1 = @Column1, Column2 = @Column2 WHERE ConditionField1 = @ConditionField1 AND ConditionField2 = @ConditionField2; Type Parameters T 实体的类型"
  },
  "api/MAS.Database.DataAccess.MetadataQueriesHelper.html": {
    "href": "api/MAS.Database.DataAccess.MetadataQueriesHelper.html",
    "title": "Class MetadataQueriesHelper | DataMaster",
    "summary": "Class MetadataQueriesHelper Namespace MAS.Database.DataAccess Assembly MAS.Database.dll 数据库元数据查询帮助类 public static class MetadataQueriesHelper Inheritance object MetadataQueriesHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GET_ALL_FUNCTIONS 获取所有函数的名称 public const string GET_ALL_FUNCTIONS = \"\\r\\n SELECT routine_name \\r\\n FROM information_schema.routines \\r\\n WHERE routine_schema = @DatabaseName \\r\\n AND routine_type = 'FUNCTION';\\r\\n \" Field Value string GET_ALL_STORED_PROCEDURES 获取所有存储过程的名称 public const string GET_ALL_STORED_PROCEDURES = \"\\r\\n SELECT routine_name \\r\\n FROM information_schema.routines \\r\\n WHERE routine_schema = @DatabaseName \\r\\n AND routine_type = 'PROCEDURE';\\r\\n \" Field Value string GET_ALL_TABLE_NAMES 获取所有表的名称 public const string GET_ALL_TABLE_NAMES = \"\\r\\n SELECT table_name \\r\\n FROM information_schema.tables \\r\\n WHERE table_schema = @DatabaseName AND table_type = 'BASE TABLE';\\r\\n \" Field Value string GET_ALL_VIEW_NAMES 获取所有视图的名称 public const string GET_ALL_VIEW_NAMES = \"\\r\\n SELECT table_name \\r\\n FROM information_schema.views \\r\\n WHERE table_schema = @DatabaseName;\\r\\n \" Field Value string"
  },
  "api/MAS.Database.DataAccess.RepositoryBase-1.html": {
    "href": "api/MAS.Database.DataAccess.RepositoryBase-1.html",
    "title": "Class RepositoryBase<TEntity> | DataMaster",
    "summary": "Class RepositoryBase<TEntity> Namespace MAS.Database.DataAccess Assembly MAS.Database.dll 通用仓库抽象类，提供基础的数据库操作 public abstract class RepositoryBase<TEntity> : IRepository<TEntity>, IRepositoryBase where TEntity : class, new() Type Parameters TEntity 实体类型 Inheritance object RepositoryBase<TEntity> Implements IRepository<TEntity> IRepositoryBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 主构造函数，初始化 RepositoryBase<TEntity> 新实例 Constructors RepositoryBase(IDbOperations) 辅助构造函数，初始化 RepositoryBase<TEntity> 新实例 protected RepositoryBase(IDbOperations dbOperations) Parameters dbOperations IDbOperations 数据库操作实例 RepositoryBase(IDbOperations, IEntityMapper<TEntity>) 通用仓库抽象类，提供基础的数据库操作 protected RepositoryBase(IDbOperations dbOperations, IEntityMapper<TEntity> mapper) Parameters dbOperations IDbOperations 数据库操作实例 mapper IEntityMapper<TEntity> 实体映射器实例 Remarks 主构造函数，初始化 RepositoryBase<TEntity> 新实例 Methods AddAsync(object) 异步添加一个新的实体对象 public virtual Task AddAsync(object entity) Parameters entity object 要添加的实体对象 Returns Task 异步操作的任务。 AddAsync(TEntity) 异步添加一个新的实体对象 public virtual Task AddAsync(TEntity entity) Parameters entity TEntity 要添加的实体对象 Returns Task 异步操作的任务 AddOrUpdateAsync(object) 异步添加或更新一个实体对象 如果对象已存在则执行更新操作，否则执行添加操作 public virtual Task AddOrUpdateAsync(object entity) Parameters entity object 要添加或更新的实体对象 Returns Task 异步操作的任务 AddOrUpdateAsync(TEntity) 异步添加一个新的实体对象，如果唯一键已存在，则执行更新操作 public virtual Task AddOrUpdateAsync(TEntity entity) Parameters entity TEntity 要添加或更新的实体对象 Returns Task 异步操作的任务 DeleteAsync(object) 异步删除一个实体对象 public virtual Task DeleteAsync(object entity) Parameters entity object 要删除的实体对象 Returns Task 异步操作的任务 DeleteAsync(TEntity) 异步删除一个已存在的实体对象 public virtual Task DeleteAsync(TEntity entity) Parameters entity TEntity 要删除的实体对象 Returns Task 异步操作的任务 GetAllAsync() 异步获取所有实体对象 public virtual Task<IEnumerable<TEntity>> GetAllAsync() Returns Task<IEnumerable<TEntity>> 表示异步操作的任务对象，任务结果为包含所有实体对象的集合 GetAllObjectAsync() 异步获取所有实体对象 public virtual Task<IEnumerable<object>> GetAllObjectAsync() Returns Task<IEnumerable<object>> 表示异步操作的任务对象，任务结果为包含所有实体对象的集合 GetByIdAsync(int) 异步根据ID异步获取一个实体对象 public virtual Task<TEntity?> GetByIdAsync(int id) Parameters id int 实体对象的唯一标识符 Returns Task<TEntity> 异步操作的任务对象，如果没有结果则返回默认值 GetByIdObjectAsync(int) 异步根据ID获取一个实体对象 public virtual Task<object?> GetByIdObjectAsync(int id) Parameters id int 实体对象的唯一标识符 Returns Task<object> 异步操作的任务对象，如果没有找到则返回 null GetByPropertyAsync(object) 根据实体对象的属性动态生成查询条件，获取匹配的实体对象 public virtual Task<object?> GetByPropertyAsync(object entity) Parameters entity object 包含查询条件的实体对象 Returns Task<object> 异步操作任务，匹配的实体对象，如果没有结果则返回 null GetByPropertyAsync(TEntity) 根据实体对象的非空属性动态生成查询条件，获取匹配的实体对象 public virtual Task<TEntity?> GetByPropertyAsync(TEntity entity) Parameters entity TEntity 包含查询条件的实体对象 Returns Task<TEntity> 匹配的实体对象，如果没有结果则返回 null GetTotalRecordsAsync() 异步获取表的总记录数 public virtual Task<long> GetTotalRecordsAsync() Returns Task<long> 异步操作任务，总记录数 GetTotalRecordsAsync(TableQueryParameters) 异步根据表名和查询参数获取总记录数 public virtual Task<long> GetTotalRecordsAsync(TableQueryParameters parameters) Parameters parameters TableQueryParameters Returns Task<long> 异步操作任务，总记录数 LoadTableDataAsync(TableQueryParameters) 异步加载表的数据 public virtual Task<List<TEntity>> LoadTableDataAsync(TableQueryParameters parameters) Parameters parameters TableQueryParameters 查询参数 Returns Task<List<TEntity>> 异步操作任务，数据列表 LoadTableDataObjectAsync(TableQueryParameters) 异步加载表数据 public virtual Task<List<object>> LoadTableDataObjectAsync(TableQueryParameters parameters) Parameters parameters TableQueryParameters 查询参数 Returns Task<List<object>> 异步操作任务，数据列表 UpdateAsync(TEntity) 异步更新一个已存在的实体对象 public virtual Task UpdateAsync(TEntity entity) Parameters entity TEntity 要更新的实体对象 Returns Task 异步操作的任务 UpdateObjectAsync(object) 异步更新一个已存在的实体对象 public virtual Task UpdateObjectAsync(object entity) Parameters entity object 要更新的实体对象 Returns Task 异步操作的任务"
  },
  "api/MAS.Database.DataAccess.html": {
    "href": "api/MAS.Database.DataAccess.html",
    "title": "Namespace MAS.Database.DataAccess | DataMaster",
    "summary": "Namespace MAS.Database.DataAccess Classes EntityHelper 实体辅助类，用于操作实体类的元数据 GenerateSqlHelper 生成SQL语句帮助类 MetadataQueriesHelper 数据库元数据查询帮助类 RepositoryBase<TEntity> 通用仓库抽象类，提供基础的数据库操作"
  },
  "api/MAS.Database.DataReaderExtensions.html": {
    "href": "api/MAS.Database.DataReaderExtensions.html",
    "title": "Class DataReaderExtensions | DataMaster",
    "summary": "Class DataReaderExtensions Namespace MAS.Database Assembly MAS.Database.dll IDataReader 扩展方法 public static class DataReaderExtensions Inheritance object DataReaderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasColumn(IDataReader, string) 检查 IDataReader 中是否包含指定的列 public static bool HasColumn(this IDataReader reader, string columnName) Parameters reader IDataReader 数据读取器 columnName string 列名 Returns bool 如果存在返回 true，否则返回 false"
  },
  "api/MAS.Database.DbCommandExtensions.html": {
    "href": "api/MAS.Database.DbCommandExtensions.html",
    "title": "Class DbCommandExtensions | DataMaster",
    "summary": "Class DbCommandExtensions Namespace MAS.Database Assembly MAS.Database.dll 扩展 IDbCommand 的参数添加方法 public static class DbCommandExtensions Inheritance object DbCommandExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddParameter(IDbCommand, string, object?) 为 IDbCommand 添加单个参数 public static void AddParameter(this IDbCommand command, string parameterName, object? value) Parameters command IDbCommand IDbCommand 实例 parameterName string 参数名称 value object 参数值 AddParameters(IDbCommand, IDictionary<string, object>) 为 IDbCommand 添加多个参数，使用字典 public static void AddParameters(this IDbCommand command, IDictionary<string, object> parameters) Parameters command IDbCommand IDbCommand 实例 parameters IDictionary<string, object> 参数键值对集合 AddParameters(IDbCommand, IEnumerable<(string Name, object Value)>) 为 IDbCommand 添加多个参数，使用元组集合 public static void AddParameters(this IDbCommand command, IEnumerable<(string Name, object Value)> parameters) Parameters command IDbCommand IDbCommand 实例 parameters IEnumerable<(string Name, object Value)> 参数元组集合 AddQueryParameters(IDbCommand, TableQueryParameters) 为 IDbCommand 添加查询参数 public static void AddQueryParameters(this IDbCommand command, TableQueryParameters parameters) Parameters command IDbCommand IDbCommand 实例 parameters TableQueryParameters 查询参数"
  },
  "api/MAS.Database.DbHelper.html": {
    "href": "api/MAS.Database.DbHelper.html",
    "title": "Class DbHelper | DataMaster",
    "summary": "Class DbHelper Namespace MAS.Database Assembly MAS.Database.dll 数据库帮助类 public static class DbHelper Inheritance object DbHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetParametersFromEntity<T>(T) 从实体对象生成参数字典 public static IDictionary<string, object> GetParametersFromEntity<T>(T entity) Parameters entity T 实体对象 Returns IDictionary<string, object> 参数字典 Type Parameters T 实体类型 Remarks 实体的属性名称需要完全与数据库参数名称一致 MapEntityFromReader<T>(IDataReader) 将 IDataReader 当前行的数据映射到指定类型的实体对象 public static T MapEntityFromReader<T>(IDataReader reader) where T : new() Parameters reader IDataReader 数据读取器 Returns T 映射后的实体对象 Type Parameters T 目标实体的类型"
  },
  "api/MAS.Database.InstanceKeyHelper.html": {
    "href": "api/MAS.Database.InstanceKeyHelper.html",
    "title": "Class InstanceKeyHelper | DataMaster",
    "summary": "Class InstanceKeyHelper Namespace MAS.Database Assembly MAS.Database.dll 实例键帮助类 public static class InstanceKeyHelper Inheritance object InstanceKeyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetKey(IDbConfig) 根据配置获取实例键 public static string GetKey(IDbConfig config) Parameters config IDbConfig 数据库配置参数 Returns string 指定的实例字符串键"
  },
  "api/MAS.Database.ServiceCollectionExtensions.html": {
    "href": "api/MAS.Database.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.Database Assembly MAS.Database.dll 提供扩展方法，用于在 IServiceCollection 中注册与数据库相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDataAccess(IServiceCollection) 在指定的 IServiceCollection 中注册与数据访问相关的服务 public static IServiceCollection AddDataAccess(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合 AddDatabaseService(IServiceCollection) 在指定的 IServiceCollection 中注册与数据库相关的服务 public static IServiceCollection AddDatabaseService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.Database.html": {
    "href": "api/MAS.Database.html",
    "title": "Namespace MAS.Database | DataMaster",
    "summary": "Namespace MAS.Database Classes DataReaderExtensions IDataReader 扩展方法 DbCommandExtensions 扩展 IDbCommand 的参数添加方法 DbHelper 数据库帮助类 ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与数据库相关的服务"
  },
  "api/MAS.Effects.ParticleEffect.html": {
    "href": "api/MAS.Effects.ParticleEffect.html",
    "title": "Class ParticleEffect | DataMaster",
    "summary": "Class ParticleEffect Namespace MAS.Effects Assembly MAS.Effects.dll 粒子动画效果 public class ParticleEffect Inheritance object ParticleEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParticleEffect(Canvas) 粒子动画效果 public ParticleEffect(Canvas canvas) Parameters canvas Canvas 用来显示效果的画布 Methods Clear() 清空粒子和连接线 public void Clear() HasValidState() 粒子状态是否有效 public bool HasValidState() Returns bool 表示是否有效 Pause() 暂停粒子动画 public void Pause() SpawnParticles() 产生粒子 public void SpawnParticles() Start(string) 启动粒子动画 public void Start(string theme) Parameters theme string 主题名称（\"Dark\" 或 \"Light\"）"
  },
  "api/MAS.Effects.RandomMessageEffect.html": {
    "href": "api/MAS.Effects.RandomMessageEffect.html",
    "title": "Class RandomMessageEffect | DataMaster",
    "summary": "Class RandomMessageEffect Namespace MAS.Effects Assembly MAS.Effects.dll 动画的随机消息的鼠标单击效果 public class RandomMessageEffect Inheritance object RandomMessageEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RandomMessageEffect(Canvas) 动画的随机消息的鼠标单击效果 public RandomMessageEffect(Canvas canvas) Parameters canvas Canvas 用来显示效果的画布 Methods ActivateEffect(object, MouseButtonEventArgs) 处理 PreProcessInput 事件 public void ActivateEffect(object sender, MouseButtonEventArgs e) Parameters sender object e MouseButtonEventArgs ActivateEffect(object, PreProcessInputEventArgs) 处理 PreProcessInput 事件 public void ActivateEffect(object sender, PreProcessInputEventArgs e) Parameters sender object e PreProcessInputEventArgs"
  },
  "api/MAS.Effects.SnowflakeEffect.html": {
    "href": "api/MAS.Effects.SnowflakeEffect.html",
    "title": "Class SnowflakeEffect | DataMaster",
    "summary": "Class SnowflakeEffect Namespace MAS.Effects Assembly MAS.Effects.dll 下雪特效，雪花会被鼠标吹走 public class SnowflakeEffect Inheritance object SnowflakeEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SnowflakeEffect(Canvas, int) 构造函数，初始化 SnowflakeEffect 新实例 public SnowflakeEffect(Canvas canvas, int flakeCount = 188) Parameters canvas Canvas 特效应用的画布 flakeCount int 雪花数量 Methods Start() 开始显示雪花特效 public void Start() Stop() 停止显示雪花特效，并清理资源 public void Stop()"
  },
  "api/MAS.Effects.html": {
    "href": "api/MAS.Effects.html",
    "title": "Namespace MAS.Effects | DataMaster",
    "summary": "Namespace MAS.Effects Classes ParticleEffect 粒子动画效果 RandomMessageEffect 动画的随机消息的鼠标单击效果 SnowflakeEffect 下雪特效，雪花会被鼠标吹走"
  },
  "api/MAS.EventAggregator.ServiceCollectionExtensions.html": {
    "href": "api/MAS.EventAggregator.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.EventAggregator Assembly MAS.EventAggregator.dll 提供扩展方法，用于在 IServiceCollection 中注册事件聚合器相关服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddEventAggregatorService(IServiceCollection) 在指定的 IServiceCollection 中注册与事件聚合器相关的服务 public static IServiceCollection AddEventAggregatorService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.EventAggregator.html": {
    "href": "api/MAS.EventAggregator.html",
    "title": "Namespace MAS.EventAggregator | DataMaster",
    "summary": "Namespace MAS.EventAggregator Classes ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册事件聚合器相关服务"
  },
  "api/MAS.FileSystem.FileHelper.html": {
    "href": "api/MAS.FileSystem.FileHelper.html",
    "title": "Class FileHelper | DataMaster",
    "summary": "Class FileHelper Namespace MAS.FileSystem Assembly MAS.FileSystem.dll 文件操作工具帮助类 public static class FileHelper Inheritance object FileHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CalculateDirectorySize(string, bool) 计算指定目录的总大小，可以选择是否包括子目录 public static long CalculateDirectorySize(string directoryPath, bool isIncludeSubDirs = true) Parameters directoryPath string 要计算大小的目录路径 isIncludeSubDirs bool 是否包括子目录中的文件，默认为 true Returns long 目录及其子目录（如果包括）中所有文件的总字节数 CopyFile(string, string, bool) 复制文件从源路径到目标路径 public static void CopyFile(string sourceFilePath, string destinationFilePath, bool isOverwrite = false) Parameters sourceFilePath string 源文件路径，指定要复制的文件的位置 destinationFilePath string 目标文件路径，指定复制文件的新位置 isOverwrite bool 指定是否覆盖目标位置的同名文件。如果设为 true，则覆盖同名文件；如果设为 false，则在目标位置已有同名文件时抛出异常 CreateFileIfNotExists(string) 创建文件，如果文件已存在则不创建 public static void CreateFileIfNotExists(string filePath) Parameters filePath string 要创建的文件路径 DeleteFile(string) 删除指定路径的文件 public static void DeleteFile(string filePath) Parameters filePath string 要删除的文件路径 DeleteFolder(string) 删除指定的文件夹及其所有内容 public static void DeleteFolder(string folderPath) Parameters folderPath string 要删除文件夹的路径 DeserializeObjectFromFileAsync<T>(FileStream, JsonSerializerSettings?) 异步从指定的文件流反序列化 JSON 字符串为对象 public static Task<T> DeserializeObjectFromFileAsync<T>(FileStream fileStream, JsonSerializerSettings? settings = null) Parameters fileStream FileStream 包含 JSON 字符串的 FileStream settings JsonSerializerSettings 格式化设置 Returns Task<T> 反序列化的对象 Type Parameters T 反序列化对象的类型 Exceptions InvalidOperationException 如果 fileStream 不支持读取或反序列化失败 DeserializeObjectFromFileAsync<T>(string, JsonSerializerSettings?) 异步从指定的文件路径反序列化 JSON 字符串为对象 public static Task<T> DeserializeObjectFromFileAsync<T>(string filePath, JsonSerializerSettings? settings = null) Parameters filePath string 包含JSON字符串的文件路径 settings JsonSerializerSettings 格式化设置 Returns Task<T> 反序列化的对象 Type Parameters T 反序列化对象的类型 Exceptions ArgumentNullException 如果 filePath 为空字符或不存在则抛出此异常 InvalidOperationException DeserializeObjectFromFile<T>(string, JsonSerializerSettings?) 从指定的文件路径反序列化 JSON 字符串为对象 public static T DeserializeObjectFromFile<T>(string filePath, JsonSerializerSettings? settings = null) Parameters filePath string 包含JSON字符串的文件路径 settings JsonSerializerSettings 格式化设置 Returns T 反序列化的对象 Type Parameters T 反序列化对象的类型 Exceptions ArgumentNullException 如果 filePath 为空字符或不存在则抛出此异常 EnsureDirectoryExists(string) 确保文件的目录存在，如果不存在则创建 public static void EnsureDirectoryExists(string filePath) Parameters filePath string 文件路径 FileExists(string) 检查文件是否存在 public static bool FileExists(string filePath) Parameters filePath string 要检查的文件路径 Returns bool 如果存在返回true，否则false FindFilesByExtension(string, string) 在指定目录及其所有子目录中查找具有特定扩展名的文件 public static string[] FindFilesByExtension(string directoryPath, string extension) Parameters directoryPath string 要搜索的目录路径。这是一个完整的文件系统路径 extension string 要查找的文件扩展名。例如，\".txt\" （不区分大小写）表示查找所有文本文件 Returns string[] 一个包含找到的所有具有指定扩展名的文件的完整路径的字符串数组 FormatSize(long) 将文件大小从字节转换为更易读的单位 public static string FormatSize(long bytes) Parameters bytes long 文件大小，以字节为单位 Returns string 转换后的文件大小，以 B, KB, MB, GB 或 TB 为单位，取决于大小 GetAllDirectories(string) 获取指定目录下的所有文件夹 public static List<DirectoryInfo> GetAllDirectories(string directoryPath) Parameters directoryPath string 要搜索的目录路径 Returns List<DirectoryInfo> 包含目录信息的DirectoryInfo列表 GetAllFiles(string) 获取指定目录下的所有文件 public static List<FileInfo> GetAllFiles(string directoryPath) Parameters directoryPath string 要搜索的目录路径 Returns List<FileInfo> 包含文件信息的FileInfo列表 GetDirectoryName(string) 获取指定路径的目录名 public static string GetDirectoryName(string path) Parameters path string 文件或目录的路径 Returns string 路径的目录部分。如果路径不包含目录信息，则返回 null Exceptions ArgumentException 当路径为空、仅包含空白或格式不正确时抛出 GetDirectorySize(string) 计算指定目录中文件的总大小 public static long GetDirectorySize(string folderPath) Parameters folderPath string 要测量的目录路径 Returns long 如果目录存在，返回目录中所有文件的总大小（以字节为单位）；如果目录不存在，则返回0 GetFileAttributes(string) 获取指定文件的属性，如只读、隐藏、系统文件等 public static FileAttributes GetFileAttributes(string filePath) Parameters filePath string 要获取属性的文件路径 Returns FileAttributes 表示文件属性的 FileAttributes 枚举 GetFileExtension(string) 获取文件扩展名 public static string GetFileExtension(string filePath) Parameters filePath string 要获取的文件路径 Returns string 文件的扩展名称 GetFileInfo(string) 获取指定文件的 FileInfo 对象 public static FileInfo GetFileInfo(string filePath) Parameters filePath string 文件的完整路径 Returns FileInfo 返回指定文件的 FileInfo 实例 GetFileName(string?) 获取指定路径字符串的文件名和扩展名 public static string? GetFileName(string? filePath) Parameters filePath string 文件路径 Returns string path中最后一个分隔符后面的字符, 如果路径为空，则为Null GetFileNameWithoutExtension(string) 获取不带扩展名的文件名 public static string GetFileNameWithoutExtension(string fileName) Parameters fileName string 包含扩展名的文件名 Returns string 不带扩展名的文件名 GetFileSize(string) 计算指定文件的大小 public static long GetFileSize(string filePath) Parameters filePath string 文件的完整路径 Returns long 如果文件存在，返回文件的大小（以字节为单位）；如果文件不存在，返回0 GetLastWriteTime(string) 获取文件的修改时间 public static DateTime GetLastWriteTime(string filePath) Parameters filePath string 要获取的文件路径 Returns DateTime 文件的最后修改DateTime类型时间 GetLatestUpdateTime() 获取当前项目或应用程序目录下所有文件中最后修改时间最新的时间 public static string GetLatestUpdateTime() Returns string 字符串形式的最后更新日期 IsDllExists(string) 检查指定的 DLL 是否存在 public static bool IsDllExists(string dllName) Parameters dllName string DLL 文件名 Returns bool 存在返回 true，否则返回 false ListDirectoryContents(string) 列出指定目录下的所有文件和文件夹 public static string[] ListDirectoryContents(string directoryPath) Parameters directoryPath string 要列出内容的目录路径 Returns string[] 一个字符串数组，包含目录下所有文件和文件夹的名称（包括路径） MoveFile(string, string) 将文件从源路径移动到目标路径 public static void MoveFile(string sourceFilePath, string destinationFilePath) Parameters sourceFilePath string 源文件路径，指定要移动的文件的当前位置 destinationFilePath string 目标文件路径，指定移动文件的新位置 OpenContainingFolder(string) 打开文件所在的目录并选中该文件（如果路径是文件） 如果路径是目录，则直接打开该目录 public static void OpenContainingFolder(string path) Parameters path string 要打开目录的文件或文件夹路径 OpenFileDirectory(string) 打开指定文件所在的目录 public static void OpenFileDirectory(string path) Parameters path string 要打开的文件路径 OpenFolder(string) 使用默认程序打开指定的文件或文件夹 public static void OpenFolder(string path) Parameters path string 要打开的文件或文件夹路径 ReadFileToStream(string) 读取文件到内存流 public static MemoryStream ReadFileToStream(string filePath) Parameters filePath string 要读取的文件路径 Returns MemoryStream 包含文件内容的内存流 ReadTextFile(string, Encoding?) 读取指定路径的文件内容 public static string ReadTextFile(string filePath, Encoding? encoding = null) Parameters filePath string 文件的完整路径 encoding Encoding 文件的编码方式, 默认为UTF-8 Returns string 文件的文本内容 RenameFile(string, string) 重命名文件 public static void RenameFile(string oldFilePath, string newFilePath) Parameters oldFilePath string 旧的文件路径 newFilePath string 要重命名的新文件路径 Exceptions FileNotFoundException 当文件不存在时抛出 SaveConfigurationToFile(object, string) 将给定的配置对象保存到 JSON 文件中 public static void SaveConfigurationToFile(object configuration, string configPath = \"appsettings.json\") Parameters configuration object 要保存的配置对象 configPath string 配置文件的路径 Exceptions ArgumentNullException 如果 configPath 为空字符则抛出此异常 SaveConfigurationToFileAsync(object, string) 异步将给定的配置对象保存到 JSON 文件中 public static Task SaveConfigurationToFileAsync(object configuration, string configPath = \"appsettings.json\") Parameters configuration object 要保存的配置对象 configPath string 配置文件的路径 Returns Task Exceptions ArgumentNullException 如果 configPath 为空字符则抛出此异常 SaveContentToFile(string, string, bool) 保存内容到指定的文件路径，支持追加模式 public static void SaveContentToFile(string filePath, string content, bool isAppend = false) Parameters filePath string 文件路径 content string 要保存的内容 isAppend bool 是否追加内容 SaveExcelFileDialog(string) 创建并配置一个保存 Excel 文件对话框 public static SaveFileDialog SaveExcelFileDialog(string filename) Parameters filename string 保存的文件名 Returns SaveFileDialog 保存文件对话框 SaveImageStreamToFile(MemoryStream, string) 保存图片数据从内存流到文件 public static void SaveImageStreamToFile(MemoryStream imageStream, string filePath) Parameters imageStream MemoryStream 包含图像数据的内存流 filePath string 图像文件保存路径 SaveJsonExcelFileDialog(string) 创建并配置一个保存 JSON 及 Excel 文件对话框 public static SaveFileDialog SaveJsonExcelFileDialog(string filename) Parameters filename string 保存的文件名 Returns SaveFileDialog 配置好的 SaveFileDialog 保存文件对话框 SelectExportFile(string) 选择文件导出路径 public static string? SelectExportFile(string fileTypes) Parameters fileTypes string 支持的文件类型，格式如：\"JSON files (.json)|.json|Excel files (.xlsx)|.xlsx\" Returns string 保存的文件路径，如果未保存则返回null SelectNewFilePath() 选择新建文件路径对话框，并创建一个空文件 public static string? SelectNewFilePath() Returns string 选中的文件路径，如果用户取消则返回null SelectOpenDrawFile() 选择打开 draw 文件文件 public static string? SelectOpenDrawFile() Returns string 选中的 draw 文件完整路径，未选中返回null SelectOpenFile() 选择打开任意文件 public static string? SelectOpenFile() Returns string 选中的文件路径，如果未选择文件则返回null SelectOpenFolder() 选择打开文件夹路径 public static string? SelectOpenFolder() Returns string 选中的文件夹路径，如果未选择文件夹则返回null SelectOpenImageFile() 选择打开图像文件路径 public static string? SelectOpenImageFile() Returns string 选中文件的完整路径，如果未选择文件则返回 null SelectOpenJsonFile() 选择打开的 JSON 文件路径 public static string? SelectOpenJsonFile() Returns string 选中的文件路径，如果未选择文件则返回null SelectOpenMasProjFile() 选择打开 masproj 文件 public static string? SelectOpenMasProjFile() Returns string 选中的 masproj 文件完整路径，未选中返回null SelectOpenModelFile() 选择打开模型文件路径 public static string? SelectOpenModelFile() Returns string 选中的模型文件完整路径，未选中返回null SelectOpenWordFile(string?) 选择打开 Word 文件 public static string? SelectOpenWordFile(string? initialDirectory = null) Parameters initialDirectory string 初始文件夹路径，如果为 null 或空则使用默认路径 Returns string 选中的 Word 文件完整路径，未选中返回 null SelectSaveDrawPath() 选择 draw 文件 保存路径 public static string? SelectSaveDrawPath() Returns string 选中的文件路径，如果用户取消则返回null SelectSaveFilePath(string) 选择保存文件路径 public static string? SelectSaveFilePath(string defaultFileName) Parameters defaultFileName string 默认文件名 Returns string 选中的文件路径，如果未选择则返回null SelectSaveFolderPath() 选择保存文件夹路径 public static string? SelectSaveFolderPath() Returns string 选中的文件夹路径，如果未选择则返回null SelectSaveImagePath() 选择保存图像文件路径 public static string? SelectSaveImagePath() Returns string 选中的文件路径，如果未选择则返回null SelectSaveMasProjPath() 选择 masproj 文件 保存路径 public static string? SelectSaveMasProjPath() Returns string 选中的文件路径，如果用户取消则返回null SelectSaveWordFilePath(string) 选择保存 Word 文件 public static string? SelectSaveWordFilePath(string defaultFileName) Parameters defaultFileName string 默认的文件名 Returns string 选中的文件夹路径，如果未选择则返回null SerializeObjectSaveToFile(object, string, JsonSerializerSettings?) 将对象序列化为JSON字符串并保存到指定的文件路径 public static void SerializeObjectSaveToFile(object objectToSerialize, string filePath, JsonSerializerSettings? settings = null) Parameters objectToSerialize object 要序列化的对象 filePath string 保存JSON字符串的文件路径 settings JsonSerializerSettings 格式化设置 Exceptions ArgumentNullException 如果 configPath 为空字符则抛出此异常 SerializeObjectSaveToFileAsync(object, FileStream, JsonSerializerSettings?) 异步将对象序列化为JSON字符串并写入到指定的FileStream public static Task SerializeObjectSaveToFileAsync(object objectToSerialize, FileStream fileStream, JsonSerializerSettings? settings = null) Parameters objectToSerialize object 要序列化的对象 fileStream FileStream 目标FileStream，用于写入JSON字符串 settings JsonSerializerSettings JSON序列化设置 Returns Task Exceptions InvalidOperationException 如果 fileStream 不支持写入则抛出此异常 SerializeObjectSaveToFileAsync(object, string, JsonSerializerSettings?) 异步将对象序列化为JSON字符串并保存到指定的文件路径 public static Task SerializeObjectSaveToFileAsync(object objectToSerialize, string filePath, JsonSerializerSettings? settings = null) Parameters objectToSerialize object 要序列化的对象 filePath string 保存JSON字符串的文件路径 settings JsonSerializerSettings 格式化设置 Returns Task Exceptions ArgumentNullException 如果 configPath 为空字符则抛出此异常 SetFileAttributes(string, FileAttributes) 设置指定文件的属性，如将文件标记为只读或隐藏 public static void SetFileAttributes(string filePath, FileAttributes attributes) Parameters filePath string 要设置属性的文件路径 attributes FileAttributes 要设置的文件属性，如 FileAttributes.ReadOnly"
  },
  "api/MAS.FileSystem.IFileSavingService.html": {
    "href": "api/MAS.FileSystem.IFileSavingService.html",
    "title": "Interface IFileSavingService | DataMaster",
    "summary": "Interface IFileSavingService Namespace MAS.FileSystem Assembly MAS.FileSystem.dll 文件保存服务接口 public interface IFileSavingService Methods SaveFileAsync(string, string, short) 异步保存文件 Task<bool> SaveFileAsync(string filePath, string fileName, short maxCount) Parameters filePath string 要保存的文件路径 fileName string 文件名称 maxCount short 该路径下保留文件的最大数量 Returns Task<bool> 异步操作的任务结果，保存成功返回true，否则false Remarks 保留指定的文件数量，超出指定范围将删除较早的文件，确保不超过指定的 maxCount 个文件 SaveImageAsync(string, ImageSource, short) 异步保存图像 Task<bool> SaveImageAsync(string filePath, ImageSource image, short maxCount) Parameters filePath string 要保存的文件路径 image ImageSource 图像 maxCount short 该路径下保留文件的最大数量 Returns Task<bool> 异步操作的任务结果，保存成功返回true，否则false Remarks 保留指定的文件数量，超出指定范围将删除较早的文件，确保不超过指定的 maxCount 个文件 SaveImageAsync(string, BitmapSource, short) 异步保存图像 Task<bool> SaveImageAsync(string filePath, BitmapSource image, short maxCount) Parameters filePath string 要保存的文件路径 image BitmapSource 图像 maxCount short 该路径下保留文件的最大数量 Returns Task<bool> 异步操作的任务结果，保存成功返回true，否则false Remarks 保留指定的文件数量，超出指定范围将删除较早的文件，确保不超过指定的 maxCount 个文件 SaveImageAsync(string, WriteableBitmap, short) 异步保存图像 Task<bool> SaveImageAsync(string filePath, WriteableBitmap image, short maxCount) Parameters filePath string 要保存的文件路径 image WriteableBitmap 图像 maxCount short 该路径下保留文件的最大数量 Returns Task<bool> 异步操作的任务结果，保存成功返回true，否则false Remarks 保留指定的文件数量，超出指定范围将删除较早的文件，确保不超过指定的 maxCount 个文件"
  },
  "api/MAS.FileSystem.html": {
    "href": "api/MAS.FileSystem.html",
    "title": "Namespace MAS.FileSystem | DataMaster",
    "summary": "Namespace MAS.FileSystem Classes FileHelper 文件操作工具帮助类 Interfaces IFileSavingService 文件保存服务接口"
  },
  "api/MAS.Monaco.BaseMessage.html": {
    "href": "api/MAS.Monaco.BaseMessage.html",
    "title": "Class BaseMessage | DataMaster",
    "summary": "Class BaseMessage Namespace MAS.Monaco Assembly MAS.Monaco.dll 基础消息类 public class BaseMessage Inheritance object BaseMessage Derived CompileStatusMessage EditorStatusMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type 消息类型 public string? Type { get; set; } Property Value string"
  },
  "api/MAS.Monaco.CompileStatusMessage.html": {
    "href": "api/MAS.Monaco.CompileStatusMessage.html",
    "title": "Class CompileStatusMessage | DataMaster",
    "summary": "Class CompileStatusMessage Namespace MAS.Monaco Assembly MAS.Monaco.dll 获取编译状态消息 public class CompileStatusMessage : BaseMessage Inheritance object BaseMessage CompileStatusMessage Inherited Members BaseMessage.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration 获取或设置编译操作的耗时（毫秒） public int Duration { get; set; } Property Value int ErrorMessage 获取或设置编译失败时的错误信息 public string? ErrorMessage { get; set; } Property Value string IsSuccess 获取或设置编译是否成功 public bool IsSuccess { get; set; } Property Value bool"
  },
  "api/MAS.Monaco.EditorStatusMessage.html": {
    "href": "api/MAS.Monaco.EditorStatusMessage.html",
    "title": "Class EditorStatusMessage | DataMaster",
    "summary": "Class EditorStatusMessage Namespace MAS.Monaco Assembly MAS.Monaco.dll 编辑器状态消息 public class EditorStatusMessage : BaseMessage Inheritance object BaseMessage EditorStatusMessage Inherited Members BaseMessage.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IsDirty 获取或设置编辑状态 public bool IsDirty Field Value bool Properties Characters 获取或设置编辑器中的字符数 public int Characters { get; set; } Property Value int Column 获取或设置当前列号 public int Column { get; set; } Property Value int Language 获取或设置当前编辑器语言 public string Language { get; set; } Property Value string Line 获取或设置当前行号 public int Line { get; set; } Property Value int"
  },
  "api/MAS.Monaco.IMonacoService.html": {
    "href": "api/MAS.Monaco.IMonacoService.html",
    "title": "Interface IMonacoService | DataMaster",
    "summary": "Interface IMonacoService Namespace MAS.Monaco Assembly MAS.Monaco.dll Monaco Editor 交互的服务接口 public interface IMonacoService : IDisposable Inherited Members IDisposable.Dispose() Methods GetContentAsync() 异步获取 Monaco Editor 当前的内容 Task<string> GetContentAsync() Returns Task<string> 任务对象，表示异步操作，返回编辑器当前内容的字符串 GetSupportedLanguages() 获取所有支持的语言 IEnumerable<string> GetSupportedLanguages() Returns IEnumerable<string> 语言的列表 Initialize(CoreWebView2) 初始化 MonacoService void Initialize(CoreWebView2 webView) Parameters webView CoreWebView2 CoreWebView2 实例，用于在 Monaco Editor 中执行 JavaScript 脚本和加载内容 InitializeAsync(CoreWebView2, string) 异步初始化 MonacoService Task InitializeAsync(CoreWebView2 webView, string filePath) Parameters webView CoreWebView2 CoreWebView2 实例，用于在 Monaco Editor 中执行 JavaScript 脚本和加载内容 filePath string 指定要加载到编辑器中的内容的文存放的件路径 Returns Task LoadCodeAsync(string, string) 异步加载代码内容到 Monaco Editor Task LoadCodeAsync(string content, string language = \"csharp\") Parameters content string 要加载的代码内容 language string 编程语言标识符 Returns Task 任务对象，表示异步操作 LoadFileAsync(FileStream, string) 异步从文件流加载内容到 Monaco Editor Task LoadFileAsync(FileStream fileStream, string language) Parameters fileStream FileStream 文件流 language string 语言类型（例如 \"json\"） Returns Task 任务对象，表示异步操作 LoadFileAsync(string) 异步加载文件到 Monaco Editor Task LoadFileAsync(string filePath) Parameters filePath string 要加载的文件路径 Returns Task 任务对象，表示异步操作 MarkEditorAsSavedAsync() 异步标记编辑器内容为已保存 Task MarkEditorAsSavedAsync() Returns Task 任务对象，表示异步操作 SetEditorThemeAsync(string) 异步设置 Monaco Editor 的主题 Task SetEditorThemeAsync(string theme) Parameters theme string 主题名称 Returns Task 任务对象，表示异步操作 Remarks 支持的主题名称： \"vs\", \"vs-dark\", \"hc-black\" SetEditorThemeByAppThemeAsync(string) 异步根据应用程序的主题异步选择并设置 Monaco Editor 的合适主题 Task SetEditorThemeByAppThemeAsync(string appTheme) Parameters appTheme string 应用程序的主题 Returns Task 任务对象，表示异步操作 Remarks 当应用程序主题为 \"Light\" 时，设置编辑器主题为 \"vs\"； 当应用程序主题为 \"Dark\" 时，设置编辑器主题为 \"vs-dark\"； 默认使用 \"vs\" SetLanguageAsync(string) 异步设置 Monaco Editor 的编程语言 Task SetLanguageAsync(string language) Parameters language string 编程语言，用于设置语法高亮和编辑器的格式化规则 Returns Task 任务对象，表示异步操作 Events CompileStatusChanged 执行、编译状态变化事件 event EventHandler<CompileStatusMessage> CompileStatusChanged Event Type EventHandler<CompileStatusMessage> EditorStatusChanged 编辑器状态变化事件 event EventHandler<EditorStatusMessage> EditorStatusChanged Event Type EventHandler<EditorStatusMessage>"
  },
  "api/MAS.Monaco.ServiceCollectionExtensions.html": {
    "href": "api/MAS.Monaco.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.Monaco Assembly MAS.Monaco.dll 提供扩展方法，用于在 IServiceCollection 中注册与 Monaco Editor 相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMonacoService(IServiceCollection) 在指定的 IServiceCollection 中注册与 Monaco Editor 相关的服务 public static IServiceCollection AddMonacoService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.Monaco.html": {
    "href": "api/MAS.Monaco.html",
    "title": "Namespace MAS.Monaco | DataMaster",
    "summary": "Namespace MAS.Monaco Classes BaseMessage 基础消息类 CompileStatusMessage 获取编译状态消息 EditorStatusMessage 编辑器状态消息 ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与 Monaco Editor 相关的服务 Interfaces IMonacoService Monaco Editor 交互的服务接口"
  },
  "api/MAS.PrismaTalk.App.html": {
    "href": "api/MAS.PrismaTalk.App.html",
    "title": "Class App | DataMaster",
    "summary": "Class App Namespace MAS.PrismaTalk Assembly MAS.PrismaTalk.dll Interaction logic for App.xaml public class App : Application, IQueryAmbient Inheritance object DispatcherObject Application App Implements IQueryAmbient Inherited Members Application.FindResource(object) Application.GetContentStream(Uri) Application.GetCookie(Uri) Application.GetRemoteStream(Uri) Application.GetResourceStream(Uri) Application.LoadComponent(object, Uri) Application.LoadComponent(Uri) Application.OnActivated(EventArgs) Application.OnDeactivated(EventArgs) Application.OnExit(ExitEventArgs) Application.OnFragmentNavigation(FragmentNavigationEventArgs) Application.OnLoadCompleted(NavigationEventArgs) Application.OnNavigated(NavigationEventArgs) Application.OnNavigating(NavigatingCancelEventArgs) Application.OnNavigationFailed(NavigationFailedEventArgs) Application.OnNavigationProgress(NavigationProgressEventArgs) Application.OnNavigationStopped(NavigationEventArgs) Application.OnSessionEnding(SessionEndingCancelEventArgs) Application.Run() Application.Run(Window) Application.SetCookie(Uri, string) Application.Shutdown() Application.Shutdown(int) Application.TryFindResource(object) Application.Current Application.MainWindow Application.Properties Application.ResourceAssembly Application.Resources Application.ShutdownMode Application.StartupUri Application.Windows Application.Activated Application.Deactivated Application.DispatcherUnhandledException Application.Exit Application.FragmentNavigation Application.LoadCompleted Application.Navigated Application.Navigating Application.NavigationFailed Application.NavigationProgress Application.NavigationStopped Application.SessionEnding Application.Startup DispatcherObject.Dispatcher object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors App() 程序主要入口 public App() Properties AppConfig 获取应用程序配置对象 public static SettingsConfig AppConfig { get; } Property Value SettingsConfig Methods GetRequiredService<T>() 获取已注册的服务 public static T? GetRequiredService<T>() where T : class Returns T 服务的实例或 null Type Parameters T 要获取的服务类型 InitializeComponent() InitializeComponent public void InitializeComponent() Main() Application Entry Point. [STAThread] public static void Main() OnStartup(StartupEventArgs) Raises the Startup event. protected override void OnStartup(StartupEventArgs e) Parameters e StartupEventArgs A StartupEventArgs that contains the event data."
  },
  "api/MAS.PrismaTalk.Interfaces.IPrismaTalkClient.html": {
    "href": "api/MAS.PrismaTalk.Interfaces.IPrismaTalkClient.html",
    "title": "Interface IPrismaTalkClient | DataMaster",
    "summary": "Interface IPrismaTalkClient Namespace MAS.PrismaTalk.Interfaces Assembly MAS.PrismaTalk.dll 棱镜对话客户端接口 public interface IPrismaTalkClient : IWebViewService, IDisposable Inherited Members IWebViewService.IsInitialized IWebViewService.MessageReceived IWebViewService.Initialize(CoreWebView2) IWebViewService.ExecuteScriptAsync(string) IWebViewService.PostMessageAsync(object) IDisposable.Dispose() Methods CaptureLongScreenshotAsync() 异步通知前端捕获当前会话的长截图 Task CaptureLongScreenshotAsync() Returns Task CheckServiceAvailabilityAsync(CancellationToken) 异步检查服务是否可用。该方法在发送消息前调用，用于确保后续对话能够正常进行 Task<bool> CheckServiceAvailabilityAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 取消令牌 Returns Task<bool> 异步操作任务，返回服务是否可用 Exceptions OperationCanceledException ClearConversationAsync() 异步通知前端清空对话内容，表示新一轮对话开始 Task ClearConversationAsync() Returns Task DisplayUserMessageAsync(string) 异步通知前端显示用户消息 Task DisplayUserMessageAsync(string content) Parameters content string 消息内容 Returns Task EndAssistantStreamAsync(string) 异步通知前端结束流式助手消息 Task EndAssistantStreamAsync(string streamId) Parameters streamId string 流式消息的唯一标识符 Returns Task SendMessageAsync(IEnumerable<ChatMessage>, Action<StreamingChunk>, CancellationToken) 异步发送消息并通过回调接收流式响应 Task SendMessageAsync(IEnumerable<ChatMessage> messages, Action<StreamingChunk> onResponseChunk, CancellationToken cancellationToken = default) Parameters messages IEnumerable<ChatMessage> 信息数据模型列表，包含历史上下文 onResponseChunk Action<StreamingChunk> 接收响应的回调，每次接收到一部分数据时调用 cancellationToken CancellationToken 取消令牌 Returns Task 异步操作任务，文本完成的流式响应数据 Exceptions OperationCanceledException TimeoutException HttpRequestException JsonException SendMessageAsync(IEnumerable<ChatMessage>, CancellationToken) 异步发送消息并通过异步枚举逐步接收流式响应 IAsyncEnumerable<StreamingChunk> SendMessageAsync(IEnumerable<ChatMessage> messages, CancellationToken cancellationToken = default) Parameters messages IEnumerable<ChatMessage> 信息数据模型列表，包含历史上下文 cancellationToken CancellationToken 取消令牌 Returns IAsyncEnumerable<StreamingChunk> 异步枚举，逐步返回响应的每一部分数据 Exceptions OperationCanceledException TimeoutException HttpRequestException JsonException ShowToastMessageAsync(string, InfoLevel) 异步通知前端显示 Toast 提示消息 Task ShowToastMessageAsync(string content, InfoLevel level) Parameters content string 要显示的消息内容 level InfoLevel 消息级别 Returns Task 表示异步操作的任务 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 StartAssistantStreamAsync(string) 异步通知前端开始流式助手消息 Task StartAssistantStreamAsync(string streamId) Parameters streamId string 流式消息的唯一标识符 Returns Task UpdateAssistantStreamAsync(string, string) 异步通知前端更新流式助手消息 Task UpdateAssistantStreamAsync(string streamId, string chunk) Parameters streamId string 流式消息的唯一标识符 chunk string 新增内容片段 Returns Task"
  },
  "api/MAS.PrismaTalk.Interfaces.IWindowsProviderService.html": {
    "href": "api/MAS.PrismaTalk.Interfaces.IWindowsProviderService.html",
    "title": "Interface IWindowsProviderService | DataMaster",
    "summary": "Interface IWindowsProviderService Namespace MAS.PrismaTalk.Interfaces Assembly MAS.PrismaTalk.dll 窗口提供服务的接口，用于通过依赖注入管理和显示窗口 public interface IWindowsProviderService Methods Create<T>() 创建并返回指定类型的窗口实例 T Create<T>() where T : class Returns T 窗口实例 Type Parameters T 要创建的窗口类型，必须是Window的派生类 Exceptions InvalidOperationException 如果T不是窗口的派生类，则抛出此异常 ShowDialog(Type) 显示指定类型的模态窗口 bool? ShowDialog(Type windowType) Parameters windowType Type 要显示的窗口类型，必须是Window的派生类 Returns bool? 一个可空的布尔值，指示对话框的关闭结果 Exceptions InvalidOperationException 如果windowType不是窗口的派生类或服务未注册相应类型的窗口，则抛出此异常 ShowDialog(Window) 显示已创建的窗口实例 bool? ShowDialog(Window windowInstance) Parameters windowInstance Window 已创建的窗口实例 Returns bool? 一个可空的布尔值，指示对话框的关闭结果 ShowDialog<T>() 显示指定类型的模态窗口 bool? ShowDialog<T>() where T : class Returns bool? 一个可空的布尔值，指示对话框的关闭结果 Type Parameters T 要显示的窗口类型，必须是Window的派生类 Exceptions InvalidOperationException 如果T不是窗口的派生类或服务未注册相应类型的窗口，则抛出此异常 ShowDialog<T>(object) 显示指定类型的模态窗口，并传递一个参数实例 bool? ShowDialog<T>(object parameter) where T : class Parameters parameter object 要传递给窗口的参数实例 Returns bool? 一个可空的布尔值，指示对话框的关闭结果 Type Parameters T 要显示的窗口类型，必须是 Window 的派生类 Exceptions InvalidOperationException 如果 T 不是 Window 的派生类或服务未注册相应类型的窗口，则抛出此异常 ShowSingle<T>() 显示指定类型的窗口，并且该类型窗口只能存在一个 void ShowSingle<T>() where T : class Type Parameters T 要显示的窗口类型，必须是Window的派生类 Exceptions InvalidOperationException 如果T不是窗口的派生类或服务未注册相应类型的窗口，则抛出此异常 Show<T>() 显示指定类型的窗口 void Show<T>() where T : class Type Parameters T 要显示的窗口类型，必须是Window的派生类 Exceptions InvalidOperationException 如果T不是窗口的派生类或服务未注册相应类型的窗口，则抛出此异常 Show<T>(object) 显示指定类型的窗口，并传递一个参数实例 void Show<T>(object parameter) where T : class Parameters parameter object 要传递给窗口的参数实例 Type Parameters T 要显示的窗口类型，必须是 Window 的派生类 Exceptions InvalidOperationException 如果 T 不是 Window 的派生类或服务未注册相应类型的窗口，则抛出此异常"
  },
  "api/MAS.PrismaTalk.Interfaces.html": {
    "href": "api/MAS.PrismaTalk.Interfaces.html",
    "title": "Namespace MAS.PrismaTalk.Interfaces | DataMaster",
    "summary": "Namespace MAS.PrismaTalk.Interfaces Interfaces IPrismaTalkClient 棱镜对话客户端接口 IWindowsProviderService 窗口提供服务的接口，用于通过依赖注入管理和显示窗口"
  },
  "api/MAS.PrismaTalk.MasAsyncRelayCommand.html": {
    "href": "api/MAS.PrismaTalk.MasAsyncRelayCommand.html",
    "title": "Class MasAsyncRelayCommand | DataMaster",
    "summary": "Class MasAsyncRelayCommand Namespace MAS.PrismaTalk Assembly MAS.PrismaTalk.dll 异步执行操作的命令 允许将异步操作绑定到UI命令上 public class MasAsyncRelayCommand : ICommand Inheritance object MasAsyncRelayCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 创建 MasAsyncRelayCommand> 的新实例 Constructors MasAsyncRelayCommand(Func<object?, Task>, Predicate<object?>?, bool) 异步执行操作的命令 允许将异步操作绑定到UI命令上 public MasAsyncRelayCommand(Func<object?, Task> executeAsync, Predicate<object?>? canExecute = null, bool isDebounce = true) Parameters executeAsync Func<object, Task> 定义要异步执行的委托任务。此参数不能为 null canExecute Predicate<object> 定义命令是否可执行的逻辑。它接收一个可选的参数，当此参数为 null 时，命令总是可执行的 isDebounce bool 表示是否启用防抖 Remarks 创建 MasAsyncRelayCommand> 的新实例 Methods CanExecute(object?) Defines the method that determines whether the command can execute in its current state. public bool CanExecute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. Returns bool true if this command can be executed; otherwise, false. Execute(object?) Defines the method to be called when the command is invoked. public void Execute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. RaiseCanExecuteChanged() 触发 CanExecuteChanged 事件，通知命令的可执行状态可能已更改 public void RaiseCanExecuteChanged() Events CanExecuteChanged Occurs when changes occur that affect whether or not the command should execute. public event EventHandler? CanExecuteChanged Event Type EventHandler"
  },
  "api/MAS.PrismaTalk.MasRelayCommand.html": {
    "href": "api/MAS.PrismaTalk.MasRelayCommand.html",
    "title": "Class MasRelayCommand | DataMaster",
    "summary": "Class MasRelayCommand Namespace MAS.PrismaTalk Assembly MAS.PrismaTalk.dll 根据特定逻辑执行和判断是否可以执行的命令 public class MasRelayCommand : ICommand Inheritance object MasRelayCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 创建 MasRelayCommand 的新实例 Constructors MasRelayCommand(Action<object?>, Predicate<object?>?, bool) 根据特定逻辑执行和判断是否可以执行的命令 public MasRelayCommand(Action<object?> execute, Predicate<object?>? canExecute = null, bool isDebounce = true) Parameters execute Action<object> 执行命令的委托，此参数不可为 null canExecute Predicate<object> 定义命令是否可执行的逻辑。它接收一个可选的参数，当此参数为 null 时，命令总是可执行的 isDebounce bool 表示是否启用防抖 Remarks 创建 MasRelayCommand 的新实例 Methods CanExecute(object?) Defines the method that determines whether the command can execute in its current state. public bool CanExecute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. Returns bool true if this command can be executed; otherwise, false. Execute(object?) Defines the method to be called when the command is invoked. public void Execute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. RaiseCanExecuteChanged() 触发 CanExecuteChanged 事件, 通知命令的可执行状态可能已更改 public void RaiseCanExecuteChanged() Events CanExecuteChanged Occurs when changes occur that affect whether or not the command should execute. public event EventHandler? CanExecuteChanged Event Type EventHandler"
  },
  "api/MAS.PrismaTalk.Models.ApplicationInformation.html": {
    "href": "api/MAS.PrismaTalk.Models.ApplicationInformation.html",
    "title": "Struct ApplicationInformation | DataMaster",
    "summary": "Struct ApplicationInformation Namespace MAS.PrismaTalk.Models Assembly MAS.PrismaTalk.dll 应用程序信息 public struct ApplicationInformation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AssemblyVersionInformation 程序集版本信息 public static readonly string AssemblyVersionInformation Field Value string CONFIG_FILE_PATH 配置文件路径 public const string CONFIG_FILE_PATH = \"appsettings.json\" Field Value string COPYRIGHT_INFORMATION 版权信息 public const string COPYRIGHT_INFORMATION = \"Copyright (c) 2024-2025 MAS(厦门威光). All rights reserved.\" Field Value string CreatedAt 项目创建时间 public static readonly string CreatedAt Field Value string FileVersionInformation 文件版本信息 public static readonly string FileVersionInformation Field Value string LastUpdated 最后更新时间 public static readonly string LastUpdated Field Value string PRISMATALK_PATH PrismaTalk 模组路径 public const string PRISMATALK_PATH = \"Modules/MAS.PrismaTalk/\" Field Value string SERIALIZE_PATH 应用程序数据序列化文件存放路径 public const string SERIALIZE_PATH = \"Resources/Serialize/\" Field Value string THE_TITLE_BAR 标题栏 public const string THE_TITLE_BAR = \"PrismaTalk\" Field Value string VersionInformation 版本信息 public static readonly string VersionInformation Field Value string"
  },
  "api/MAS.PrismaTalk.Models.Configurations.LogConfig.html": {
    "href": "api/MAS.PrismaTalk.Models.Configurations.LogConfig.html",
    "title": "Class LogConfig | DataMaster",
    "summary": "Class LogConfig Namespace MAS.PrismaTalk.Models.Configurations Assembly MAS.PrismaTalk.dll 日志配置的属性定义 public class LogConfig : ConfigurationsBase, ILogConfig Inheritance object ConfigurationsBase LogConfig Implements ILogConfig Inherited Members ConfigurationsBase.PropertyChanged ConfigurationsBase.OnPropertyChanged(string, object, object, string) ConfigurationsBase.SetField<T>(ref T, T, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ArchiveCount 日志文件归档的数量 public int ArchiveCount { get; set; } Property Value int CurrentLogLevel 当前日志级别 public string CurrentLogLevel { get; set; } Property Value string CurrentNumberingScheme 日志编号方案 public string CurrentNumberingScheme { get; set; } Property Value string LogFileSize 单个日志文件的最大大小 public long LogFileSize { get; set; } Property Value long LogLevelOptions 日志级别选项 [JsonIgnore] public ObservableCollection<string> LogLevelOptions { get; set; } Property Value ObservableCollection<string> NumberingSchemeOptions 日志编号方案选项 [JsonIgnore] public ObservableCollection<string> NumberingSchemeOptions { get; set; } Property Value ObservableCollection<string>"
  },
  "api/MAS.PrismaTalk.Models.Configurations.PrismaTalkConfig.html": {
    "href": "api/MAS.PrismaTalk.Models.Configurations.PrismaTalkConfig.html",
    "title": "Class PrismaTalkConfig | DataMaster",
    "summary": "Class PrismaTalkConfig Namespace MAS.PrismaTalk.Models.Configurations Assembly MAS.PrismaTalk.dll 棱镜对话参数配置 public class PrismaTalkConfig : ConfigurationsBase, IPrismaTalkConfig Inheritance object ConfigurationsBase PrismaTalkConfig Implements IPrismaTalkConfig Inherited Members ConfigurationsBase.PropertyChanged ConfigurationsBase.OnPropertyChanged(string, object, object, string) ConfigurationsBase.SetField<T>(ref T, T, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultModel 获取或设置默认 AI 模型 public string DefaultModel { get; set; } Property Value string EnableProxy 获取或设置是否启用 HTTP/HTTPS 代理（默认 false） public bool EnableProxy { get; set; } Property Value bool EncryptedApiKey 获取或设置加密后的密钥 public byte[] EncryptedApiKey { get; } Property Value byte[] EncryptedProxyPassword 获取或设置加密后的代理密码 public byte[] EncryptedProxyPassword { get; } Property Value byte[] MaxTokens 获取或设置生成文本的最大令牌数 public int MaxTokens { get; set; } Property Value int Password 获取或设置用于 UI 绑定的密码 public string Password { get; set; } Property Value string ProxyPassword 获取或设置用于 UI 绑定的代理密码 public string ProxyPassword { get; set; } Property Value string ProxyUrl 获取或设置代理服务器地址 public string? ProxyUrl { get; set; } Property Value string Remarks 示例：\"http://proxy.example.com:8080\" ProxyUsername 获取或设置代理用户名（可选） public string? ProxyUsername { get; set; } Property Value string ServiceUrl 获取或设置服务的基础 URL public string ServiceUrl { get; set; } Property Value string Temperature 获取或设置生成文本的温度，控制随机性 public double Temperature { get; set; } Property Value double Timeout 获取或设置请求超时时间 public TimeSpan Timeout { get; set; } Property Value TimeSpan Methods GetApiKey() 获取 API 密钥或认证令牌 public string GetApiKey() Returns string API 密钥或认证令牌 GetProxyPassword() 获取代理密码（可选） public string GetProxyPassword() Returns string 代理密码"
  },
  "api/MAS.PrismaTalk.Models.Configurations.SettingsConfig.html": {
    "href": "api/MAS.PrismaTalk.Models.Configurations.SettingsConfig.html",
    "title": "Class SettingsConfig | DataMaster",
    "summary": "Class SettingsConfig Namespace MAS.PrismaTalk.Models.Configurations Assembly MAS.PrismaTalk.dll 包含所有与应用程序设定相关的配置信息 public class SettingsConfig : ConfigurationsBase Inheritance object ConfigurationsBase SettingsConfig Inherited Members ConfigurationsBase.PropertyChanged ConfigurationsBase.OnPropertyChanged(string, object, object, string) ConfigurationsBase.SetField<T>(ref T, T, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppTheme 获取或设置主题 public string AppTheme { get; set; } Property Value string IsDeveloperMode 获取或设置是否在开发者模式 public bool IsDeveloperMode { get; set; } Property Value bool Log 获取日志配置信息 public LogConfig Log { get; } Property Value LogConfig PrismaTalk 获取棱镜对话配置 public PrismaTalkConfig PrismaTalk { get; } Property Value PrismaTalkConfig Events OnAppTheme 主题更改事件 public event EventHandler? OnAppTheme Event Type EventHandler OnDeveloperModeChanged 开发者模式改变事件 public event EventHandler? OnDeveloperModeChanged Event Type EventHandler"
  },
  "api/MAS.PrismaTalk.Models.Configurations.html": {
    "href": "api/MAS.PrismaTalk.Models.Configurations.html",
    "title": "Namespace MAS.PrismaTalk.Models.Configurations | DataMaster",
    "summary": "Namespace MAS.PrismaTalk.Models.Configurations Classes LogConfig 日志配置的属性定义 PrismaTalkConfig 棱镜对话参数配置 SettingsConfig 包含所有与应用程序设定相关的配置信息"
  },
  "api/MAS.PrismaTalk.Models.MessageModel.html": {
    "href": "api/MAS.PrismaTalk.Models.MessageModel.html",
    "title": "Class MessageModel | DataMaster",
    "summary": "Class MessageModel Namespace MAS.PrismaTalk.Models Assembly MAS.PrismaTalk.dll 表示一条对话消息的数据模型 public class MessageModel : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase MessageModel Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar public string Avatar { get; set; } Property Value string Content public string Content { get; set; } Property Value string IsUserMessage public bool IsUserMessage { get; set; } Property Value bool Nickname public string Nickname { get; set; } Property Value string"
  },
  "api/MAS.PrismaTalk.Models.html": {
    "href": "api/MAS.PrismaTalk.Models.html",
    "title": "Namespace MAS.PrismaTalk.Models | DataMaster",
    "summary": "Namespace MAS.PrismaTalk.Models Classes MessageModel 表示一条对话消息的数据模型 Structs ApplicationInformation 应用程序信息"
  },
  "api/MAS.PrismaTalk.ServiceCollectionExtensions.html": {
    "href": "api/MAS.PrismaTalk.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.PrismaTalk Assembly MAS.PrismaTalk.dll 提供扩展方法，用于在 IServiceCollection 中注册与 AI 相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddPrismaTalkService(IServiceCollection) 在指定的 IServiceCollection 中注册与AI相关的服务 public static IServiceCollection AddPrismaTalkService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.PrismaTalk.ViewModels.Windows.MainViewModel.html": {
    "href": "api/MAS.PrismaTalk.ViewModels.Windows.MainViewModel.html",
    "title": "Class MainViewModel | DataMaster",
    "summary": "Class MainViewModel Namespace MAS.PrismaTalk.ViewModels.Windows Assembly MAS.PrismaTalk.dll 主窗口视图模型 public class MainViewModel : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging, IDisposable Inheritance object ObservableObject ViewModelBase MainViewModel Implements INotifyPropertyChanged INotifyPropertyChanging IDisposable Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainViewModel(IPrismaTalkClient, ILicensingService) 构造函数，初始化 MainViewModel 新实例 public MainViewModel(IPrismaTalkClient prismaTalkClient, ILicensingService licensingService) Parameters prismaTalkClient IPrismaTalkClient licensingService ILicensingService Properties CancelSendMessageCommand 取消发送消息命令 public MasRelayCommand CancelSendMessageCommand { get; } Property Value MasRelayCommand CloseWindowCommand 获取关闭窗口命令 public MasRelayCommand CloseWindowCommand { get; } Property Value MasRelayCommand CurrentCharacterCount public int CurrentCharacterCount { get; set; } Property Value int CurrentContextToken public int CurrentContextToken { get; set; } Property Value int CurrentInput public string CurrentInput { get; set; } Property Value string IsSending public bool IsSending { get; set; } Property Value bool IsShowHiddenContent public bool IsShowHiddenContent { get; set; } Property Value bool Messages public ObservableCollection<MessageModel> Messages { get; set; } Property Value ObservableCollection<MessageModel> NewConversationCommand 获取新对话命令 public MasAsyncRelayCommand NewConversationCommand { get; } Property Value MasAsyncRelayCommand SendMessageCommand 获取发送消息命令 public MasAsyncRelayCommand SendMessageCommand { get; } Property Value MasAsyncRelayCommand ShareCommand 获取分析命令 public MasAsyncRelayCommand ShareCommand { get; } Property Value MasAsyncRelayCommand Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) 释放资源 protected virtual void Dispose(bool disposing) Parameters disposing bool ExecuteNewConversationAsync(object?) 异步执行新对话 public Task ExecuteNewConversationAsync(object? parameter) Parameters parameter object Returns Task ExecuteSendMessageAsync(object?) 异步执行发送信息 public Task ExecuteSendMessageAsync(object? parameter) Parameters parameter object Returns Task InitializeTalkClient() 初始化对话客户端 public void InitializeTalkClient() InitializeWebView2Service(CoreWebView2) 初始化 WebView2 服务 public void InitializeWebView2Service(CoreWebView2 webView) Parameters webView CoreWebView2 CoreWebView2 实例 ValidateLicense() 验证许可 public void ValidateLicense() Events InitializationCompleted 初始化对话客户端事件 public event Action<bool>? InitializationCompleted Event Type Action<bool> RequestClose 请求关闭窗口事件 public event Action? RequestClose Event Type Action"
  },
  "api/MAS.PrismaTalk.ViewModels.Windows.ShutdownTasksViewModel.html": {
    "href": "api/MAS.PrismaTalk.ViewModels.Windows.ShutdownTasksViewModel.html",
    "title": "Class ShutdownTasksViewModel | DataMaster",
    "summary": "Class ShutdownTasksViewModel Namespace MAS.PrismaTalk.ViewModels.Windows Assembly MAS.PrismaTalk.dll 关闭任务窗口视图模型 public class ShutdownTasksViewModel : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase ShutdownTasksViewModel Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShutdownTasksViewModel(IServiceProvider) 构造函数，初始化 ShutdownTasksViewModel 新实例 public ShutdownTasksViewModel(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Properties CurrentTask public string CurrentTask { get; set; } Property Value string Events RequestClose 请求关闭窗口事件 public event Action<bool?>? RequestClose Event Type Action<bool?>"
  },
  "api/MAS.PrismaTalk.ViewModels.Windows.html": {
    "href": "api/MAS.PrismaTalk.ViewModels.Windows.html",
    "title": "Namespace MAS.PrismaTalk.ViewModels.Windows | DataMaster",
    "summary": "Namespace MAS.PrismaTalk.ViewModels.Windows Classes MainViewModel 主窗口视图模型 ShutdownTasksViewModel 关闭任务窗口视图模型"
  },
  "api/MAS.PrismaTalk.Views.Windows.MainWindow.html": {
    "href": "api/MAS.PrismaTalk.Views.Windows.MainWindow.html",
    "title": "Class MainWindow | DataMaster",
    "summary": "Class MainWindow Namespace MAS.PrismaTalk.Views.Windows Assembly MAS.PrismaTalk.dll Interaction logic for MainWindow.xaml public class MainWindow : Window, IAnimatable, ISupportInitialize, IFrameworkInputElement, IInputElement, IQueryAmbient, IAddChild, IComponentConnector Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl Window MainWindow Implements IAnimatable ISupportInitialize IFrameworkInputElement IInputElement IQueryAmbient IAddChild IComponentConnector Inherited Members Window.AllowsTransparencyProperty Window.DpiChangedEvent Window.IconProperty Window.IsActiveProperty Window.LeftProperty Window.ResizeModeProperty Window.ShowActivatedProperty Window.ShowInTaskbarProperty Window.SizeToContentProperty Window.TaskbarItemInfoProperty Window.TitleProperty Window.TopmostProperty Window.TopProperty Window.WindowStateProperty Window.WindowStyleProperty Window.Activate() Window.ArrangeOverride(Size) Window.Close() Window.DragMove() Window.GetWindow(DependencyObject) Window.Hide() Window.MeasureOverride(Size) Window.OnActivated(EventArgs) Window.OnClosed(EventArgs) Window.OnClosing(CancelEventArgs) Window.OnContentChanged(object, object) Window.OnContentRendered(EventArgs) Window.OnCreateAutomationPeer() Window.OnDeactivated(EventArgs) Window.OnDpiChanged(DpiScale, DpiScale) Window.OnLocationChanged(EventArgs) Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) Window.OnSourceInitialized(EventArgs) Window.OnStateChanged(EventArgs) Window.OnVisualChildrenChanged(DependencyObject, DependencyObject) Window.OnVisualParentChanged(DependencyObject) Window.Show() Window.ShowDialog() Window.AllowsTransparency Window.DialogResult Window.Icon Window.IsActive Window.Left Window.LogicalChildren Window.OwnedWindows Window.Owner Window.ResizeMode Window.RestoreBounds Window.ShowActivated Window.ShowInTaskbar Window.SizeToContent Window.TaskbarItemInfo Window.Title Window.Top Window.Topmost Window.WindowStartupLocation Window.WindowState Window.WindowStyle Window.Activated Window.Closed Window.Closing Window.ContentRendered Window.Deactivated Window.DpiChanged Window.LocationChanged Window.SourceInitialized Window.StateChanged ContentControl.ContentProperty ContentControl.ContentStringFormatProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.HasContentProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.Content ContentControl.ContentStringFormat ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.HasContent Control.BackgroundProperty Control.BorderBrushProperty Control.BorderThicknessProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.ForegroundProperty Control.HorizontalContentAlignmentProperty Control.IsTabStopProperty Control.MouseDoubleClickEvent Control.PaddingProperty Control.PreviewMouseDoubleClickEvent Control.TabIndexProperty Control.TemplateProperty Control.VerticalContentAlignmentProperty Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.Background Control.BorderBrush Control.BorderThickness Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.Foreground Control.HandlesScrolling Control.HorizontalContentAlignment Control.IsTabStop Control.Padding Control.TabIndex Control.Template Control.VerticalContentAlignment Control.MouseDoubleClick Control.PreviewMouseDoubleClick FrameworkElement.ActualHeightProperty FrameworkElement.ActualWidthProperty FrameworkElement.BindingGroupProperty FrameworkElement.ContextMenuClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuProperty FrameworkElement.CursorProperty FrameworkElement.DataContextProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.FlowDirectionProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.ForceCursorProperty FrameworkElement.HeightProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.InputScopeProperty FrameworkElement.LanguageProperty FrameworkElement.LayoutTransformProperty FrameworkElement.LoadedEvent FrameworkElement.MarginProperty FrameworkElement.MaxHeightProperty FrameworkElement.MaxWidthProperty FrameworkElement.MinHeightProperty FrameworkElement.MinWidthProperty FrameworkElement.NameProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.StyleProperty FrameworkElement.TagProperty FrameworkElement.ToolTipClosingEvent FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipProperty FrameworkElement.UnloadedEvent FrameworkElement.UseLayoutRoundingProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.WidthProperty FrameworkElement.AddLogicalChild(object) FrameworkElement.ApplyTemplate() FrameworkElement.ArrangeCore(Rect) FrameworkElement.BeginInit() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.EndInit() FrameworkElement.FindName(string) FrameworkElement.FindResource(object) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.GetLayoutClip(Size) FrameworkElement.GetTemplateChild(string) FrameworkElement.GetUIParentCore() FrameworkElement.GetVisualChild(int) FrameworkElement.MeasureCore(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.OnApplyTemplate() FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.RegisterName(string, object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.TryFindResource(object) FrameworkElement.UnregisterName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.ActualHeight FrameworkElement.ActualWidth FrameworkElement.BindingGroup FrameworkElement.ContextMenu FrameworkElement.Cursor FrameworkElement.DataContext FrameworkElement.DefaultStyleKey FrameworkElement.FlowDirection FrameworkElement.FocusVisualStyle FrameworkElement.ForceCursor FrameworkElement.Height FrameworkElement.HorizontalAlignment FrameworkElement.InheritanceBehavior FrameworkElement.InputScope FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.Language FrameworkElement.LayoutTransform FrameworkElement.Margin FrameworkElement.MaxHeight FrameworkElement.MaxWidth FrameworkElement.MinHeight FrameworkElement.MinWidth FrameworkElement.Name FrameworkElement.OverridesDefaultStyle FrameworkElement.Parent FrameworkElement.Resources FrameworkElement.Style FrameworkElement.Tag FrameworkElement.TemplatedParent FrameworkElement.ToolTip FrameworkElement.Triggers FrameworkElement.UseLayoutRounding FrameworkElement.VerticalAlignment FrameworkElement.VisualChildrenCount FrameworkElement.Width FrameworkElement.ContextMenuClosing FrameworkElement.ContextMenuOpening FrameworkElement.DataContextChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.SourceUpdated FrameworkElement.TargetUpdated FrameworkElement.ToolTipClosing FrameworkElement.ToolTipOpening FrameworkElement.Unloaded UIElement.AllowDropProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.BitmapEffectInputProperty UIElement.BitmapEffectProperty UIElement.CacheModeProperty UIElement.ClipProperty UIElement.ClipToBoundsProperty UIElement.DragEnterEvent UIElement.DragLeaveEvent UIElement.DragOverEvent UIElement.DropEvent UIElement.EffectProperty UIElement.FocusableProperty UIElement.GiveFeedbackEvent UIElement.GotFocusEvent UIElement.GotKeyboardFocusEvent UIElement.GotMouseCaptureEvent UIElement.GotStylusCaptureEvent UIElement.GotTouchCaptureEvent UIElement.IsEnabledProperty UIElement.IsFocusedProperty UIElement.IsHitTestVisibleProperty UIElement.IsKeyboardFocusedProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsManipulationEnabledProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusOverProperty UIElement.IsVisibleProperty UIElement.KeyDownEvent UIElement.KeyUpEvent UIElement.LostFocusEvent UIElement.LostKeyboardFocusEvent UIElement.LostMouseCaptureEvent UIElement.LostStylusCaptureEvent UIElement.LostTouchCaptureEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationStartingEvent UIElement.MouseDownEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.MouseLeftButtonDownEvent UIElement.MouseLeftButtonUpEvent UIElement.MouseMoveEvent UIElement.MouseRightButtonDownEvent UIElement.MouseRightButtonUpEvent UIElement.MouseUpEvent UIElement.MouseWheelEvent UIElement.OpacityMaskProperty UIElement.OpacityProperty UIElement.PreviewDragEnterEvent UIElement.PreviewDragLeaveEvent UIElement.PreviewDragOverEvent UIElement.PreviewDropEvent UIElement.PreviewGiveFeedbackEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.PreviewKeyDownEvent UIElement.PreviewKeyUpEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.PreviewMouseDownEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.PreviewMouseUpEvent UIElement.PreviewMouseWheelEvent UIElement.PreviewQueryContinueDragEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewStylusDownEvent UIElement.PreviewStylusInAirMoveEvent UIElement.PreviewStylusInRangeEvent UIElement.PreviewStylusMoveEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.PreviewStylusUpEvent UIElement.PreviewTextInputEvent UIElement.PreviewTouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.QueryContinueDragEvent UIElement.QueryCursorEvent UIElement.RenderTransformOriginProperty UIElement.RenderTransformProperty UIElement.SnapsToDevicePixelsProperty UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.StylusDownEvent UIElement.StylusEnterEvent UIElement.StylusInAirMoveEvent UIElement.StylusInRangeEvent UIElement.StylusLeaveEvent UIElement.StylusMoveEvent UIElement.StylusOutOfRangeEvent UIElement.StylusSystemGestureEvent UIElement.StylusUpEvent UIElement.TextInputEvent UIElement.TouchDownEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.TouchMoveEvent UIElement.TouchUpEvent UIElement.UidProperty UIElement.VisibilityProperty UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.Arrange(Rect) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.CaptureMouse() UIElement.CaptureStylus() UIElement.CaptureTouch(TouchDevice) UIElement.Focus() UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.HitTestCore(PointHitTestParameters) UIElement.InputHitTest(Point) UIElement.InvalidateArrange() UIElement.InvalidateMeasure() UIElement.InvalidateVisual() UIElement.Measure(Size) UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnDragEnter(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnRender(DrawingContext) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.RaiseEvent(RoutedEventArgs) UIElement.ReleaseAllTouchCaptures() UIElement.ReleaseMouseCapture() UIElement.ReleaseStylusCapture() UIElement.ReleaseTouchCapture(TouchDevice) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.TranslatePoint(Point, UIElement) UIElement.UpdateLayout() UIElement.AllowDrop UIElement.AreAnyTouchesCaptured UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesOver UIElement.BitmapEffect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Clip UIElement.ClipToBounds UIElement.CommandBindings UIElement.DesiredSize UIElement.Effect UIElement.Focusable UIElement.HasAnimatedProperties UIElement.HasEffectiveKeyboardFocus UIElement.InputBindings UIElement.IsArrangeValid UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsFocused UIElement.IsHitTestVisible UIElement.IsInputMethodEnabled UIElement.IsKeyboardFocused UIElement.IsKeyboardFocusWithin UIElement.IsManipulationEnabled UIElement.IsMeasureValid UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusOver UIElement.IsVisible UIElement.Opacity UIElement.OpacityMask UIElement.PersistId UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.SnapsToDevicePixels UIElement.StylusPlugIns UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesDirectlyOver UIElement.TouchesOver UIElement.Uid UIElement.Visibility UIElement.DragEnter UIElement.DragLeave UIElement.DragOver UIElement.Drop UIElement.FocusableChanged UIElement.GiveFeedback UIElement.GotFocus UIElement.GotKeyboardFocus UIElement.GotMouseCapture UIElement.GotStylusCapture UIElement.GotTouchCapture UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsKeyboardFocusedChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsMouseDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsVisibleChanged UIElement.KeyDown UIElement.KeyUp UIElement.LayoutUpdated UIElement.LostFocus UIElement.LostKeyboardFocus UIElement.LostMouseCapture UIElement.LostStylusCapture UIElement.LostTouchCapture UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationStarted UIElement.ManipulationStarting UIElement.MouseDown UIElement.MouseEnter UIElement.MouseLeave UIElement.MouseLeftButtonDown UIElement.MouseLeftButtonUp UIElement.MouseMove UIElement.MouseRightButtonDown UIElement.MouseRightButtonUp UIElement.MouseUp UIElement.MouseWheel UIElement.PreviewDragEnter UIElement.PreviewDragLeave UIElement.PreviewDragOver UIElement.PreviewDrop UIElement.PreviewGiveFeedback UIElement.PreviewGotKeyboardFocus UIElement.PreviewKeyDown UIElement.PreviewKeyUp UIElement.PreviewLostKeyboardFocus UIElement.PreviewMouseDown UIElement.PreviewMouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.PreviewMouseMove UIElement.PreviewMouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.PreviewMouseUp UIElement.PreviewMouseWheel UIElement.PreviewQueryContinueDrag UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewStylusDown UIElement.PreviewStylusInAirMove UIElement.PreviewStylusInRange UIElement.PreviewStylusMove UIElement.PreviewStylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.PreviewStylusUp UIElement.PreviewTextInput UIElement.PreviewTouchDown UIElement.PreviewTouchMove UIElement.PreviewTouchUp UIElement.QueryContinueDrag UIElement.QueryCursor UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.StylusDown UIElement.StylusEnter UIElement.StylusInAirMove UIElement.StylusInRange UIElement.StylusLeave UIElement.StylusMove UIElement.StylusOutOfRange UIElement.StylusSystemGesture UIElement.StylusUp UIElement.TextInput UIElement.TouchDown UIElement.TouchEnter UIElement.TouchLeave UIElement.TouchMove UIElement.TouchUp Visual.AddVisualChild(Visual) Visual.FindCommonVisualAncestor(DependencyObject) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.PointFromScreen(Point) Visual.PointToScreen(Point) Visual.RemoveVisualChild(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToAncestor(Visual) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualBitmapScalingMode Visual.VisualCacheMode Visual.VisualClearTypeHint Visual.VisualClip Visual.VisualEdgeMode Visual.VisualEffect Visual.VisualOffset Visual.VisualOpacity Visual.VisualOpacityMask Visual.VisualParent Visual.VisualScrollableAreaClip Visual.VisualTextHintingMode Visual.VisualTextRenderingMode Visual.VisualTransform Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetLocalValueEnumerator() DependencyObject.GetValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MainWindow(MainViewModel, ILoadingService, IWindowsProviderService) 构造函数， 初始化 MainWindow 新实例 public MainWindow(MainViewModel viewModel, ILoadingService loadingService, IWindowsProviderService windowsProviderService) Parameters viewModel MainViewModel loadingService ILoadingService windowsProviderService IWindowsProviderService Properties ViewModel 获取视图模型实例 public MainViewModel ViewModel { get; } Property Value MainViewModel Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MAS.PrismaTalk.Views.Windows.ShutdownTasksWindow.html": {
    "href": "api/MAS.PrismaTalk.Views.Windows.ShutdownTasksWindow.html",
    "title": "Class ShutdownTasksWindow | DataMaster",
    "summary": "Class ShutdownTasksWindow Namespace MAS.PrismaTalk.Views.Windows Assembly MAS.PrismaTalk.dll ShutdownTasksWindow.xaml 的交互逻辑 public class ShutdownTasksWindow : FluentWindow, IAnimatable, ISupportInitialize, IFrameworkInputElement, IInputElement, IQueryAmbient, IAddChild, IComponentConnector Inheritance object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl Window FluentWindow ShutdownTasksWindow Implements IAnimatable ISupportInitialize IFrameworkInputElement IInputElement IQueryAmbient IAddChild IComponentConnector Inherited Members FluentWindow.WindowCornerPreferenceProperty FluentWindow.WindowBackdropTypeProperty FluentWindow.ExtendsContentIntoTitleBarProperty FluentWindow.OnSourceInitialized(EventArgs) FluentWindow.OnCornerPreferenceChanged(WindowCornerPreference, WindowCornerPreference) FluentWindow.OnBackdropTypeChanged(WindowBackdropType, WindowBackdropType) FluentWindow.OnExtendsContentIntoTitleBarChanged(bool, bool) FluentWindow.InteropHelper FluentWindow.WindowCornerPreference FluentWindow.WindowBackdropType FluentWindow.ExtendsContentIntoTitleBar Window.AllowsTransparencyProperty Window.DpiChangedEvent Window.IconProperty Window.IsActiveProperty Window.LeftProperty Window.ResizeModeProperty Window.ShowActivatedProperty Window.ShowInTaskbarProperty Window.SizeToContentProperty Window.TaskbarItemInfoProperty Window.TitleProperty Window.TopmostProperty Window.TopProperty Window.WindowStateProperty Window.WindowStyleProperty Window.Activate() Window.ArrangeOverride(Size) Window.Close() Window.DragMove() Window.GetWindow(DependencyObject) Window.Hide() Window.MeasureOverride(Size) Window.OnActivated(EventArgs) Window.OnClosed(EventArgs) Window.OnClosing(CancelEventArgs) Window.OnContentChanged(object, object) Window.OnContentRendered(EventArgs) Window.OnCreateAutomationPeer() Window.OnDeactivated(EventArgs) Window.OnDpiChanged(DpiScale, DpiScale) Window.OnLocationChanged(EventArgs) Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) Window.OnStateChanged(EventArgs) Window.OnVisualChildrenChanged(DependencyObject, DependencyObject) Window.OnVisualParentChanged(DependencyObject) Window.Show() Window.ShowDialog() Window.AllowsTransparency Window.DialogResult Window.Icon Window.IsActive Window.Left Window.LogicalChildren Window.OwnedWindows Window.Owner Window.ResizeMode Window.RestoreBounds Window.ShowActivated Window.ShowInTaskbar Window.SizeToContent Window.TaskbarItemInfo Window.Title Window.Top Window.Topmost Window.WindowStartupLocation Window.WindowState Window.WindowStyle Window.Activated Window.Closed Window.Closing Window.ContentRendered Window.Deactivated Window.DpiChanged Window.LocationChanged Window.SourceInitialized Window.StateChanged ContentControl.ContentProperty ContentControl.ContentStringFormatProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.HasContentProperty ContentControl.AddChild(object) ContentControl.AddText(string) ContentControl.OnContentStringFormatChanged(string, string) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.Content ContentControl.ContentStringFormat ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.HasContent Control.BackgroundProperty Control.BorderBrushProperty Control.BorderThicknessProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.ForegroundProperty Control.HorizontalContentAlignmentProperty Control.IsTabStopProperty Control.MouseDoubleClickEvent Control.PaddingProperty Control.PreviewMouseDoubleClickEvent Control.TabIndexProperty Control.TemplateProperty Control.VerticalContentAlignmentProperty Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.Background Control.BorderBrush Control.BorderThickness Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.Foreground Control.HandlesScrolling Control.HorizontalContentAlignment Control.IsTabStop Control.Padding Control.TabIndex Control.Template Control.VerticalContentAlignment Control.MouseDoubleClick Control.PreviewMouseDoubleClick FrameworkElement.ActualHeightProperty FrameworkElement.ActualWidthProperty FrameworkElement.BindingGroupProperty FrameworkElement.ContextMenuClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuProperty FrameworkElement.CursorProperty FrameworkElement.DataContextProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.FlowDirectionProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.ForceCursorProperty FrameworkElement.HeightProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.InputScopeProperty FrameworkElement.LanguageProperty FrameworkElement.LayoutTransformProperty FrameworkElement.LoadedEvent FrameworkElement.MarginProperty FrameworkElement.MaxHeightProperty FrameworkElement.MaxWidthProperty FrameworkElement.MinHeightProperty FrameworkElement.MinWidthProperty FrameworkElement.NameProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.StyleProperty FrameworkElement.TagProperty FrameworkElement.ToolTipClosingEvent FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipProperty FrameworkElement.UnloadedEvent FrameworkElement.UseLayoutRoundingProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.WidthProperty FrameworkElement.AddLogicalChild(object) FrameworkElement.ApplyTemplate() FrameworkElement.ArrangeCore(Rect) FrameworkElement.BeginInit() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, bool) FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.EndInit() FrameworkElement.FindName(string) FrameworkElement.FindResource(object) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.GetLayoutClip(Size) FrameworkElement.GetTemplateChild(string) FrameworkElement.GetUIParentCore() FrameworkElement.GetVisualChild(int) FrameworkElement.MeasureCore(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.OnApplyTemplate() FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.RegisterName(string, object) FrameworkElement.RemoveLogicalChild(object) FrameworkElement.SetBinding(DependencyProperty, string) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.SetResourceReference(DependencyProperty, object) FrameworkElement.TryFindResource(object) FrameworkElement.UnregisterName(string) FrameworkElement.UpdateDefaultStyle() FrameworkElement.ActualHeight FrameworkElement.ActualWidth FrameworkElement.BindingGroup FrameworkElement.ContextMenu FrameworkElement.Cursor FrameworkElement.DataContext FrameworkElement.DefaultStyleKey FrameworkElement.FlowDirection FrameworkElement.FocusVisualStyle FrameworkElement.ForceCursor FrameworkElement.Height FrameworkElement.HorizontalAlignment FrameworkElement.InheritanceBehavior FrameworkElement.InputScope FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.Language FrameworkElement.LayoutTransform FrameworkElement.Margin FrameworkElement.MaxHeight FrameworkElement.MaxWidth FrameworkElement.MinHeight FrameworkElement.MinWidth FrameworkElement.Name FrameworkElement.OverridesDefaultStyle FrameworkElement.Parent FrameworkElement.Resources FrameworkElement.Style FrameworkElement.Tag FrameworkElement.TemplatedParent FrameworkElement.ToolTip FrameworkElement.Triggers FrameworkElement.UseLayoutRounding FrameworkElement.VerticalAlignment FrameworkElement.VisualChildrenCount FrameworkElement.Width FrameworkElement.ContextMenuClosing FrameworkElement.ContextMenuOpening FrameworkElement.DataContextChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.SourceUpdated FrameworkElement.TargetUpdated FrameworkElement.ToolTipClosing FrameworkElement.ToolTipOpening FrameworkElement.Unloaded UIElement.AllowDropProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.BitmapEffectInputProperty UIElement.BitmapEffectProperty UIElement.CacheModeProperty UIElement.ClipProperty UIElement.ClipToBoundsProperty UIElement.DragEnterEvent UIElement.DragLeaveEvent UIElement.DragOverEvent UIElement.DropEvent UIElement.EffectProperty UIElement.FocusableProperty UIElement.GiveFeedbackEvent UIElement.GotFocusEvent UIElement.GotKeyboardFocusEvent UIElement.GotMouseCaptureEvent UIElement.GotStylusCaptureEvent UIElement.GotTouchCaptureEvent UIElement.IsEnabledProperty UIElement.IsFocusedProperty UIElement.IsHitTestVisibleProperty UIElement.IsKeyboardFocusedProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsManipulationEnabledProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusOverProperty UIElement.IsVisibleProperty UIElement.KeyDownEvent UIElement.KeyUpEvent UIElement.LostFocusEvent UIElement.LostKeyboardFocusEvent UIElement.LostMouseCaptureEvent UIElement.LostStylusCaptureEvent UIElement.LostTouchCaptureEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationStartingEvent UIElement.MouseDownEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.MouseLeftButtonDownEvent UIElement.MouseLeftButtonUpEvent UIElement.MouseMoveEvent UIElement.MouseRightButtonDownEvent UIElement.MouseRightButtonUpEvent UIElement.MouseUpEvent UIElement.MouseWheelEvent UIElement.OpacityMaskProperty UIElement.OpacityProperty UIElement.PreviewDragEnterEvent UIElement.PreviewDragLeaveEvent UIElement.PreviewDragOverEvent UIElement.PreviewDropEvent UIElement.PreviewGiveFeedbackEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.PreviewKeyDownEvent UIElement.PreviewKeyUpEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.PreviewMouseDownEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.PreviewMouseUpEvent UIElement.PreviewMouseWheelEvent UIElement.PreviewQueryContinueDragEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewStylusDownEvent UIElement.PreviewStylusInAirMoveEvent UIElement.PreviewStylusInRangeEvent UIElement.PreviewStylusMoveEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.PreviewStylusUpEvent UIElement.PreviewTextInputEvent UIElement.PreviewTouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.QueryContinueDragEvent UIElement.QueryCursorEvent UIElement.RenderTransformOriginProperty UIElement.RenderTransformProperty UIElement.SnapsToDevicePixelsProperty UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.StylusDownEvent UIElement.StylusEnterEvent UIElement.StylusInAirMoveEvent UIElement.StylusInRangeEvent UIElement.StylusLeaveEvent UIElement.StylusMoveEvent UIElement.StylusOutOfRangeEvent UIElement.StylusSystemGestureEvent UIElement.StylusUpEvent UIElement.TextInputEvent UIElement.TouchDownEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.TouchMoveEvent UIElement.TouchUpEvent UIElement.UidProperty UIElement.VisibilityProperty UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, bool) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.Arrange(Rect) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.CaptureMouse() UIElement.CaptureStylus() UIElement.CaptureTouch(TouchDevice) UIElement.Focus() UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.HitTestCore(PointHitTestParameters) UIElement.InputHitTest(Point) UIElement.InvalidateArrange() UIElement.InvalidateMeasure() UIElement.InvalidateVisual() UIElement.Measure(Size) UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnDragEnter(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnRender(DrawingContext) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.RaiseEvent(RoutedEventArgs) UIElement.ReleaseAllTouchCaptures() UIElement.ReleaseMouseCapture() UIElement.ReleaseStylusCapture() UIElement.ReleaseTouchCapture(TouchDevice) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.TranslatePoint(Point, UIElement) UIElement.UpdateLayout() UIElement.AllowDrop UIElement.AreAnyTouchesCaptured UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesOver UIElement.BitmapEffect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Clip UIElement.ClipToBounds UIElement.CommandBindings UIElement.DesiredSize UIElement.Effect UIElement.Focusable UIElement.HasAnimatedProperties UIElement.HasEffectiveKeyboardFocus UIElement.InputBindings UIElement.IsArrangeValid UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsFocused UIElement.IsHitTestVisible UIElement.IsInputMethodEnabled UIElement.IsKeyboardFocused UIElement.IsKeyboardFocusWithin UIElement.IsManipulationEnabled UIElement.IsMeasureValid UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusOver UIElement.IsVisible UIElement.Opacity UIElement.OpacityMask UIElement.PersistId UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.SnapsToDevicePixels UIElement.StylusPlugIns UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesDirectlyOver UIElement.TouchesOver UIElement.Uid UIElement.Visibility UIElement.DragEnter UIElement.DragLeave UIElement.DragOver UIElement.Drop UIElement.FocusableChanged UIElement.GiveFeedback UIElement.GotFocus UIElement.GotKeyboardFocus UIElement.GotMouseCapture UIElement.GotStylusCapture UIElement.GotTouchCapture UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsKeyboardFocusedChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsMouseDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsVisibleChanged UIElement.KeyDown UIElement.KeyUp UIElement.LayoutUpdated UIElement.LostFocus UIElement.LostKeyboardFocus UIElement.LostMouseCapture UIElement.LostStylusCapture UIElement.LostTouchCapture UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationStarted UIElement.ManipulationStarting UIElement.MouseDown UIElement.MouseEnter UIElement.MouseLeave UIElement.MouseLeftButtonDown UIElement.MouseLeftButtonUp UIElement.MouseMove UIElement.MouseRightButtonDown UIElement.MouseRightButtonUp UIElement.MouseUp UIElement.MouseWheel UIElement.PreviewDragEnter UIElement.PreviewDragLeave UIElement.PreviewDragOver UIElement.PreviewDrop UIElement.PreviewGiveFeedback UIElement.PreviewGotKeyboardFocus UIElement.PreviewKeyDown UIElement.PreviewKeyUp UIElement.PreviewLostKeyboardFocus UIElement.PreviewMouseDown UIElement.PreviewMouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.PreviewMouseMove UIElement.PreviewMouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.PreviewMouseUp UIElement.PreviewMouseWheel UIElement.PreviewQueryContinueDrag UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewStylusDown UIElement.PreviewStylusInAirMove UIElement.PreviewStylusInRange UIElement.PreviewStylusMove UIElement.PreviewStylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.PreviewStylusUp UIElement.PreviewTextInput UIElement.PreviewTouchDown UIElement.PreviewTouchMove UIElement.PreviewTouchUp UIElement.QueryContinueDrag UIElement.QueryCursor UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.StylusDown UIElement.StylusEnter UIElement.StylusInAirMove UIElement.StylusInRange UIElement.StylusLeave UIElement.StylusMove UIElement.StylusOutOfRange UIElement.StylusSystemGesture UIElement.StylusUp UIElement.TextInput UIElement.TouchDown UIElement.TouchEnter UIElement.TouchLeave UIElement.TouchMove UIElement.TouchUp Visual.AddVisualChild(Visual) Visual.FindCommonVisualAncestor(DependencyObject) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.PointFromScreen(Point) Visual.PointToScreen(Point) Visual.RemoveVisualChild(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToAncestor(Visual) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualBitmapScalingMode Visual.VisualCacheMode Visual.VisualClearTypeHint Visual.VisualClip Visual.VisualEdgeMode Visual.VisualEffect Visual.VisualOffset Visual.VisualOpacity Visual.VisualOpacityMask Visual.VisualParent Visual.VisualScrollableAreaClip Visual.VisualTextHintingMode Visual.VisualTextRenderingMode Visual.VisualTransform Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.Equals(object) DependencyObject.GetHashCode() DependencyObject.GetLocalValueEnumerator() DependencyObject.GetValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.SetCurrentValue(DependencyProperty, object) DependencyObject.SetValue(DependencyProperty, object) DependencyObject.SetValue(DependencyPropertyKey, object) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ShutdownTasksWindow(ShutdownTasksViewModel) 构造函数，初始化 ShutdownTasksWindow 新实例 public ShutdownTasksWindow(ShutdownTasksViewModel viewModel) Parameters viewModel ShutdownTasksViewModel Properties ViewModel 获取视图模型实例 public ShutdownTasksViewModel ViewModel { get; } Property Value ShutdownTasksViewModel Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MAS.PrismaTalk.Views.Windows.html": {
    "href": "api/MAS.PrismaTalk.Views.Windows.html",
    "title": "Namespace MAS.PrismaTalk.Views.Windows | DataMaster",
    "summary": "Namespace MAS.PrismaTalk.Views.Windows Classes MainWindow Interaction logic for MainWindow.xaml ShutdownTasksWindow ShutdownTasksWindow.xaml 的交互逻辑"
  },
  "api/MAS.PrismaTalk.html": {
    "href": "api/MAS.PrismaTalk.html",
    "title": "Namespace MAS.PrismaTalk | DataMaster",
    "summary": "Namespace MAS.PrismaTalk Classes App Interaction logic for App.xaml MasAsyncRelayCommand 异步执行操作的命令 允许将异步操作绑定到UI命令上 MasRelayCommand 根据特定逻辑执行和判断是否可以执行的命令"
  },
  "api/MAS.Security.PasswordHelper.html": {
    "href": "api/MAS.Security.PasswordHelper.html",
    "title": "Class PasswordHelper | DataMaster",
    "summary": "Class PasswordHelper Namespace MAS.Security Assembly MAS.Security.dll 密码加密/解密工具 public static class PasswordHelper Inheritance object PasswordHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompareHashes(byte[], byte[]) 安全比较两个哈希值是否相等 public static bool CompareHashes(byte[] hash1, byte[] hash2) Parameters hash1 byte[] 第一个哈希值 hash2 byte[] 第二个哈希值 Returns bool 如果两个哈希值相等返回true，否则返回false Remarks 比较是时间恒定的，以减少基于时间的攻击 CreateSalt(int) 生成一个新的随机盐值 public static byte[] CreateSalt(int size) Parameters size int 盐值的大小（以字节为单位） Returns byte[] 一个随机生成的盐值字节数组 HashPassword(string, byte[]) 使用指定的盐值对密码进行哈希处理 public static byte[] HashPassword(string password, byte[] salt) Parameters password string 待哈希处理的密码 salt byte[] 用于哈希处理的盐值 Returns byte[] 密码的哈希值"
  },
  "api/MAS.Security.ServiceCollectionExtensions.html": {
    "href": "api/MAS.Security.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.Security Assembly MAS.Security.dll 提供扩展方法，用于在 IServiceCollection 中注册与安全相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSecurityService(IServiceCollection) 在指定的 IServiceCollection 中注册与安全相关的服务 public static IServiceCollection AddSecurityService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.Security.html": {
    "href": "api/MAS.Security.html",
    "title": "Namespace MAS.Security | DataMaster",
    "summary": "Namespace MAS.Security Classes PasswordHelper 密码加密/解密工具 ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与安全相关的服务"
  },
  "api/MAS.SharedLibrary.Abstractions.ConfigurationsBase.html": {
    "href": "api/MAS.SharedLibrary.Abstractions.ConfigurationsBase.html",
    "title": "Class ConfigurationsBase | DataMaster",
    "summary": "Class ConfigurationsBase Namespace MAS.SharedLibrary.Abstractions Assembly MAS.SharedLibrary.dll 配置基类 public abstract class ConfigurationsBase Inheritance object ConfigurationsBase Derived LogConfig PrismaTalkConfig SettingsConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnPropertyChanged(string, object?, object?, string) 触发配置更改事件的辅助方法 protected virtual void OnPropertyChanged(string propertyName, object? oldValue, object? newValue, string modifiedBy) Parameters propertyName string oldValue object newValue object modifiedBy string SetField<T>(ref T, T, string, string) 辅助方法，用于设置属性值并在值更改时触发配置更改事件 protected bool SetField<T>(ref T field, T value, string modifiedBy = \"MAS\", string propertyName = \"\") Parameters field T 引用后备字段。这个字段将被更新为新的值 value T 要设置的新值。如果新值与旧值相同，则不会更新或触发事件 modifiedBy string 修改者的标识符 propertyName string 更改的属性的名称 Returns bool 如果属性值发生了变化返回true，反之false Type Parameters T 属性的类型 Events PropertyChanged 属性改变事件 public event EventHandler<PropertyChangedExtendedEventArgs>? PropertyChanged Event Type EventHandler<PropertyChangedExtendedEventArgs>"
  },
  "api/MAS.SharedLibrary.Abstractions.PersistenceServiceBase.html": {
    "href": "api/MAS.SharedLibrary.Abstractions.PersistenceServiceBase.html",
    "title": "Class PersistenceServiceBase | DataMaster",
    "summary": "Class PersistenceServiceBase Namespace MAS.SharedLibrary.Abstractions Assembly MAS.SharedLibrary.dll 数据持久化服务基类 public abstract class PersistenceServiceBase : IPersistenceService, IDisposable Inheritance object PersistenceServiceBase Implements IPersistenceService IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersistenceServiceBase(IEncryptionService) 数据持久化服务基类 protected PersistenceServiceBase(IEncryptionService encryptionService) Parameters encryptionService IEncryptionService Fields VERSIONING 版本文件 protected const string VERSIONING = \"versioning.json\" Field Value string Properties ModuleName 获取模块的名称，用于标识项目类型 protected abstract string ModuleName { get; } Property Value string ModuleVersion 获取用于创建该项目时的版本 protected abstract string ModuleVersion { get; } Property Value string Methods CreateAdditionalProperties() 创建默认的额外元数据属性 protected virtual Dictionary<string, object> CreateAdditionalProperties() Returns Dictionary<string, object> 默认的额外元数据属性 CreateControlModels() 创建默认的控件数据列表 protected virtual List<object> CreateControlModels() Returns List<object> 默认的控件数据列表 CreateServiceData() 创建默认的服务数据 protected virtual Dictionary<string, object> CreateServiceData() Returns Dictionary<string, object> 默认的服务数据 CreationProject(string) 创建项目并重置工程数据模型 public void CreationProject(string filePath) Parameters filePath string 新的文件路径 Exceptions ProjectCreationException DeserializeObjectFromFileAsync<T>(FileStream) 异步从指定的文件流反序列化 JSON 字符串为对象 protected abstract Task<T> DeserializeObjectFromFileAsync<T>(FileStream fileStream) Parameters fileStream FileStream Returns Task<T> Type Parameters T Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) 处理资源释放 protected virtual void Dispose(bool disposing) Parameters disposing bool 如果为 true，则释放托管和非托管资源；如果为 false，则只释放非托管资源 Remarks 重写此方法时，必须在方法的最后调用 base.Dispose(disposing)， 以确保基类中的资源也得到适当的处理 GetCurrentFileStream() 获取当前工程文件流 public FileStream? GetCurrentFileStream() Returns FileStream FileStream 对象或 null Exceptions ProjectNullException GetCurrentProject() 获取当前工程数据模型 public ProjectModel GetCurrentProject() Returns ProjectModel ProjectModel 对象 Exceptions ProjectNullException IsVersionSupported(string) 当前版本是否受支持 protected virtual bool IsVersionSupported(string version) Parameters version string Returns bool 支持返回true，否则false Remarks 版本信息 LoadProjectAsync(string) 异步加载工程 public Task LoadProjectAsync(string filePath) Parameters filePath string 要加载的文件 Returns Task 表示异步操作任务 Remarks 加载完成后 CurrentProject 可用 Exceptions ProjectLoadException ReloadCurrentProjectAsync() 异步重新加载当前项目 public Task ReloadCurrentProjectAsync() Returns Task 表示异步操作任务 Remarks 在修改工程源文件后调用加载更新 Exceptions ProjectLoadException SaveProjectAsync() 异步保存工程 public Task SaveProjectAsync() Returns Task 表示异步操作任务 Exceptions ProjectSaveException SaveProjectAsync(string) 异步保存工程 public Task SaveProjectAsync(string content) Parameters content string Returns Task 表示异步操作任务 Remarks 编辑的内容 Exceptions ProjectSaveException SerializeObjectSaveToFileAsync(ProjectModel, FileStream) 异步序列化 ProjectModel 对象保存到文件流 protected abstract Task SerializeObjectSaveToFileAsync(ProjectModel currentProject, FileStream fileStream) Parameters currentProject ProjectModel fileStream FileStream Returns Task Events ProjectCreated 当新项目创建完成时触发 public event EventHandler<ProjectEventArgs>? ProjectCreated Event Type EventHandler<ProjectEventArgs> ProjectLoaded 当项目加载完成时触发 public event EventHandler<ProjectEventArgs>? ProjectLoaded Event Type EventHandler<ProjectEventArgs> ProjectSaved 当项目保存完成时触发 public event EventHandler<ProjectEventArgs>? ProjectSaved Event Type EventHandler<ProjectEventArgs> ProjectSaving 当项目即将保存时触发 public event EventHandler<ProjectEventArgs>? ProjectSaving Event Type EventHandler<ProjectEventArgs>"
  },
  "api/MAS.SharedLibrary.Abstractions.ViewModelBase.html": {
    "href": "api/MAS.SharedLibrary.Abstractions.ViewModelBase.html",
    "title": "Class ViewModelBase | DataMaster",
    "summary": "Class ViewModelBase Namespace MAS.SharedLibrary.Abstractions Assembly MAS.SharedLibrary.dll 视图模型基类 public abstract class ViewModelBase : ObservableObject, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase Implements INotifyPropertyChanged INotifyPropertyChanging Derived MessageModel MainViewModel ShutdownTasksViewModel PipelineInfo DataExportTypeDetails DataAccessTypeDetails TreeViewCategory TreeViewControlItem ImageSourceModel ROICoordinates TextRenderConfig Inherited Members ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BusyCursor 忙碌状态光标 protected readonly Cursor BusyCursor Field Value Cursor WorkingCursor 正在工作/任务中光标 protected readonly Cursor WorkingCursor Field Value Cursor Properties IsBusy 获取或设置是否忙碌 [JsonIgnore] public virtual bool IsBusy { get; set; } Property Value bool Methods ResetCursor() 恢复默认光标状态 public void ResetCursor() SetBusyCursor() 设置为忙碌状态光标 public void SetBusyCursor() SetField<T>(ref T, T, string) 辅助方法，用于设置属性值并触发属性更改通知 protected virtual bool SetField<T>(ref T field, T value, string propertyName = \"\") Parameters field T 引用后备字段。这个字段将被更新为新的值 value T 要设置的新值。如果新值与旧值相同，则不会触发通知 propertyName string 更改的属性的名称 Returns bool 如果属性值发生了变化返回true。反之false Type Parameters T 属性的类型 SetWorkingCursor() 设置为正在工作/任务中的光标 public void SetWorkingCursor()"
  },
  "api/MAS.SharedLibrary.Abstractions.html": {
    "href": "api/MAS.SharedLibrary.Abstractions.html",
    "title": "Namespace MAS.SharedLibrary.Abstractions | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Abstractions Classes ConfigurationsBase 配置基类 PersistenceServiceBase 数据持久化服务基类 ViewModelBase 视图模型基类"
  },
  "api/MAS.SharedLibrary.Abstracts.ConfigurationsBase.html": {
    "href": "api/MAS.SharedLibrary.Abstracts.ConfigurationsBase.html",
    "title": "Class ConfigurationsBase | DataMaster",
    "summary": "Class ConfigurationsBase Namespace MAS.SharedLibrary.Abstracts Assembly MAS.SharedLibrary.dll 配置基类 public abstract class ConfigurationsBase Inheritance object ConfigurationsBase Derived LogConfig PrismaTalkConfig SettingsConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnPropertyChanged(string, object?, object?, string) 触发配置更改事件的辅助方法 protected virtual void OnPropertyChanged(string propertyName, object? oldValue, object? newValue, string modifiedBy) Parameters propertyName string oldValue object newValue object modifiedBy string SetField<T>(ref T, T, string, string) 辅助方法，用于设置属性值并在值更改时触发配置更改事件 protected bool SetField<T>(ref T field, T value, string modifiedBy = \"MAS\", string propertyName = \"\") Parameters field T 引用后备字段。这个字段将被更新为新的值 value T 要设置的新值。如果新值与旧值相同，则不会更新或触发事件 modifiedBy string 修改者的标识符 propertyName string 更改的属性的名称 Returns bool 如果属性值发生了变化返回true，反之false Type Parameters T 属性的类型 Events PropertyChanged 属性改变事件 public event EventHandler<PropertyChangedExtendedEventArgs>? PropertyChanged Event Type EventHandler<PropertyChangedExtendedEventArgs>"
  },
  "api/MAS.SharedLibrary.Abstracts.ViewModelBase.html": {
    "href": "api/MAS.SharedLibrary.Abstracts.ViewModelBase.html",
    "title": "Class ViewModelBase | DataMaster",
    "summary": "Class ViewModelBase Namespace MAS.SharedLibrary.Abstracts Assembly MAS.SharedLibrary.dll 视图模型基类 public abstract class ViewModelBase : ObservableObject, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase Implements INotifyPropertyChanged INotifyPropertyChanging Derived MessageModel MainViewModel ShutdownTasksViewModel PipelineInfo DataExportTypeDetails DataAccessTypeDetails TreeViewCategory TreeViewControlItem ImageSourceModel ROICoordinates TextRenderConfig Inherited Members ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BusyCursor 忙碌状态光标 protected readonly Cursor BusyCursor Field Value Cursor WorkingCursor 正在工作/任务中光标 protected readonly Cursor WorkingCursor Field Value Cursor Properties IsBusy 获取或设置是否忙碌 [JsonIgnore] public virtual bool IsBusy { get; set; } Property Value bool Methods ResetCursor() 恢复默认光标状态 public void ResetCursor() SetBusyCursor() 设置为忙碌状态光标 public void SetBusyCursor() SetField<T>(ref T, T, string) 辅助方法，用于设置属性值并触发属性更改通知 protected virtual bool SetField<T>(ref T field, T value, string propertyName = \"\") Parameters field T 引用后备字段。这个字段将被更新为新的值 value T 要设置的新值。如果新值与旧值相同，则不会触发通知 propertyName string 更改的属性的名称 Returns bool 如果属性值发生了变化返回true。反之false Type Parameters T 属性的类型 SetWorkingCursor() 设置为正在工作/任务中的光标 public void SetWorkingCursor()"
  },
  "api/MAS.SharedLibrary.Abstracts.html": {
    "href": "api/MAS.SharedLibrary.Abstracts.html",
    "title": "Namespace MAS.SharedLibrary.Abstracts | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Abstracts Classes ConfigurationsBase 配置基类 ViewModelBase 视图模型基类"
  },
  "api/MAS.SharedLibrary.BuildRun.IBuildRunPersistenceService.html": {
    "href": "api/MAS.SharedLibrary.BuildRun.IBuildRunPersistenceService.html",
    "title": "Interface IBuildRunPersistenceService | DataMaster",
    "summary": "Interface IBuildRunPersistenceService Namespace MAS.SharedLibrary.BuildRun Assembly MAS.SharedLibrary.dll 构建运行数据持久化服务 public interface IBuildRunPersistenceService : IPersistenceService, IDisposable Inherited Members IPersistenceService.ProjectCreated IPersistenceService.ProjectLoaded IPersistenceService.ProjectSaved IPersistenceService.ProjectSaving IPersistenceService.GetCurrentFileStream() IPersistenceService.GetCurrentProject() IPersistenceService.SaveProjectAsync() IPersistenceService.SaveProjectAsync(string) IPersistenceService.LoadProjectAsync(string) IPersistenceService.CreationProject(string) IPersistenceService.ReloadCurrentProjectAsync() IDisposable.Dispose() Methods GetBuildConfig() 获取构建配置 IBuildConfig GetBuildConfig() Returns IBuildConfig IBuildConfig 接口实例 Exceptions ProjectConfigException GetCommConfig(string) 根据唯一键获取指定的通讯配置 ICommunicationConfig GetCommConfig(string key) Parameters key string 实例的标识键 Returns ICommunicationConfig ICommunicationConfig 接口实例 Exceptions ProjectConfigException GetDataExportConfig(string) 根据唯一键获取指定的数据导出配置 IDataExportConfig GetDataExportConfig(string key) Parameters key string 实例的标识键 Returns IDataExportConfig IDataExportConfig 接口实例 Exceptions ProjectConfigException GetDbConfig(string) 根据唯一键获取指定的数据库配置 IDbConfig GetDbConfig(string key) Parameters key string 实例的标识键 Returns IDbConfig IDbConfig 接口实例 Exceptions ProjectConfigException SetBuildConfig(IBuildConfig) 设置构建配置 void SetBuildConfig(IBuildConfig updatedConfig) Parameters updatedConfig IBuildConfig IBuildConfig 接口实例 SetCommConfig(ICommunicationConfig, string) 设置通讯配置 void SetCommConfig(ICommunicationConfig updatedConfig, string key) Parameters updatedConfig ICommunicationConfig ICommunicationConfig 接口实例 key string 实例的唯一标识键 Exceptions ProjectConfigException SetDataExportConfig(IDataExportConfig, string) 设置数据导出配置 void SetDataExportConfig(IDataExportConfig updatedConfig, string key) Parameters updatedConfig IDataExportConfig IDataExportConfig 接口实例 key string 实例的唯一标识键 Exceptions ProjectConfigException SetDbConfig(IDbConfig, string) 设置数据库配置 void SetDbConfig(IDbConfig updatedConfig, string key) Parameters updatedConfig IDbConfig IDbConfig 接口实例 key string 实例的唯一标识键 Exceptions ProjectConfigException"
  },
  "api/MAS.SharedLibrary.BuildRun.html": {
    "href": "api/MAS.SharedLibrary.BuildRun.html",
    "title": "Namespace MAS.SharedLibrary.BuildRun | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.BuildRun Interfaces IBuildRunPersistenceService 构建运行数据持久化服务"
  },
  "api/MAS.SharedLibrary.Communication.CommProtocol.html": {
    "href": "api/MAS.SharedLibrary.Communication.CommProtocol.html",
    "title": "Enum CommProtocol | DataMaster",
    "summary": "Enum CommProtocol Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 通讯协议枚举 public enum CommProtocol Fields MC = 1 三菱 MC协议 S7 = 0 西门子 S7 协议"
  },
  "api/MAS.SharedLibrary.Communication.ICommBuildConfig.html": {
    "href": "api/MAS.SharedLibrary.Communication.ICommBuildConfig.html",
    "title": "Interface ICommBuildConfig | DataMaster",
    "summary": "Interface ICommBuildConfig Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 通讯构建相关的配置接口 public interface ICommBuildConfig : IBuildConfig Inherited Members IBuildConfig.BuildPathFull IBuildConfig.SourceDirectories IBuildConfig.RootNamespace IBuildConfig.OutputAssemblyName IBuildConfig.OutputAssemblyPath IBuildConfig.ReferencePaths IBuildConfig.ReferenceDirectories IBuildConfig.TempDirectory IBuildConfig.WarningLevel IBuildConfig.GetBuildPathFull() Properties ReadTaskHandlerType 获取或设置读取任务类型定义 string ReadTaskHandlerType { get; set; } Property Value string ReadTaskPath 获取或设置读取任务代码存放路径 string ReadTaskPath { get; set; } Property Value string Remarks ReadTaskPath\\ WriteTaskHandlerType 获取或设置写入任务类型定义 string WriteTaskHandlerType { get; set; } Property Value string WriteTaskPath 获取或设置写入任务代码存放路径 string WriteTaskPath { get; set; } Property Value string Remarks WriteTaskPath\\ Methods GetReadTaskFullPath() 获取读取任务的完整路径 string GetReadTaskFullPath() Returns string 完整的文件路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config), ReadTaskPath) GetWriteTaskFullPath() 获取写入任务的完整路径 string GetWriteTaskFullPath() Returns string 完整的文件路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config), WriteTaskPath)"
  },
  "api/MAS.SharedLibrary.Communication.ICommConfigConverter.html": {
    "href": "api/MAS.SharedLibrary.Communication.ICommConfigConverter.html",
    "title": "Interface ICommConfigConverter | DataMaster",
    "summary": "Interface ICommConfigConverter Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 通讯配置转换器接口，用于将 JSON 对象转换为实现 ICommunicationConfig 接口的配置实例 public interface ICommConfigConverter Methods Convert(JObject) 将 JObject 转换为 ICommunicationConfig 实例 ICommunicationConfig Convert(JObject jConfig) Parameters jConfig JObject 包含通讯配置数据的 JSON 对象，要求格式正确且包含所有必要的字段 Returns ICommunicationConfig 转换后的 ICommunicationConfig 实例 Exceptions InvalidOperationException 当输入数据格式不正确或缺少必要字段时抛出 NotSupportedException 当不支持的协议类型时抛出"
  },
  "api/MAS.SharedLibrary.Communication.ICommunicationConfig.html": {
    "href": "api/MAS.SharedLibrary.Communication.ICommunicationConfig.html",
    "title": "Interface ICommunicationConfig | DataMaster",
    "summary": "Interface ICommunicationConfig Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 通讯协议的基本参数配置接口 public interface ICommunicationConfig : ICloneable Inherited Members ICloneable.Clone() Properties ActiveThreshold 获取或设置实例活跃阈值，单位分钟，超过设置阈值则表示不活跃 short ActiveThreshold { get; set; } Property Value short Build 获取构建相关的配置 ICommBuildConfig Build { get; } Property Value ICommBuildConfig ExecutionMode 获取或设置执行模式。Sequential 顺序执行 Concurrent 并行执行 string ExecutionMode { get; set; } Property Value string ExecutionTimeout 获取或设置执行超时时间（ms） short ExecutionTimeout { get; set; } Property Value short ExpirationTime 获取或设置实例过期时间，单位分钟，将清除过期的实例 short ExpirationTime { get; set; } Property Value short HeartbeatInterval 获取或设置心跳发送间隔(s) short HeartbeatInterval { get; set; } Property Value short Ip 获取或设置 Ip 地址 string Ip { get; set; } Property Value string IsAutoClear 获取或设置是否自动清除过期实例 bool IsAutoClear { get; set; } Property Value bool MaxRetries 获取或设置连接失败时的重试次数上限 short MaxRetries { get; set; } Property Value short ProtocolName 获取或设置协议名称 string ProtocolName { get; set; } Property Value string ReadDataAdr 获取或设置数据读取起始地址 short ReadDataAdr { get; set; } Property Value short ReadTimeout 获取或设置读取超时时间(ms) short ReadTimeout { get; set; } Property Value short RunSleepTime 获取或设置运行休眠时间(ms) short RunSleepTime { get; set; } Property Value short TaskCompletedAdr 获取或设置任务完成起始地址 short TaskCompletedAdr { get; set; } Property Value short TaskExecutionAdr 获取或设置任务执行起始地址 short TaskExecutionAdr { get; set; } Property Value short WriteDataAdr 获取或设置数据写入起始地址 short WriteDataAdr { get; set; } Property Value short WriteTimeout 获取或设置写入超时时间（ms） short WriteTimeout { get; set; } Property Value short Methods Clone<T>() 泛型克隆方法，返回指定类型的克隆实例 T Clone<T>() where T : ICommunicationConfig Returns T 克隆后的实例 Type Parameters T 克隆实例的类型，必须实现 ICommunicationConfig 接口"
  },
  "api/MAS.SharedLibrary.Communication.IPlcCommServiceFactory.html": {
    "href": "api/MAS.SharedLibrary.Communication.IPlcCommServiceFactory.html",
    "title": "Interface IPlcCommServiceFactory | DataMaster",
    "summary": "Interface IPlcCommServiceFactory Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 创建不同的 PLC 通讯协议服务工厂接口 public interface IPlcCommServiceFactory : IDisposable Inherited Members IDisposable.Dispose() Methods Create(CommProtocol) 根据传入的协议枚举创建相应的通讯服务实例 PlcCommServiceWrapper Create(CommProtocol protocol) Parameters protocol CommProtocol 协议标识枚举 Returns PlcCommServiceWrapper 包含实现了 IPlcCommunicationService 接口的通讯服务及其依赖项的包装类 PlcCommServiceWrapper Remarks 根据协议标识枚举 protocol 创建一个新的通讯服务实例 如果存在相同配置的实例，则返回已存在的实例 Create(ICommunicationConfig) 根据指定的通讯配置创建或获取相应的通讯服务实例 PlcCommServiceWrapper Create(ICommunicationConfig config) Parameters config ICommunicationConfig 通讯服务的配置参数 Returns PlcCommServiceWrapper 包含实现了 IPlcCommunicationService 接口的通讯服务及其依赖项的包装类 PlcCommServiceWrapper Remarks 根据传入的通讯配置 config 创建一个新的通讯服务实例 如果存在相同配置的实例，则返回已存在的实例 Create(string) 根据传入的协议字符串创建或获取相应的通讯服务实例 PlcCommServiceWrapper Create(string protocol) Parameters protocol string 协议标识字符串 Returns PlcCommServiceWrapper 包含实现了 IPlcCommunicationService 接口的通讯服务及其依赖项的包装类 PlcCommServiceWrapper Remarks 根据协议标识字符串 protocol 创建一个新的通讯服务实例 如果已存在相同协议配置的实例，则返回已存在的实例 Exists(ICommunicationConfig) 检查指定的配置是否存在实例 bool Exists(ICommunicationConfig config) Parameters config ICommunicationConfig 协议参数配置 Returns bool 如果存在返回 true，否则 false Exists(string) 检查指定的键是否存在实例 bool Exists(string key) Parameters key string 用于查找 PlcCommServiceWrapper 实例的唯一键 Returns bool 如果存在返回 true，否则 false GetAllInstancesWithKeys() 获取所有已存在的 PlcCommServiceWrapper 实例及其对应的键 IEnumerable<KeyValuePair<string, PlcCommServiceWrapper>>? GetAllInstancesWithKeys() Returns IEnumerable<KeyValuePair<string, PlcCommServiceWrapper>> 返回包含所有已存在的 PlcCommServiceWrapper 实例及其对应键的只读集合，如果没有则返回null GetAllProtocolsStatus() 获取所有协议实例的状态信息 IEnumerable<ProtocolModelBase> GetAllProtocolsStatus() Returns IEnumerable<ProtocolModelBase> 协议状态信息集合 GetInstance(string) 根据唯一标识符获取已存在的 PlcCommServiceWrapper 实例 PlcCommServiceWrapper? GetInstance(string key) Parameters key string 用于查找 PlcCommServiceWrapper 实例的唯一键 Returns PlcCommServiceWrapper 如果找到对应的实例则返回该实例，否则返回 null RemoveProtocolAsync(string) 异步移除指定 Key 的协议实例 Task<bool> RemoveProtocolAsync(string key) Parameters key string 要移除的协议实例唯一 Key Returns Task<bool> 异步操作任务结果，如果移除成功返回 true，否则返回 false Events OnInstanceCreate 实例创建事件 event EventHandler<InstanceCreateEventArgs> OnInstanceCreate Event Type EventHandler<InstanceCreateEventArgs> OnInstanceExpiredRemove 实例过期移除事件 event EventHandler<InstanceExpiredRemovedEventArgs> OnInstanceExpiredRemove Event Type EventHandler<InstanceExpiredRemovedEventArgs> OnInstanceRemove 实例移除事件 event EventHandler<InstanceRemovedEventArgs> OnInstanceRemove Event Type EventHandler<InstanceRemovedEventArgs>"
  },
  "api/MAS.SharedLibrary.Communication.IPlcCommServiceWrapperManager.html": {
    "href": "api/MAS.SharedLibrary.Communication.IPlcCommServiceWrapperManager.html",
    "title": "Interface IPlcCommServiceWrapperManager | DataMaster",
    "summary": "Interface IPlcCommServiceWrapperManager Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 管理 PlcCommServiceWrapper 实例的管理器接口，负责跟踪所有通信服务包装类 public interface IPlcCommServiceWrapperManager Methods AddWrapper(PlcCommServiceWrapper) 添加一个 PLC 通信服务包装类 void AddWrapper(PlcCommServiceWrapper wrapper) Parameters wrapper PlcCommServiceWrapper 要添加的包装类 GetAllWrappers() 获取所有当前的 PLC 通信服务包装集合 IEnumerable<PlcCommServiceWrapper> GetAllWrappers() Returns IEnumerable<PlcCommServiceWrapper> 通讯服务包装类枚举 GetProtocol(string) 根据键获取协议实例 IProtocol? GetProtocol(string key) Parameters key string 协议实例的键 Returns IProtocol 对应的协议实例，如果不存在则返回 null GetWrapper(string) 根据键获取包装类实例 PlcCommServiceWrapper? GetWrapper(string key) Parameters key string 包装类实例的键 Returns PlcCommServiceWrapper 对应的包装类实例，如果不存在则返回 null RemoveWrapper(PlcCommServiceWrapper) 移除一个 PLC 通信服务包装类 void RemoveWrapper(PlcCommServiceWrapper wrapper) Parameters wrapper PlcCommServiceWrapper 要移除的包装类 Events WrappersUpdated 事件，通知包装类的添加或移除 event EventHandler<PlcCommServiceWrapperEventArgs>? WrappersUpdated Event Type EventHandler<PlcCommServiceWrapperEventArgs>"
  },
  "api/MAS.SharedLibrary.Communication.IPlcCommunicationService.html": {
    "href": "api/MAS.SharedLibrary.Communication.IPlcCommunicationService.html",
    "title": "Interface IPlcCommunicationService | DataMaster",
    "summary": "Interface IPlcCommunicationService Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll PLC 通讯服务接口 public interface IPlcCommunicationService : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties Id 获取或设置唯一标识符 Guid Id { get; set; } Property Value Guid Key 获取或设置协议实例的唯一键 string Key { get; set; } Property Value string Remarks S7协议： $\"{s7Config.Type}-{s7Config.Ip}-{s7Config.Rack}-{s7Config.Slot}\" MC协议： $\"{mcConfig.Ip}-{mcConfig.ProtocolFrame}-{mcConfig.Port}\" PlcCommConfig 获取 PLC 通讯配置 ICommunicationConfig PlcCommConfig { get; } Property Value ICommunicationConfig Methods ConnectToPlcAsync(CancellationToken) 异步建立与PLC的连接 Task<bool> ConnectToPlcAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，连接成功返回true，否则 false Exceptions OperationCanceledException 取消此操作时抛出此异常 DisconnectPlcAsync() 异步断开与PLC的连接，并清理必要的连接资源 Task DisconnectPlcAsync() Returns Task 异步操作任务结果 GetCommTaskHandlers() 获取所有通讯任务处理程序的列表 IEnumerable<IPlcTaskHandler> GetCommTaskHandlers() Returns IEnumerable<IPlcTaskHandler> 包含所有任务处理程序的枚举 GetInstanceStatus() 获取当前实例状态 ProtocolModelBase GetInstanceStatus() Returns ProtocolModelBase ProtocolModelBase 对象 StartPlcTaskAsync(CancellationToken) 异步启动通信任务 Task<bool> StartPlcTaskAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，启动成功返回true， 失败false Exceptions OperationCanceledException 取消此操作时抛出此异常 StopPlcTaskAsync(CancellationToken) 异步停止与PLC的通信任务 Task StopPlcTaskAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task 异步操作任务结果 Exceptions OperationCanceledException 取消此操作时抛出此异常 TestPlcConnectionAsync(CancellationToken) 异步测试PLC连接，成功后自动关闭 Task<bool> TestPlcConnectionAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，测试成功返回true，否则返回 false Remarks 如果手动取消，自行处理 OperationCanceledException 异常 Exceptions OperationCanceledException 取消此操作时抛出此异常 Events OnInstanceExpired 服务过期事件，表示闲置已达到设定时间 event EventHandler OnInstanceExpired Event Type EventHandler OnInstantMessageReceived 即时信息事件 event EventHandler<InstantMessageModel> OnInstantMessageReceived Event Type EventHandler<InstantMessageModel> OnNetworkDelay 更新通讯延时事件 event EventHandler<long> OnNetworkDelay Event Type EventHandler<long> Remarks 写入等待的时间，单位毫秒 OnPlcConnectionChanged PLC 连接状态改变事件 event EventHandler<PlcConnectionEventArgs> OnPlcConnectionChanged Event Type EventHandler<PlcConnectionEventArgs> OnPlcReconnected PLC 重连成功事件 event EventHandler OnPlcReconnected Event Type EventHandler OnTaskAbnormalStop 任务异常停止事件 event EventHandler OnTaskAbnormalStop Event Type EventHandler"
  },
  "api/MAS.SharedLibrary.Communication.IPlcTaskHandler.html": {
    "href": "api/MAS.SharedLibrary.Communication.IPlcTaskHandler.html",
    "title": "Interface IPlcTaskHandler | DataMaster",
    "summary": "Interface IPlcTaskHandler Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 任务处理程序公共接口，该接口可以根据从PLC读取的任务数据执行任务 public interface IPlcTaskHandler Properties FilePath 获取任务对应的文件路径 string FilePath { get; } Property Value string OffsetAddr 获取地址偏移 int OffsetAddr { get; } Property Value int TaskIndex 获取任务索引 short TaskIndex { get; } Property Value short TaskName 获取任务名称 string TaskName { get; } Property Value string Methods ExecuteTaskAsync(short[], object, CancellationToken) 异步执行任务 Task<bool> ExecuteTaskAsync(short[] lastReadTaskIndex, object taskModel, CancellationToken token = default) Parameters lastReadTaskIndex short[] 最后一次读取的任务索引 taskModel object 任务数据结构体 token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，是否成功处理任务 Exceptions OperationCanceledException 任务被取消时抛出 Events OnInstantMessageReceived 即时信息事件 event EventHandler<InstantMessageModel>? OnInstantMessageReceived Event Type EventHandler<InstantMessageModel>"
  },
  "api/MAS.SharedLibrary.Communication.IProtocol.html": {
    "href": "api/MAS.SharedLibrary.Communication.IProtocol.html",
    "title": "Interface IProtocol | DataMaster",
    "summary": "Interface IProtocol Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 所有通信协议的统一接口 public interface IProtocol : IDisposable Inherited Members IDisposable.Dispose() Properties Configuration 获取通讯配置 ICommunicationConfig Configuration { get; } Property Value ICommunicationConfig InstanceId 获取协议实例的唯一标识符 string InstanceId { get; } Property Value string ProtocolType 获取协议类型 CommProtocol ProtocolType { get; } Property Value CommProtocol Methods CheckPlcConnection() 检查PLC连接状态 bool CheckPlcConnection() Returns bool 连接活跃返回true，否则返回false ConnectToPlcAsync(CancellationToken) 异步连接到PLC设备 Task ConnectToPlcAsync(CancellationToken cts = default) Parameters cts CancellationToken 取消令牌 Returns Task 异步操作任务结果 Exceptions OperationCanceledException PlcConnectionException DisconnectFromPlc() 关闭PLC连接 void DisconnectFromPlc() ReadStructAsync(Type, int, CancellationToken) 异步从PLC读取结构体数据 Task<object?> ReadStructAsync(Type structType, int startAddress, CancellationToken cts = default) Parameters structType Type 结构体类型 startAddress int 起始地址 cts CancellationToken 取消令牌 Returns Task<object> 异步操作任务结果，返回结构体数据 Exceptions OperationCanceledException PlcReadErrorException ReadStructAsync<T>(int, CancellationToken) 异步从PLC读取结构体数据 Task<T?> ReadStructAsync<T>(int startAddress, CancellationToken cts = default) where T : struct Parameters startAddress int 起始地址 cts CancellationToken 取消令牌 Returns Task<T?> 异步操作任务结果，返回结构体数据 Type Parameters T 结构体类型 Exceptions OperationCanceledException PlcReadErrorException TestPlcConnectionAsync(CancellationToken) 异步测试PLC连接，成功后自动关闭 Task TestPlcConnectionAsync(CancellationToken cts = default) Parameters cts CancellationToken 取消令牌 Returns Task 异步操作任务结果 Remarks 如果手动取消，自行处理 OperationCanceledException 异常 Exceptions OperationCanceledException PlcConnectionException TryReconnectToPlcAsync(int, short, CancellationToken) 异步尝试重连到PLC Task<bool> TryReconnectToPlcAsync(int maxAttempts, short awaitTime = 1000, CancellationToken cts = default) Parameters maxAttempts int 最多尝试次数 awaitTime short 等待时间（毫秒） cts CancellationToken 取消令牌 Returns Task<bool> 成功连接则返回 true，否则返回 false Remarks 在中途断线时调用此方法将尝试重连接 Exceptions OperationCanceledException TryReconnectToPlcAsync(CancellationToken) 异步尝试重连到PLC Task<bool> TryReconnectToPlcAsync(CancellationToken cts = default) Parameters cts CancellationToken 取消令牌 Returns Task<bool> 成功连接则返回 true，否则返回 false Remarks 在中途断线时调用此方法将尝试重连接 WriteStructAsync(object, int, CancellationToken) 异步写入结构体数据到PLC Task WriteStructAsync(object structValue, int startAddress, CancellationToken cts = default) Parameters structValue object 结构体值 startAddress int 起始地址 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果 Exceptions OperationCanceledException PlcWriteErrorException"
  },
  "api/MAS.SharedLibrary.Communication.InstanceCreateEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Communication.InstanceCreateEventArgs.html",
    "title": "Class InstanceCreateEventArgs | DataMaster",
    "summary": "Class InstanceCreateEventArgs Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 实例创建事件参数 public class InstanceCreateEventArgs : EventArgs, IInstanceCreateEventArgs Inheritance object EventArgs InstanceCreateEventArgs Implements IInstanceCreateEventArgs Derived McInstanceCreateEventArgs S7InstanceCreateEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceCreateEventArgs(ProtocolModelBase, JObject) 实例创建事件参数 public InstanceCreateEventArgs(ProtocolModelBase model, JObject config) Parameters model ProtocolModelBase 创建的实例对象 config JObject 实例配置对象 Properties Config 获取配置对象 public JObject Config { get; } Property Value JObject Key 获取标识键 public string Key { get; } Property Value string Model 获取创建的实例对象 public ProtocolModelBase Model { get; } Property Value ProtocolModelBase"
  },
  "api/MAS.SharedLibrary.Communication.InstanceExpiredRemovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Communication.InstanceExpiredRemovedEventArgs.html",
    "title": "Class InstanceExpiredRemovedEventArgs | DataMaster",
    "summary": "Class InstanceExpiredRemovedEventArgs Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 实例过期移除事件参数 public class InstanceExpiredRemovedEventArgs : EventArgs, IInstanceExpiredRemovedEventArgs Inheritance object EventArgs InstanceExpiredRemovedEventArgs Implements IInstanceExpiredRemovedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceExpiredRemovedEventArgs(string) 实例过期移除事件参数 public InstanceExpiredRemovedEventArgs(string key) Parameters key string 移除的实例的唯一键 Properties Key 获取过期移除的实例的唯一键 public string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Communication.InstanceRemovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Communication.InstanceRemovedEventArgs.html",
    "title": "Class InstanceRemovedEventArgs | DataMaster",
    "summary": "Class InstanceRemovedEventArgs Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 实例移除事件参数 public class InstanceRemovedEventArgs : EventArgs, IInstanceRemovedEventArgs Inheritance object EventArgs InstanceRemovedEventArgs Implements IInstanceRemovedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceRemovedEventArgs(string) 实例移除事件参数 public InstanceRemovedEventArgs(string key) Parameters key string 移除的实例的唯一键 Properties Key 获取移除的实例的唯一键 public string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Communication.McProtocols.IMcCommunicationConfig.html": {
    "href": "api/MAS.SharedLibrary.Communication.McProtocols.IMcCommunicationConfig.html",
    "title": "Interface IMcCommunicationConfig | DataMaster",
    "summary": "Interface IMcCommunicationConfig Namespace MAS.SharedLibrary.Communication.McProtocols Assembly MAS.SharedLibrary.dll MC 协议参数配置接口 public interface IMcCommunicationConfig : ICommunicationConfig, ICloneable Inherited Members ICommunicationConfig.ProtocolName ICommunicationConfig.Ip ICommunicationConfig.HeartbeatInterval ICommunicationConfig.RunSleepTime ICommunicationConfig.ExecutionMode ICommunicationConfig.MaxRetries ICommunicationConfig.ExpirationTime ICommunicationConfig.ActiveThreshold ICommunicationConfig.IsAutoClear ICommunicationConfig.ReadTimeout ICommunicationConfig.WriteTimeout ICommunicationConfig.ExecutionTimeout ICommunicationConfig.TaskExecutionAdr ICommunicationConfig.TaskCompletedAdr ICommunicationConfig.ReadDataAdr ICommunicationConfig.WriteDataAdr ICommunicationConfig.Build ICommunicationConfig.Clone<T>() ICloneable.Clone() Properties BitAddressRange 获取或设置位地址范围 int BitAddressRange { get; set; } Property Value int BitReceiveRegister 获取或设置接收位信号使用的寄存器类型 string BitReceiveRegister { get; set; } Property Value string BitReceiveStartAddress 获取或设置接收位信号寄存器的起始地址 int BitReceiveStartAddress { get; set; } Property Value int BitSendRegister 获取或设置发送位信号使用的寄存器类型 string BitSendRegister { get; set; } Property Value string BitSendStartAddress 获取或设置发送位信号寄存器的起始地址 int BitSendStartAddress { get; set; } Property Value int Port 获取或设置端口 short Port { get; set; } Property Value short ProtocolFrame 获取或设置协议帧 string ProtocolFrame { get; set; } Property Value string WordAddressRange 获取或设置字地址范围 int WordAddressRange { get; set; } Property Value int WordReceiveRegister 获取或设置接收字信号使用的寄存器类型 string WordReceiveRegister { get; set; } Property Value string WordReceiveStartAddress 获取或设置接收字信号寄存器的起始地址 int WordReceiveStartAddress { get; set; } Property Value int WordSendRegister 获取或设置发送字信号使用的寄存器类型 string WordSendRegister { get; set; } Property Value string WordSendStartAddress 获取或设置发送字信号寄存器的起始地址 int WordSendStartAddress { get; set; } Property Value int"
  },
  "api/MAS.SharedLibrary.Communication.McProtocols.IMcProtocol.html": {
    "href": "api/MAS.SharedLibrary.Communication.McProtocols.IMcProtocol.html",
    "title": "Interface IMcProtocol | DataMaster",
    "summary": "Interface IMcProtocol Namespace MAS.SharedLibrary.Communication.McProtocols Assembly MAS.SharedLibrary.dll 与三菱 MC 协议的 PLC 设备进行通信的接口 public interface IMcProtocol : IProtocol, IDisposable Inherited Members IProtocol.InstanceId IProtocol.ProtocolType IProtocol.Configuration IProtocol.ConnectToPlcAsync(CancellationToken) IProtocol.TestPlcConnectionAsync(CancellationToken) IProtocol.ReadStructAsync(Type, int, CancellationToken) IProtocol.ReadStructAsync<T>(int, CancellationToken) IProtocol.WriteStructAsync(object, int, CancellationToken) IProtocol.CheckPlcConnection() IProtocol.TryReconnectToPlcAsync(CancellationToken) IProtocol.TryReconnectToPlcAsync(int, short, CancellationToken) IProtocol.DisconnectFromPlc() IDisposable.Dispose() Methods ReadBitsAsync(string, int, int, CancellationToken) 异步从PLC读取位数据 Task<bool[]> ReadBitsAsync(string deviceType, int startAddress, int length, CancellationToken cts = default) Parameters deviceType string 指定设备类型 startAddress int 起始地址 length int 要读取的位的数量 cts CancellationToken 取消令牌 Returns Task<bool[]> 异步操作任务结果，包含读取位状态的布尔值数组 Exceptions OperationCanceledException PlcReadErrorException ReadWordsAsync(string, int, int, CancellationToken) 异步从PLC读取字数据 Task<short[]> ReadWordsAsync(string deviceType, int startAddress, int length, CancellationToken cts = default) Parameters deviceType string 指定设备类型 startAddress int 起始地址 length int 要读取的数据长度 cts CancellationToken 取消令牌 Returns Task<short[]> 异步操作任务结果，包含读取值的整数数组 Exceptions OperationCanceledException PlcReadErrorException ReadWordsAsync<T>(string, int, int, CancellationToken) 异步从PLC读取字数据 Task<T[]> ReadWordsAsync<T>(string deviceType, int startAddress, int length, CancellationToken cts = default) Parameters deviceType string 指定设备类型 startAddress int 起始地址 length int 要读取的数据长度 cts CancellationToken 取消令牌 Returns Task<T[]> 异步操作任务结果，包含读取值的泛型数组 Type Parameters T 数据类型： short、int、float、double Exceptions OperationCanceledException PlcReadErrorException WriteBitsAsync(string, int, bool[], CancellationToken) 异步写入位数据到PLC Task WriteBitsAsync(string deviceType, int startAddress, bool[] values, CancellationToken cts = default) Parameters deviceType string 指定设备类型 startAddress int 起始地址 values bool[] 要写入的布尔值数组，表示位状态 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果 Exceptions OperationCanceledException PlcWriteErrorException WriteWordsAsync(string, int, short[], CancellationToken) 异步写入字数据到PLC Task WriteWordsAsync(string deviceType, int startAddress, short[] values, CancellationToken cts = default) Parameters deviceType string 指定设备类型 startAddress int 起始地址 values short[] 要写入的整数数组 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果 Exceptions OperationCanceledException PlcWriteErrorException WriteWordsAsync<T>(string, int, T[], CancellationToken) 异步写入字数据到PLC Task WriteWordsAsync<T>(string deviceType, int startAddress, T[] values, CancellationToken cts = default) Parameters deviceType string 指定设备类型 startAddress int 起始地址 values T[] 要写入的数据数组 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果 Type Parameters T 数据类型： short、int、float、double Exceptions OperationCanceledException PlcWriteErrorException"
  },
  "api/MAS.SharedLibrary.Communication.McProtocols.McInstanceCreateEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Communication.McProtocols.McInstanceCreateEventArgs.html",
    "title": "Class McInstanceCreateEventArgs | DataMaster",
    "summary": "Class McInstanceCreateEventArgs Namespace MAS.SharedLibrary.Communication.McProtocols Assembly MAS.SharedLibrary.dll 实例创建事件参数 public sealed class McInstanceCreateEventArgs : InstanceCreateEventArgs, IInstanceCreateEventArgs Inheritance object EventArgs InstanceCreateEventArgs McInstanceCreateEventArgs Implements IInstanceCreateEventArgs Inherited Members InstanceCreateEventArgs.Model InstanceCreateEventArgs.Key InstanceCreateEventArgs.Config EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks 派生自 InstanceCreateEventArgs Constructors McInstanceCreateEventArgs(McProtocolStatusModel, JObject) 实例创建事件参数 public McInstanceCreateEventArgs(McProtocolStatusModel model, JObject config) Parameters model McProtocolStatusModel config JObject Remarks 派生自 InstanceCreateEventArgs Properties McModel 获取创建的实例对象 public McProtocolStatusModel McModel { get; } Property Value McProtocolStatusModel"
  },
  "api/MAS.SharedLibrary.Communication.McProtocols.McProtocolStatusModel.html": {
    "href": "api/MAS.SharedLibrary.Communication.McProtocols.McProtocolStatusModel.html",
    "title": "Class McProtocolStatusModel | DataMaster",
    "summary": "Class McProtocolStatusModel Namespace MAS.SharedLibrary.Communication.McProtocols Assembly MAS.SharedLibrary.dll 表示 MC 协议实例的状态信息数据模型 public class McProtocolStatusModel : ProtocolModelBase Inheritance object ProtocolModelBase McProtocolStatusModel Inherited Members ProtocolModelBase.Id ProtocolModelBase.Key ProtocolModelBase.Ip ProtocolModelBase.LastUsed ProtocolModelBase.IsActive ProtocolModelBase.IsConnect object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Port 获取或设置端口 public short Port { get; set; } Property Value short ProtocolFrame 获取或设置协议帧 public string ProtocolFrame { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Communication.McProtocols.MitsubishiStringAttribute.html": {
    "href": "api/MAS.SharedLibrary.Communication.McProtocols.MitsubishiStringAttribute.html",
    "title": "Class MitsubishiStringAttribute | DataMaster",
    "summary": "Class MitsubishiStringAttribute Namespace MAS.SharedLibrary.Communication.McProtocols Assembly MAS.SharedLibrary.dll 用于表示一个字符串字段在三菱 PLC 寄存器 D 中的映射 [AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)] public class MitsubishiStringAttribute : Attribute Inheritance object Attribute MitsubishiStringAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MitsubishiStringAttribute(int) 用于表示一个字符串字段在三菱 PLC 寄存器 D 中的映射 public MitsubishiStringAttribute(int length) Parameters length int 指定字段映射的字符串长度（以字符为单位） Properties Length 获取该字段对应的字符串长度（以字符为单位） public int Length { get; } Property Value int"
  },
  "api/MAS.SharedLibrary.Communication.McProtocols.html": {
    "href": "api/MAS.SharedLibrary.Communication.McProtocols.html",
    "title": "Namespace MAS.SharedLibrary.Communication.McProtocols | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Communication.McProtocols Classes McInstanceCreateEventArgs 实例创建事件参数 McProtocolStatusModel 表示 MC 协议实例的状态信息数据模型 MitsubishiStringAttribute 用于表示一个字符串字段在三菱 PLC 寄存器 D 中的映射 Interfaces IMcCommunicationConfig MC 协议参数配置接口 IMcProtocol 与三菱 MC 协议的 PLC 设备进行通信的接口"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.IMonitoredItemSettings.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.IMonitoredItemSettings.html",
    "title": "Interface IMonitoredItemSettings | DataMaster",
    "summary": "Interface IMonitoredItemSettings Namespace MAS.SharedLibrary.Communication.OpcUa Assembly MAS.SharedLibrary.dll 监视项配置参数设置接口 public interface IMonitoredItemSettings Properties AttributeId 获取被监视的属性ID，仅在初始化时可设置 uint AttributeId { get; init; } Property Value uint Remarks 用于指定节点的哪一个属性（如Value, Quality, Timestamp）需要被监视 DiscardOldest 获取是否丢弃最旧的数据，仅在初始化时可设置 bool DiscardOldest { get; init; } Property Value bool Remarks 如果队列满了，则是否应丢弃最旧的数据项以保存新的变化。这通常在数据的实时性比历史完整性更重要的场合中设为true MonitoringMode 获取监视模式，仅在初始化时可设置 MonitoringMode MonitoringMode { get; init; } Property Value MonitoringMode Remarks 定义如何监视节点，例如，是连续的还是按需的。连续监视会实时报告所有变化，按需监视则可能只在特定条件下报告 NodeId 获取被监视节点的标识符，仅在初始化时可设置 string NodeId { get; init; } Property Value string Remarks 这个标识符用于指定哪一个服务器节点的数据变化需要被监视 QueueSize 获取队列大小，仅在初始化时可设置 uint QueueSize { get; init; } Property Value uint Remarks 指定在客户端能够接收之前，服务器端可以缓存多少个变化的值 SamplingInterval 获取采样间隔/ms，仅在初始化时可设置 int SamplingInterval { get; init; } Property Value int Remarks 指定服务器检查节点属性变化的频率，频率越高，数据的实时性越好，但网络和服务器的负载也越大"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.IOpcAdvancedSubscription.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.IOpcAdvancedSubscription.html",
    "title": "Interface IOpcAdvancedSubscription | DataMaster",
    "summary": "Interface IOpcAdvancedSubscription Namespace MAS.SharedLibrary.Communication.OpcUa Assembly MAS.SharedLibrary.dll 处理OPC UA的高级订阅功能，包括事件和报警订阅 public interface IOpcAdvancedSubscription Methods SubscribeToAlarms(string, Action<object>) 订阅特定节点的报警 void SubscribeToAlarms(string nodeId, Action<object> callback) Parameters nodeId string 节点的标识符 callback Action<object> 当报警发生时的回调函数 SubscribeToEvents(string, Action<object>) 订阅特定节点的事件 void SubscribeToEvents(string nodeId, Action<object> callback) Parameters nodeId string 节点的标识符 callback Action<object> 当事件发生时的回调函数"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.IOpcSecurity.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.IOpcSecurity.html",
    "title": "Interface IOpcSecurity | DataMaster",
    "summary": "Interface IOpcSecurity Namespace MAS.SharedLibrary.Communication.OpcUa Assembly MAS.SharedLibrary.dll OPC UA安全连接和用户认证接口 public interface IOpcSecurity Methods AuthenticateUser(string, string) 认证用户，提供用户名和密码 void AuthenticateUser(string username, string password) Parameters username string 用户名 password string 密码 ConfigureSecurity(string, string) 配置安全连接，包括证书和私钥 void ConfigureSecurity(string certificatePath, string privateKeyPath) Parameters certificatePath string 证书文件路径 privateKeyPath string 私钥文件路径"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.IOpcSessionManagement.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.IOpcSessionManagement.html",
    "title": "Interface IOpcSessionManagement | DataMaster",
    "summary": "Interface IOpcSessionManagement Namespace MAS.SharedLibrary.Communication.OpcUa Assembly MAS.SharedLibrary.dll 会话管理功能，包括会话恢复和保活 public interface IOpcSessionManagement Methods KeepAlive() 保持连接活跃，防止会话超时 void KeepAlive() RestoreSession() 恢复之前的会话 void RestoreSession()"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.IOpcUaClient.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.IOpcUaClient.html",
    "title": "Interface IOpcUaClient | DataMaster",
    "summary": "Interface IOpcUaClient Namespace MAS.SharedLibrary.Communication.OpcUa Assembly MAS.SharedLibrary.dll Opc 客户端接口 public interface IOpcUaClient Methods DisconnectAsync() 异步断开与OPC UA服务器的连接 Task DisconnectAsync() Returns Task InitializeAsync(string, bool) 异步初始化OPC UA客户端并连接到指定的服务器 Task InitializeAsync(string serverUrl, bool isUseSecurity) Parameters serverUrl string 服务器的URL地址 isUseSecurity bool 是否使用安全连接 Returns Task IsConnected() 检查客户端是否已成功连接到服务器 bool IsConnected() Returns bool 如果连接成功返回true，否则返回false ReadNodeAsync(string) 异步读取指定节点的值 Task<object> ReadNodeAsync(string nodeId) Parameters nodeId string 节点的标识符 Returns Task<object> 异步操作的任务结果，读取到节点的值 SetupAsync() 异步设置并初始化所有必要的配置 Task SetupAsync() Returns Task Exceptions InvalidOperationException 证书无效时抛出 SubscribeToDataChange(Action<object>) 订阅指定节点的数据变化 void SubscribeToDataChange(Action<object> callback) Parameters callback Action<object> 数据变化时的回调函数 SubscribeToDataChange(Func<object, Task>) 订阅指定节点的数据变化 void SubscribeToDataChange(Func<object, Task> callback) Parameters callback Func<object, Task> 数据变化时的异步回调函数 WriteNodeAsync(string, object, CancellationToken) 异步向指定节点写入值 Task WriteNodeAsync(string nodeId, object value, CancellationToken ct = default) Parameters nodeId string 节点的标识符 value object 要写入的值 ct CancellationToken 取消令牌 Returns Task"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.ISubscriptionSettings.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.ISubscriptionSettings.html",
    "title": "Interface ISubscriptionSettings | DataMaster",
    "summary": "Interface ISubscriptionSettings Namespace MAS.SharedLibrary.Communication.OpcUa Assembly MAS.SharedLibrary.dll 订阅配置参数设置接口 public interface ISubscriptionSettings Properties DisplayName 获取订阅的名称，仅在初始化时可设置 string DisplayName { get; init; } Property Value string Remarks 主要用于调试和日志记录，帮助开发者识别和区分不同的订阅 KeepAliveCount 获取保持活跃的值，仅在初始化时可设置 uint KeepAliveCount { get; init; } Property Value uint Remarks 指定在没有任何数据变化时，服务器应该多少个发布周期发送一次保活消息。这是为了让客户端知道订阅仍然活跃 LifetimeCount 获取删除订阅的值，仅在初始化时可设置 uint LifetimeCount { get; init; } Property Value uint Remarks 如果在这么多个发布周期内，客户端没有向服务器发送任何请求，则认为该客户端已断开连接，服务器可能会删除此订阅。通常这个值比KeepAliveCount大 MaxNotificationsPerPublish 获取最大通知数量，仅在初始化时可设置 uint MaxNotificationsPerPublish { get; init; } Property Value uint Remarks 定义每次发布时服务器可以发送的最大通知数量。这有助于控制网络流量和数据处理的负载 Priority 获取优先级，仅在初始化时可设置 byte Priority { get; init; } Property Value byte Remarks 在资源有限的情况下，优先级高的订阅比优先级低的订阅更有可能接收到数据 PublishingEnabled 获取是否激活该订阅的值，仅在初始化时可设置 bool PublishingEnabled { get; init; } Property Value bool Remarks 如果设置为false，订阅将存在但不会发送任何通知 PublishingInterval 获取发布周期的时间间隔/ms，仅在初始化时可设置 int PublishingInterval { get; init; } Property Value int Remarks 这个值指定了客户端希望服务器多久推送一次更新的数据"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.OpcNodeInfo.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.OpcNodeInfo.html",
    "title": "Class OpcNodeInfo | DataMaster",
    "summary": "Class OpcNodeInfo Namespace MAS.SharedLibrary.Communication.OpcUa Assembly MAS.SharedLibrary.dll OPC 节点信息数据模型 public class OpcNodeInfo Inheritance object OpcNodeInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BrowseName 获取或设置浏览名称 public string BrowseName { get; set; } Property Value string Children 获取或设置子节点列表 public List<OpcNodeInfo> Children { get; set; } Property Value List<OpcNodeInfo> DataType 获取或设置数据类型 public string DataType { get; set; } Property Value string DisplayName 获取或设置显示的名称 public string DisplayName { get; set; } Property Value string NodeId 获取或设置节点ID public string NodeId { get; set; } Property Value string Status 获取或设置当前状态 public string Status { get; set; } Property Value string Value 获取或设置当前值 public string Value { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Communication.OpcUa.html": {
    "href": "api/MAS.SharedLibrary.Communication.OpcUa.html",
    "title": "Namespace MAS.SharedLibrary.Communication.OpcUa | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Communication.OpcUa Classes OpcNodeInfo OPC 节点信息数据模型 Interfaces IMonitoredItemSettings 监视项配置参数设置接口 IOpcAdvancedSubscription 处理OPC UA的高级订阅功能，包括事件和报警订阅 IOpcSecurity OPC UA安全连接和用户认证接口 IOpcSessionManagement 会话管理功能，包括会话恢复和保活 IOpcUaClient Opc 客户端接口 ISubscriptionSettings 订阅配置参数设置接口"
  },
  "api/MAS.SharedLibrary.Communication.PlcCommServiceWrapper.html": {
    "href": "api/MAS.SharedLibrary.Communication.PlcCommServiceWrapper.html",
    "title": "Class PlcCommServiceWrapper | DataMaster",
    "summary": "Class PlcCommServiceWrapper Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 用于存储通信服务及其依赖项的包装类 public class PlcCommServiceWrapper Inheritance object PlcCommServiceWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlcCommServiceWrapper(string, IProtocol, IPlcCommunicationService, ICommCompilationService) 用于存储通信服务及其依赖项的包装类 public PlcCommServiceWrapper(string key, IProtocol protocol, IPlcCommunicationService service, ICommCompilationService commCompilationService) Parameters key string protocol IProtocol service IPlcCommunicationService commCompilationService ICommCompilationService Properties CommCompilationService 获取动态加载服务 public ICommCompilationService CommCompilationService { get; } Property Value ICommCompilationService Key 获取包装实例标识键 public string Key { get; } Property Value string PlcCommService 获取通讯服务 public IPlcCommunicationService PlcCommService { get; } Property Value IPlcCommunicationService Protocol 获取协议实例 public IProtocol Protocol { get; } Property Value IProtocol"
  },
  "api/MAS.SharedLibrary.Communication.PlcCommServiceWrapperEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Communication.PlcCommServiceWrapperEventArgs.html",
    "title": "Class PlcCommServiceWrapperEventArgs | DataMaster",
    "summary": "Class PlcCommServiceWrapperEventArgs Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll PLC 通信服务包装类更新事件参数 public class PlcCommServiceWrapperEventArgs Inheritance object PlcCommServiceWrapperEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlcCommServiceWrapperEventArgs(IEnumerable<PlcCommServiceWrapper>, IEnumerable<PlcCommServiceWrapper>) PLC 通信服务包装类更新事件参数 public PlcCommServiceWrapperEventArgs(IEnumerable<PlcCommServiceWrapper> added, IEnumerable<PlcCommServiceWrapper> removed) Parameters added IEnumerable<PlcCommServiceWrapper> removed IEnumerable<PlcCommServiceWrapper> Properties AddedWrappers 获取在事件中新增的 PLC 通信服务包装对象集合 public IEnumerable<PlcCommServiceWrapper> AddedWrappers { get; } Property Value IEnumerable<PlcCommServiceWrapper> RemovedWrappers 获取在事件中移除的 PLC 通信服务包装对象集合 public IEnumerable<PlcCommServiceWrapper> RemovedWrappers { get; } Property Value IEnumerable<PlcCommServiceWrapper>"
  },
  "api/MAS.SharedLibrary.Communication.PlcConnectionEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Communication.PlcConnectionEventArgs.html",
    "title": "Class PlcConnectionEventArgs | DataMaster",
    "summary": "Class PlcConnectionEventArgs Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll PLC连接状态改变时的事件参数 public class PlcConnectionEventArgs Inheritance object PlcConnectionEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlcConnectionEventArgs(bool) PLC连接状态改变时的事件参数 public PlcConnectionEventArgs(bool isConnected) Parameters isConnected bool PLC 当前的连接状态 Properties IsConnected 获取连接状态是否活跃 public bool IsConnected { get; } Property Value bool"
  },
  "api/MAS.SharedLibrary.Communication.ProtocolModelBase.html": {
    "href": "api/MAS.SharedLibrary.Communication.ProtocolModelBase.html",
    "title": "Class ProtocolModelBase | DataMaster",
    "summary": "Class ProtocolModelBase Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 协议数据模型基础抽象类 public abstract class ProtocolModelBase Inheritance object ProtocolModelBase Derived McProtocolStatusModel S7ProtocolStatusModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id 获取或设置唯一标识符Guid public Guid Id { get; set; } Property Value Guid Ip 获取或设置 ip 地址 public string Ip { get; set; } Property Value string IsActive 获取或设置是否活跃 public bool IsActive { get; set; } Property Value bool IsConnect 获取或设置是否连接 public bool IsConnect { get; set; } Property Value bool Key 获取或设置协议实例的唯一键 public string Key { get; set; } Property Value string LastUsed 获取或设置最后使用时间 public DateTime LastUsed { get; set; } Property Value DateTime"
  },
  "api/MAS.SharedLibrary.Communication.S7Protocols.IS7CommunicationConfig.html": {
    "href": "api/MAS.SharedLibrary.Communication.S7Protocols.IS7CommunicationConfig.html",
    "title": "Interface IS7CommunicationConfig | DataMaster",
    "summary": "Interface IS7CommunicationConfig Namespace MAS.SharedLibrary.Communication.S7Protocols Assembly MAS.SharedLibrary.dll S7 通讯参数配置接口 public interface IS7CommunicationConfig : ICommunicationConfig, ICloneable Inherited Members ICommunicationConfig.ProtocolName ICommunicationConfig.Ip ICommunicationConfig.HeartbeatInterval ICommunicationConfig.RunSleepTime ICommunicationConfig.ExecutionMode ICommunicationConfig.MaxRetries ICommunicationConfig.ExpirationTime ICommunicationConfig.ActiveThreshold ICommunicationConfig.IsAutoClear ICommunicationConfig.ReadTimeout ICommunicationConfig.WriteTimeout ICommunicationConfig.ExecutionTimeout ICommunicationConfig.TaskExecutionAdr ICommunicationConfig.TaskCompletedAdr ICommunicationConfig.ReadDataAdr ICommunicationConfig.WriteDataAdr ICommunicationConfig.Build ICommunicationConfig.Clone<T>() ICloneable.Clone() Properties Rack 获取或设置机架 short Rack { get; set; } Property Value short Slot 获取或设置插槽 short Slot { get; set; } Property Value short Type 获取或设置型号 string Type { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Communication.S7Protocols.IS7Protocol.html": {
    "href": "api/MAS.SharedLibrary.Communication.S7Protocols.IS7Protocol.html",
    "title": "Interface IS7Protocol | DataMaster",
    "summary": "Interface IS7Protocol Namespace MAS.SharedLibrary.Communication.S7Protocols Assembly MAS.SharedLibrary.dll 与西门子S7设备进行通信的接口 public interface IS7Protocol : IProtocol, IDisposable Inherited Members IProtocol.InstanceId IProtocol.ProtocolType IProtocol.Configuration IProtocol.ConnectToPlcAsync(CancellationToken) IProtocol.TestPlcConnectionAsync(CancellationToken) IProtocol.ReadStructAsync(Type, int, CancellationToken) IProtocol.ReadStructAsync<T>(int, CancellationToken) IProtocol.WriteStructAsync(object, int, CancellationToken) IProtocol.CheckPlcConnection() IProtocol.TryReconnectToPlcAsync(CancellationToken) IProtocol.TryReconnectToPlcAsync(int, short, CancellationToken) IProtocol.DisconnectFromPlc() IDisposable.Dispose() Methods ReadAsync(DataType, int, int, VarType, int, CancellationToken) 异步读取解码 Task<object?> ReadAsync(DataType dataType, int db, int startByteAdr, VarType varType, int varCount, CancellationToken cts = default) Parameters dataType DataType 数据类型 db int 数据块编号 startByteAdr int 起始字节地址 varType VarType 要转换字节的数据类型 varCount int 要读取的变量数量 cts CancellationToken 取消令牌 Returns Task<object> 异步操作任务结果，读取的数据对象，由调用方处理可能发生的异常 Remarks 这个方法适用于需要根据特定的数据类型进行数据交换的场合，当需要读取特定类型的数据（整数、实数等）到PLC的数据块时，可以自动处理数据类型的转换 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 ReadBytesAsync(DataType, int, int, int, CancellationToken) 异步从PLC读取字数据 Task<byte[]> ReadBytesAsync(DataType dataType, int db, int startByteAdr, int count, CancellationToken cts = default) Parameters dataType DataType 数据类型 db int 数据块编号 startByteAdr int 起始字节地址 count int 读取的字节数 cts CancellationToken 取消令牌 Returns Task<byte[]> 异步操作任务结果，读取到的字节数组，由调用方处理可能发生的异常 Remarks 这个方法适用于当系统需要直接处理或分析来自特定PLC内存区域的字节流，或者处理未经封装的简单数据类型时使用 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 ReadClassAsync(object, int, int, CancellationToken) 异步从PLC读取数据到C#类的实例 Task ReadClassAsync(object sourceClass, int db, int startByteAdr = 0, CancellationToken cts = default) Parameters sourceClass object 要填充数据的类的实例 db int 数据块编号 startByteAdr int 起始字节地址，默认为0 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Remarks 这个方法适用于将数据块中的数据直接读入一个已定义的C#类中，处理复杂的数据结构 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 ReadMultipleVarsAsync(List<DataItem>, CancellationToken) 异步从PLC读取多个变量 Task ReadMultipleVarsAsync(List<DataItem> dataItems, CancellationToken cts = default) Parameters dataItems List<DataItem> 包含要读取的所有数据项信息的列表 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Remarks 这个方法适用于当需要在一个操作中读取多个不同的变量时使用，这些变量分布在不同的数据块或者地址，减少网络通信的次数 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 ReadStructAsync(Type, int, int, CancellationToken) 异步读取PLC中的结构体数据 Task<object?> ReadStructAsync(Type structType, int db, int startByteAdr = 0, CancellationToken cts = default) Parameters structType Type 结构体类型 db int 数据块编号 startByteAdr int 起始字节地址，默认为0 cts CancellationToken 取消令牌 Returns Task<object> 异步操作任务结果，读取的结构体数据，由调用方处理可能发生的异常 Remarks 这个方法适用于需要将PLC中的数据块映射到C#中的结构体 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 ReadStructAsync<T>(int, int, CancellationToken) 异步读取PLC中的结构体数据 Task<T?> ReadStructAsync<T>(int db, int startByteAdr = 0, CancellationToken cts = default) where T : struct Parameters db int 数据块编号 startByteAdr int 起始字节地址，默认为0 cts CancellationToken 取消令牌 Returns Task<T?> 异步操作任务结果，读取的结构体数据，由调用方处理可能发生的异常 Type Parameters T 结构体类型 Remarks 这个方法适用于需要将PLC中的数据块映射到C#中的结构体 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 WriteAsync(DataType, int, int, object, CancellationToken) 异步写入解码 Task WriteAsync(DataType dataType, int db, int startByteAdr, object value, CancellationToken cts = default) Parameters dataType DataType 数据类型 db int 数据块编号 startByteAdr int 起始字节地址 value object 要写入的数据对象，它可以是单个值或数组 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Remarks 这个方法适用于需要根据特定的数据类型进行数据交换的场合，当需要写入特定类型的数据（整数、实数等）到PLC的数据块时，可以自动处理数据类型的转换 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 WriteBytesAsync(DataType, int, int, byte[], CancellationToken) 异步写入字数据到PLC Task WriteBytesAsync(DataType dataType, int db, int startByteAdr, byte[] value, CancellationToken cts = default) Parameters dataType DataType 数据类型 db int 数据块编号 startByteAdr int 起始字节地址 value byte[] 要写入的字节数组 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Remarks 这个方法常用于低级别的数据写入操作，将字节数据直接写入PLC的指定数据块，设置PLC的配置参数或更新固件等 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 WriteClassAsync(object, int, int, CancellationToken) 异步将C#类的实例数据写入PLC Task WriteClassAsync(object classValue, int db, int startByteAdr = 0, CancellationToken cts = default) Parameters classValue object 包含数据的类的实例 db int 数据块编号 startByteAdr int 起始字节地址，默认为0 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Remarks 这个方法适用于通过将C#类实例的数据写入到PLC，处理复杂的数据结构 Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 WriteMultipleVarsAsync(List<DataItem>) 异步向PLC写入多个变量 Task WriteMultipleVarsAsync(List<DataItem> dataItems) Parameters dataItems List<DataItem> 包含要写入的所有数据项信息的列表 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Remarks 这个方法适用于当需要在一个操作中写入多个不同的变量时使用，这些变量分布在不同的数据块或者地址，减少网络通信的次数 Exceptions PlcException PLC 通讯异常 WriteStructAsync(object, int, int, CancellationToken) 异步向PLC写入结构体数据 Task WriteStructAsync(object structValue, int db, int startByteAdr = 0, CancellationToken cts = default) Parameters structValue object 要写入的结构体实例 db int 数据块编号 startByteAdr int 起始字节地址，默认为0 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Remarks 这个方法适用于需要将C#中的结构体数据写入到PLC Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常 WriteStructAsync<T>(T, int, int, CancellationToken) 异步向PLC写入结构体数据 Task WriteStructAsync<T>(T structValue, int db, int startByteAdr = 0, CancellationToken cts = default) where T : struct Parameters structValue T 要写入的结构体实例 db int 数据块编号 startByteAdr int 起始字节地址，默认为0 cts CancellationToken 取消令牌 Returns Task 异步操作任务结果，由调用方处理可能发生的异常 Type Parameters T 结构体类型 Remarks 这个方法适用于需要将C#中的结构体数据写入到PLC Exceptions OperationCanceledException 取消此操作时抛出此异常 PlcException PLC 通讯异常"
  },
  "api/MAS.SharedLibrary.Communication.S7Protocols.S7InstanceCreateEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Communication.S7Protocols.S7InstanceCreateEventArgs.html",
    "title": "Class S7InstanceCreateEventArgs | DataMaster",
    "summary": "Class S7InstanceCreateEventArgs Namespace MAS.SharedLibrary.Communication.S7Protocols Assembly MAS.SharedLibrary.dll S7 服务实例创建事件参数 public sealed class S7InstanceCreateEventArgs : InstanceCreateEventArgs, IInstanceCreateEventArgs Inheritance object EventArgs InstanceCreateEventArgs S7InstanceCreateEventArgs Implements IInstanceCreateEventArgs Inherited Members InstanceCreateEventArgs.Model InstanceCreateEventArgs.Key InstanceCreateEventArgs.Config EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks 派生自 InstanceCreateEventArgs Constructors S7InstanceCreateEventArgs(S7ProtocolStatusModel, JObject) S7 服务实例创建事件参数 public S7InstanceCreateEventArgs(S7ProtocolStatusModel model, JObject config) Parameters model S7ProtocolStatusModel config JObject Remarks 派生自 InstanceCreateEventArgs Properties S7Model 获取创建的实例对象 public S7ProtocolStatusModel S7Model { get; } Property Value S7ProtocolStatusModel"
  },
  "api/MAS.SharedLibrary.Communication.S7Protocols.S7ProtocolStatusModel.html": {
    "href": "api/MAS.SharedLibrary.Communication.S7Protocols.S7ProtocolStatusModel.html",
    "title": "Class S7ProtocolStatusModel | DataMaster",
    "summary": "Class S7ProtocolStatusModel Namespace MAS.SharedLibrary.Communication.S7Protocols Assembly MAS.SharedLibrary.dll 表示 S7 协议实例的状态信息数据模型 public class S7ProtocolStatusModel : ProtocolModelBase Inheritance object ProtocolModelBase S7ProtocolStatusModel Inherited Members ProtocolModelBase.Id ProtocolModelBase.Key ProtocolModelBase.Ip ProtocolModelBase.LastUsed ProtocolModelBase.IsActive ProtocolModelBase.IsConnect object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Rack 获取或设置机架 public short Rack { get; set; } Property Value short Slot 获取或设置插槽 public short Slot { get; set; } Property Value short Type 获取或设置型号 public string Type { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Communication.S7Protocols.html": {
    "href": "api/MAS.SharedLibrary.Communication.S7Protocols.html",
    "title": "Namespace MAS.SharedLibrary.Communication.S7Protocols | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Communication.S7Protocols Classes S7InstanceCreateEventArgs S7 服务实例创建事件参数 S7ProtocolStatusModel 表示 S7 协议实例的状态信息数据模型 Interfaces IS7CommunicationConfig S7 通讯参数配置接口 IS7Protocol 与西门子S7设备进行通信的接口"
  },
  "api/MAS.SharedLibrary.Communication.TaskFieldAttribute.html": {
    "href": "api/MAS.SharedLibrary.Communication.TaskFieldAttribute.html",
    "title": "Class TaskFieldAttribute | DataMaster",
    "summary": "Class TaskFieldAttribute Namespace MAS.SharedLibrary.Communication Assembly MAS.SharedLibrary.dll 用于标记任务字段属性的类 [AttributeUsage(AttributeTargets.Field)] public class TaskFieldAttribute : Attribute Inheritance object Attribute TaskFieldAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskFieldAttribute(short, string) 用于标记任务字段属性的类 public TaskFieldAttribute(short taskIndex, string typeName) Parameters taskIndex short 任务索引，标识任务的唯一索引号 typeName string 类型名称，描述任务字段的数据类型 Properties TaskIndex 获取任务的索引号，此索引为唯一标识，用于关联具体的任务 public short TaskIndex { get; } Property Value short TypeName 获取任务字段的类型名称，用于描述字段的数据类型 public string TypeName { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Communication.html": {
    "href": "api/MAS.SharedLibrary.Communication.html",
    "title": "Namespace MAS.SharedLibrary.Communication | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Communication Classes InstanceCreateEventArgs 实例创建事件参数 InstanceExpiredRemovedEventArgs 实例过期移除事件参数 InstanceRemovedEventArgs 实例移除事件参数 PlcCommServiceWrapper 用于存储通信服务及其依赖项的包装类 PlcCommServiceWrapperEventArgs PLC 通信服务包装类更新事件参数 PlcConnectionEventArgs PLC连接状态改变时的事件参数 ProtocolModelBase 协议数据模型基础抽象类 TaskFieldAttribute 用于标记任务字段属性的类 Interfaces ICommBuildConfig 通讯构建相关的配置接口 ICommunicationConfig 通讯协议的基本参数配置接口 IPlcCommServiceFactory 创建不同的 PLC 通讯协议服务工厂接口 IPlcCommServiceWrapperManager 管理 PlcCommServiceWrapper 实例的管理器接口，负责跟踪所有通信服务包装类 IPlcCommunicationService PLC 通讯服务接口 IPlcTaskHandler 任务处理程序公共接口，该接口可以根据从PLC读取的任务数据执行任务 IProtocol 所有通信协议的统一接口 Enums CommProtocol 通讯协议枚举"
  },
  "api/MAS.SharedLibrary.Compilation.AssemblyInfo.html": {
    "href": "api/MAS.SharedLibrary.Compilation.AssemblyInfo.html",
    "title": "Class AssemblyInfo | DataMaster",
    "summary": "Class AssemblyInfo Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 表示程序集的详细信息数据模型 public class AssemblyInfo Inheritance object AssemblyInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AssemblyFullName 获取或设置程序集的完整名称 public string AssemblyFullName { get; set; } Property Value string CustomAttributes 获取或设置程序集应用的自定义属性的名称列表 public List<string> CustomAttributes { get; set; } Property Value List<string> DataAccessTypes 获取或设置在程序集内定义的数据访问类型的完整名称列表 public List<DataAccessTypeDetails> DataAccessTypes { get; set; } Property Value List<DataAccessTypeDetails> DataExportTypes 获取或设置在程序集内定义的数据导出类型的完整名称列表 public List<DataExportTypeDetails> DataExportTypes { get; set; } Property Value List<DataExportTypeDetails> Key 获取或设置程序集的唯一标识符 public string Key { get; set; } Property Value string ReferencedAssemblies 获取或设置程序集引用的其他程序集的完整名称列表 public List<string> ReferencedAssemblies { get; set; } Property Value List<string>"
  },
  "api/MAS.SharedLibrary.Compilation.CompilationResult.html": {
    "href": "api/MAS.SharedLibrary.Compilation.CompilationResult.html",
    "title": "Class CompilationResult | DataMaster",
    "summary": "Class CompilationResult Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 表示编译结果的数据模型 public class CompilationResult Inheritance object CompilationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CompilationResult() 表示编译结果的数据模型 public CompilationResult() Properties CompiledAssembly 获取或设置编译生成的程序集（如果编译成功） public Assembly? CompiledAssembly { get; set; } Property Value Assembly CompiledAssemblyBytes 获取或设置程序集的字节数组 public byte[]? CompiledAssemblyBytes { get; set; } Property Value byte[] Diagnostics 获取或设置编译过程中生成的诊断信息 public IEnumerable<Diagnostic>? Diagnostics { get; set; } Property Value IEnumerable<Diagnostic> IsSuccess 获取或设置编译是否成功 public bool IsSuccess { get; set; } Property Value bool Methods GetAllDiagnostics() 获取所有诊断信息 public IEnumerable<Diagnostic> GetAllDiagnostics() Returns IEnumerable<Diagnostic> 所有诊断信息的集合 GetAllDiagnosticsString() 获取所有诊断信息的字符串表示 public string GetAllDiagnosticsString() Returns string 所有诊断信息的字符串 GetErrorDiagnostics() 获取错误级别的诊断信息 public IEnumerable<Diagnostic> GetErrorDiagnostics() Returns IEnumerable<Diagnostic> 错误诊断信息的集合 GetErrorDiagnosticsString() 获取错误诊断信息的字符串表示 public string GetErrorDiagnosticsString() Returns string 错误诊断信息的字符串 GetWarningDiagnostics() 获取警告级别的诊断信息 public IEnumerable<Diagnostic> GetWarningDiagnostics() Returns IEnumerable<Diagnostic> 警告诊断信息的集合 GetWarningDiagnosticsString() 获取警告诊断信息的字符串表示 public string GetWarningDiagnosticsString() Returns string 警告诊断信息的字符串"
  },
  "api/MAS.SharedLibrary.Compilation.IBuildConfig.html": {
    "href": "api/MAS.SharedLibrary.Compilation.IBuildConfig.html",
    "title": "Interface IBuildConfig | DataMaster",
    "summary": "Interface IBuildConfig Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 构建配置接口 public interface IBuildConfig Properties BuildPathFull 获取或设置默认的代码构建存放的路径 string BuildPathFull { get; set; } Property Value string Remarks BuildPath\\ OutputAssemblyName 获取或设置输出程序集的名称 string OutputAssemblyName { get; set; } Property Value string OutputAssemblyPath 获取或设置输出程序集的路径 string OutputAssemblyPath { get; set; } Property Value string ReferenceDirectories 获取或设置引用程序集的目录 string? ReferenceDirectories { get; set; } Property Value string ReferencePaths 获取或设置引用程序集的路径列表 IEnumerable<string> ReferencePaths { get; set; } Property Value IEnumerable<string> RootNamespace 获取或设置根命名空间 string RootNamespace { get; set; } Property Value string SourceDirectories 获取或设置包含需要编译的源文件的目录集合 IEnumerable<string> SourceDirectories { get; set; } Property Value IEnumerable<string> TempDirectory 获取或设置临时文件夹路径，用于存放中间文件 string TempDirectory { get; set; } Property Value string WarningLevel 获取或设置编译时的警告级别，0 表示不显示警告，最高为 4 int WarningLevel { get; set; } Property Value int Methods GetBuildPathFull() 获取该实例的构建目录路径 string GetBuildPathFull() Returns string 完整的构建路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config)"
  },
  "api/MAS.SharedLibrary.Compilation.ICommBuildConfig.html": {
    "href": "api/MAS.SharedLibrary.Compilation.ICommBuildConfig.html",
    "title": "Interface ICommBuildConfig | DataMaster",
    "summary": "Interface ICommBuildConfig Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 通讯构建相关的配置接口 public interface ICommBuildConfig : IBuildConfig Inherited Members IBuildConfig.BuildPathFull IBuildConfig.SourceDirectories IBuildConfig.RootNamespace IBuildConfig.OutputAssemblyName IBuildConfig.OutputAssemblyPath IBuildConfig.ReferencePaths IBuildConfig.ReferenceDirectories IBuildConfig.TempDirectory IBuildConfig.WarningLevel IBuildConfig.GetBuildPathFull() Properties ReadTaskHandlerType 获取或设置读取任务类型定义 string ReadTaskHandlerType { get; set; } Property Value string ReadTaskPath 获取或设置读取任务代码存放路径 string ReadTaskPath { get; set; } Property Value string Remarks ReadTaskPath\\ WriteTaskHandlerType 获取或设置写入任务类型定义 string WriteTaskHandlerType { get; set; } Property Value string WriteTaskPath 获取或设置写入任务代码存放路径 string WriteTaskPath { get; set; } Property Value string Remarks WriteTaskPath\\ Methods GetReadTaskFullPath() 获取读取任务的完整路径 string GetReadTaskFullPath() Returns string 完整的文件路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config), ReadTaskPath) GetWriteTaskFullPath() 获取写入任务的完整路径 string GetWriteTaskFullPath() Returns string 完整的文件路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config), WriteTaskPath)"
  },
  "api/MAS.SharedLibrary.Compilation.ICommCompilationService.html": {
    "href": "api/MAS.SharedLibrary.Compilation.ICommCompilationService.html",
    "title": "Interface ICommCompilationService | DataMaster",
    "summary": "Interface ICommCompilationService Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 动态加载和编译通讯代码的服务接口 public interface ICommCompilationService : ICompilationService, IDisposable Inherited Members ICompilationService.GetBuildConfig() ICompilationService.InitDirectory() ICompilationService.InitDirectory(string) ICompilationService.InitDirectory(params string[]) ICompilationService.LastCompilationResult ICompilationService.LoadAndCompileAsync() ICompilationService.GetTypeByName(string, string) ICompilationService.GetTypeByFullName(string) ICompilationService.GetAllTypes() ICompilationService.GetCompiledAssembly() ICompilationService.SaveCompiledAssembly() ICompilationService.GetProperties(string, string) ICompilationService.GetDocumentationForType(Type) ICompilationService.GetAllNames() ICompilationService.GetAllFullNames() ICompilationService.GetFilePathForType(Type) ICompilationService.GetFilePathForFullName(string) IDisposable.Dispose() Methods GetDataReadStructTypes() 获取编译后的所有定义的任务读取结构体类型 IEnumerable<Type> GetDataReadStructTypes() Returns IEnumerable<Type> 结构体类型的枚举 GetDataWriteStructTypes() 获取编译后的所有定义的任务写入结构体类型 IEnumerable<Type> GetDataWriteStructTypes() Returns IEnumerable<Type> 结构体类型的枚举 GetStructTypes() 获取编译后的所有结构体类型 IEnumerable<Type> GetStructTypes() Returns IEnumerable<Type> 结构体类型的枚举 GetTaskHandlerReadStructType() 获取编译后定义的任务读取处理结构体类型 Type GetTaskHandlerReadStructType() Returns Type 结构体类型的枚举 Exceptions InvalidOperationException 当无法加载指定的程序集时抛出 TypeLoadException 在已加载的程序集内找不到指定的类型时抛出 GetTaskHandlerWriteStructType() 获取编译后定义的任务写入处理结构体类型 Type GetTaskHandlerWriteStructType() Returns Type 结构体类型的枚举 Exceptions InvalidOperationException 当无法加载指定的程序集时抛出 TypeLoadException 在已加载的程序集内找不到指定的类型时抛出 GetTaskIndexForType(Type) 获取对应类型的任务索引 short GetTaskIndexForType(Type type) Parameters type Type 结构体类型 Returns short 任务索引，如果不存在则返回 -1 InitPlcStructuresAsync() 异步初始化 PLC 通信结构体和代码生成 Task InitPlcStructuresAsync() Returns Task 异步操作任务结果 PopulateAssemblyMetadata(IEnumerable<AssemblyInfo>) 填充程序集的元数据，在编译完成后调用以填充文件路径和其他元信息 void PopulateAssemblyMetadata(IEnumerable<AssemblyInfo> assemblyInfos) Parameters assemblyInfos IEnumerable<AssemblyInfo> 需要更新的程序集信息集合"
  },
  "api/MAS.SharedLibrary.Compilation.ICompilationManager.html": {
    "href": "api/MAS.SharedLibrary.Compilation.ICompilationManager.html",
    "title": "Interface ICompilationManager | DataMaster",
    "summary": "Interface ICompilationManager Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 中央编译管理器接口，管理器负责跟踪所有动态编译的程序集，并为其他编译服务提供必要的元数据引用 public interface ICompilationManager Properties SharedLoadContext 获取共享的 AssemblyLoadContext AssemblyLoadContext SharedLoadContext { get; } Property Value AssemblyLoadContext Methods ClearAllMetadataReferences() 清除所有已注册的元数据引用并卸载所有程序集 void ClearAllMetadataReferences() FindAssemblyByTypeName(string) 根据完全限定类型名称查找已加载的 Assembly 对象 Assembly? FindAssemblyByTypeName(string fullTypeName) Parameters fullTypeName string 完全限定类型名称（包括命名空间） Returns Assembly 包含该类型的 Assembly 对象，如果未找到则返回 null GetAllLoadedAssemblies() 获取所有已加载的 Assembly 对象 IEnumerable<Assembly> GetAllLoadedAssemblies() Returns IEnumerable<Assembly> 已加载的 Assembly 对象集合 GetAssemblyBytesByName(string) 根据程序集名称获取程序集字节数组 byte[]? GetAssemblyBytesByName(string assemblyName) Parameters assemblyName string 程序集名称 Returns byte[] 程序集的字节数组，如果未找到则返回 null GetCompiledAssembly(string) 根据程序集名称获取已编译并加载的 Assembly 对象 Assembly? GetCompiledAssembly(string assemblyName) Parameters assemblyName string 程序集名称 Returns Assembly 已加载的 Assembly 对象，如果未找到则返回 null GetLoadedAssembliesInfo() 获取已加载的程序集信息，用于在UI中显示和管理 IEnumerable<LoadedAssemblyInfo> GetLoadedAssembliesInfo() Returns IEnumerable<LoadedAssemblyInfo> 已加载的程序集信息集合 GetMetadataReferences() 获取所有已注册的元数据引用 IEnumerable<MetadataReference> GetMetadataReferences() Returns IEnumerable<MetadataReference> 元数据引用的集合 RegisterCompiledAssembly(string, byte[]) 注册已编译的程序集，并加载到对应的 AssemblyLoadContext 中 Assembly RegisterCompiledAssembly(string assemblyName, byte[] assemblyBytes) Parameters assemblyName string 程序集名称 assemblyBytes byte[] 程序集的字节数组 Returns Assembly 加载后的 Assembly 对象 Remarks 如果程序集名称已存在，则卸载旧的程序集并替换为新的程序集 RegisterSharedAssembly(string, byte[]) 注册并加载共享程序集 Assembly RegisterSharedAssembly(string assemblyName, byte[] assemblyBytes) Parameters assemblyName string 程序集名称 assemblyBytes byte[] 程序集字节 Returns Assembly 加载的 Assembly 对象 RemoveMetadataReference(string) 根据程序集名称移除特定的元数据引用并卸载对应的程序集 bool RemoveMetadataReference(string assemblyName) Parameters assemblyName string 程序集名称 Returns bool 移除成功返回 true，否则 false SaveAssemblyToFile(string, string) 将已注册的程序集保存为 DLL 文件 bool SaveAssemblyToFile(string assemblyName, string outputPath) Parameters assemblyName string 程序集名称 outputPath string 输出路径 Returns bool 是否成功保存"
  },
  "api/MAS.SharedLibrary.Compilation.ICompilationService.html": {
    "href": "api/MAS.SharedLibrary.Compilation.ICompilationService.html",
    "title": "Interface ICompilationService | DataMaster",
    "summary": "Interface ICompilationService Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 动态加载和编译的通用服务接口 public interface ICompilationService : IDisposable Inherited Members IDisposable.Dispose() Properties LastCompilationResult 获取最后一次的编译状态结果 CompilationResult? LastCompilationResult { get; } Property Value CompilationResult Methods GetAllFullNames() 获取所有已编译的完全限定名称 IEnumerable<string> GetAllFullNames() Returns IEnumerable<string> 完全限定名称的枚举 GetAllNames() 获取所有已编译的简单名称 IEnumerable<string> GetAllNames() Returns IEnumerable<string> 简单名称的枚举 GetAllTypes() 获取所有已编译的类型 IEnumerable<Type> GetAllTypes() Returns IEnumerable<Type> 类型的枚举 GetBuildConfig() 获取构建配置 IBuildConfig GetBuildConfig() Returns IBuildConfig IBuildConfig 实例 GetCompiledAssembly() 获取编译后的程序集 Assembly? GetCompiledAssembly() Returns Assembly Assembly 对象或 null GetDocumentationForType(Type?) 获取给定类型的文档 string? GetDocumentationForType(Type? type) Parameters type Type 类型 Returns string 如果不存在则返回null GetFilePathForFullName(string) 根据完全限定名称获取对应的文件路径 string? GetFilePathForFullName(string fullName) Parameters fullName string 完全限定名称 Returns string 如果不存在则返回null GetFilePathForType(Type) 获取对应类型的文件路径 string? GetFilePathForType(Type type) Parameters type Type 仓储类型 Returns string 如果不存在则返回null GetProperties(string, string?) 获取指定类型的属性列表 IEnumerable<PropertyInfo> GetProperties(string typeName, string? namespaceName = null) Parameters typeName string 类型的名称 namespaceName string 类型的命名空间 Returns IEnumerable<PropertyInfo> 包含属性信息的列表 GetTypeByFullName(string) 根据完全限定名称获取特定的类型 Type? GetTypeByFullName(string fullName) Parameters fullName string 类型的名称 Returns Type 如果找到，返回类型；否则返回 null GetTypeByName(string, string?) 根据类型名称获取特定的类型 Type? GetTypeByName(string typeName, string? namespaceName = null) Parameters typeName string 类型的名称 namespaceName string 命名空间 Returns Type 如果找到，返回类型；否则返回 null InitDirectory() 初始化目录构建，用于检查目录是否存在。如果不存在则创建 bool InitDirectory() Returns bool 如果创建成功返回true，否则false InitDirectory(string) 初始化目录构建，用于检查目录是否存在。如果不存在则创建 bool InitDirectory(string directory) Parameters directory string 要检查的目录 Returns bool 如果创建成功返回true，否则false InitDirectory(params string[]) 初始化目录构建，用于检查一个或多个目录是否存在。如果不存在则创建 bool InitDirectory(params string[] directories) Parameters directories string[] 要检查和创建的目录数组 Returns bool 如果至少创建了一个目录则返回 true，否则返回 false LoadAndCompileAsync() 异步加载并编译所有源目录下的所有定义文件到同一程序集 Task<CompilationResult> LoadAndCompileAsync() Returns Task<CompilationResult> 异步操作任务结果，CompilationResult 对象 SaveCompiledAssembly() 将编译后的程序集保存为 DLL 文件 bool SaveCompiledAssembly() Returns bool 如果保存成功，返回 true；否则返回 false"
  },
  "api/MAS.SharedLibrary.Compilation.ICompilationServiceFactory.html": {
    "href": "api/MAS.SharedLibrary.Compilation.ICompilationServiceFactory.html",
    "title": "Interface ICompilationServiceFactory | DataMaster",
    "summary": "Interface ICompilationServiceFactory Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 编译服务工厂接口 public interface ICompilationServiceFactory Methods Create(ICommunicationConfig) 根据配置创建新的 ICommCompilationService 实例 ICommCompilationService Create(ICommunicationConfig config) Parameters config ICommunicationConfig 通讯协议配置 Returns ICommCompilationService 新的 ICommCompilationService 实例对象 Create(IDataExportConfig) 根据配置创建新的 IDataExportCompilationService 实例 IDataExportCompilationService Create(IDataExportConfig config) Parameters config IDataExportConfig 通讯协议配置 Returns IDataExportCompilationService 新的 IDataExportCompilationService 实例对象 Create(IDbConfig) 根据配置创建新的 IDataAccessCompilationService 实例 IDataAccessCompilationService Create(IDbConfig config) Parameters config IDbConfig 通讯协议配置 Returns IDataAccessCompilationService 新的 IDataAccessCompilationService 实例对象"
  },
  "api/MAS.SharedLibrary.Compilation.IDataAccessCompilationService.html": {
    "href": "api/MAS.SharedLibrary.Compilation.IDataAccessCompilationService.html",
    "title": "Interface IDataAccessCompilationService | DataMaster",
    "summary": "Interface IDataAccessCompilationService Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 动态加载和编译数据访问层的服务接口 public interface IDataAccessCompilationService : ICompilationService, IDisposable Inherited Members ICompilationService.GetBuildConfig() ICompilationService.InitDirectory() ICompilationService.InitDirectory(string) ICompilationService.InitDirectory(params string[]) ICompilationService.LastCompilationResult ICompilationService.LoadAndCompileAsync() ICompilationService.GetTypeByName(string, string) ICompilationService.GetTypeByFullName(string) ICompilationService.GetAllTypes() ICompilationService.GetCompiledAssembly() ICompilationService.SaveCompiledAssembly() ICompilationService.GetProperties(string, string) ICompilationService.GetDocumentationForType(Type) ICompilationService.GetAllNames() ICompilationService.GetAllFullNames() ICompilationService.GetFilePathForType(Type) ICompilationService.GetFilePathForFullName(string) IDisposable.Dispose() Methods CompileDataAccessAsync() 异步编译数据访问层 Task<string?> CompileDataAccessAsync() Returns Task<string> 异步操作任务，如果编译失败返回错误信息，反之 null GenerateEntityFilesAsync(IEnumerable<AssemblyInfo>, IEnumerable<string>, string, string) 异步生成实体文件并更新程序集信息集合 Task GenerateEntityFilesAsync(IEnumerable<AssemblyInfo> assemblyInfos, IEnumerable<string> structFullNames, string entityDirectory, string entityNamespace) Parameters assemblyInfos IEnumerable<AssemblyInfo> 程序集信息集合 structFullNames IEnumerable<string> 结构体的全名集合 entityDirectory string 实体文件存放的目录 entityNamespace string 实体的命名空间 Returns Task 异步操作任务 GenerateMapperFilesAsync(IEnumerable<AssemblyInfo>, IEnumerable<(string StructName, string EntityName)>, string, string) 异步生成映射器文件并更新程序集信息集合 Task GenerateMapperFilesAsync(IEnumerable<AssemblyInfo> assemblyInfos, IEnumerable<(string StructName, string EntityName)> structEntityPairs, string mapperDirectory, string mapperNamespace) Parameters assemblyInfos IEnumerable<AssemblyInfo> 程序集信息集合 structEntityPairs IEnumerable<(string StructName, string EntityName)> 包含结构名和实体名对的集合，每对数据将用于生成一个映射器 mapperDirectory string 映射器文件存放的目录路径 mapperNamespace string 生成的映射器文件所使用的命名空间 Returns Task 异步操作任务 GenerateRepositoryFilesAsync(IEnumerable<AssemblyInfo>, IEnumerable<string>, string, string) 异步生成仓储文件并更新程序集信息集合 Task GenerateRepositoryFilesAsync(IEnumerable<AssemblyInfo> assemblyInfos, IEnumerable<string> entityNames, string repositoryDirectory, string repositoryNamespace) Parameters assemblyInfos IEnumerable<AssemblyInfo> 程序集信息集合 entityNames IEnumerable<string> 实体的全名集合 repositoryDirectory string 仓储文件存放的目录 repositoryNamespace string 仓储的命名空间 Returns Task 异步操作任务 GetEntityTypes() 获取编译后的所有实体类型 IEnumerable<Type> GetEntityTypes() Returns IEnumerable<Type> 实体类型的枚举 GetMapperTypes() 获取编译后的所有映射器类型 IEnumerable<Type> GetMapperTypes() Returns IEnumerable<Type> 映射器类型的枚举 GetRepositoryTypes() 获取编译后的所有仓储类型 IEnumerable<Type> GetRepositoryTypes() Returns IEnumerable<Type> 仓储类型的枚举 InitDataAccessDirectoryAsync(IEnumerable<AssemblyInfo>) 异步初始化数据访问层目录，根据提供的程序集信息生成文件 Task InitDataAccessDirectoryAsync(IEnumerable<AssemblyInfo> assemblyInfos) Parameters assemblyInfos IEnumerable<AssemblyInfo> 包含依赖的结构体数据枚举集合 Returns Task 表示异步操作任务 Remarks 根据传入的依赖的数据源，通常是数据结构体，生成脚本文件和更新程序集信息， 如果文件已存在则跳过文件的创建 LoadStructs() 加载已存在的所有结构体 IEnumerable<AssemblyInfo>? LoadStructs() Returns IEnumerable<AssemblyInfo> AssemblyInfo 对象枚举集合或 null PopulateAssemblyMetadata(IEnumerable<AssemblyInfo>) 填充程序集的元数据，在编译完成后调用以填充文件路径和其他元信息 void PopulateAssemblyMetadata(IEnumerable<AssemblyInfo> assemblyInfos) Parameters assemblyInfos IEnumerable<AssemblyInfo> 需要更新的程序集信息集合"
  },
  "api/MAS.SharedLibrary.Compilation.IDataExportCompilationService.html": {
    "href": "api/MAS.SharedLibrary.Compilation.IDataExportCompilationService.html",
    "title": "Interface IDataExportCompilationService | DataMaster",
    "summary": "Interface IDataExportCompilationService Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 动态编译数据导出脚本服务接口 public interface IDataExportCompilationService : ICompilationService, IDisposable Inherited Members ICompilationService.GetBuildConfig() ICompilationService.InitDirectory() ICompilationService.InitDirectory(string) ICompilationService.InitDirectory(params string[]) ICompilationService.LastCompilationResult ICompilationService.LoadAndCompileAsync() ICompilationService.GetTypeByName(string, string) ICompilationService.GetTypeByFullName(string) ICompilationService.GetAllTypes() ICompilationService.GetCompiledAssembly() ICompilationService.SaveCompiledAssembly() ICompilationService.GetProperties(string, string) ICompilationService.GetDocumentationForType(Type) ICompilationService.GetAllNames() ICompilationService.GetAllFullNames() ICompilationService.GetFilePathForType(Type) ICompilationService.GetFilePathForFullName(string) IDisposable.Dispose() Methods CompileDataExportAsync() 异步编译数据导出 Task<string?> CompileDataExportAsync() Returns Task<string> 异步操作任务，如果编译失败返回错误信息，反之 null GenerateScriptFilesAsync(IEnumerable<AssemblyInfo>, IEnumerable<string>, string, string) 异步生成脚本文件并更新程序集信息集合 Task GenerateScriptFilesAsync(IEnumerable<AssemblyInfo> assemblyInfos, IEnumerable<string> structNames, string scriptDirectory, string scriptNamespace) Parameters assemblyInfos IEnumerable<AssemblyInfo> 程序集信息集合 structNames IEnumerable<string> 结构体的全名集合 scriptDirectory string 脚本文件存放的目录 scriptNamespace string 脚本的命名空间 Returns Task 异步操作任务 GetScriptTypes() 获取编译后的所有脚本类型 IEnumerable<Type> GetScriptTypes() Returns IEnumerable<Type> 实体类型的枚举 InitDataExportDirectoryAsync(IEnumerable<AssemblyInfo>) 异步初始化数据导出目录，根据提供的程序集信息生成脚本文件 Task InitDataExportDirectoryAsync(IEnumerable<AssemblyInfo> assemblyInfos) Parameters assemblyInfos IEnumerable<AssemblyInfo> 包含依赖的结构体数据枚举集合 Returns Task 表示异步操作的任务 Remarks 根据传入的依赖的数据源，通常是数据结构体，生成脚本文件和更新程序集信息， 如果文件已存在则跳过文件的创建 LoadStructs() 加载已存在的所有结构体 IEnumerable<AssemblyInfo>? LoadStructs() Returns IEnumerable<AssemblyInfo> AssemblyInfo 对象枚举集合或 null PopulateAssemblyMetadata(IEnumerable<AssemblyInfo>) 填充程序集的元数据，在编译完成后调用以填充文件路径和其他元信息 void PopulateAssemblyMetadata(IEnumerable<AssemblyInfo> assemblyInfos) Parameters assemblyInfos IEnumerable<AssemblyInfo> 需要更新的程序集信息集合"
  },
  "api/MAS.SharedLibrary.Compilation.IPipelineCompilationService.html": {
    "href": "api/MAS.SharedLibrary.Compilation.IPipelineCompilationService.html",
    "title": "Interface IPipelineCompilationService | DataMaster",
    "summary": "Interface IPipelineCompilationService Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 管道编译服务接口 public interface IPipelineCompilationService Methods CompileAllPipelineAsync(CancellationToken) 异步编译所有管道 Task<CompilationResult> CompileAllPipelineAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<CompilationResult> 异步操作任务结果，CompilationResult 对象 CompilePipelineAsync(Guid, CancellationToken) 异步编译指定管道 Task<CompilationResult> CompilePipelineAsync(Guid pipelineId, CancellationToken token = default) Parameters pipelineId Guid 要编译的管道 Id 标识 token CancellationToken 取消令牌 Returns Task<CompilationResult> 异步操作任务结果，CompilationResult 对象 CompilePipelineAsync(string, CancellationToken) 异步编译指定管道 Task<CompilationResult> CompilePipelineAsync(string pipelineName, CancellationToken token = default) Parameters pipelineName string 要编译的管道名称 token CancellationToken 取消令牌 Returns Task<CompilationResult> 异步操作任务结果，CompilationResult 对象 GetCompilePipelineType(Guid) 获取指定编译后管道类型 Type? GetCompilePipelineType(Guid pipelineId) Parameters pipelineId Guid 要获取的管道 Id 标识 Returns Type 编译后的管道类型或 null GetCompilePipelineType(string) 获取指定编译后管道类型 Type? GetCompilePipelineType(string pipelineName) Parameters pipelineName string 要获取的管道名称 Returns Type 编译后的管道类型或 null GetCompilePipelineTypes() 获取所有编译后的管道类型 IEnumerable<Type> GetCompilePipelineTypes() Returns IEnumerable<Type> 编译后的所有管道类型集合"
  },
  "api/MAS.SharedLibrary.Compilation.LoadedAssemblyInfo.html": {
    "href": "api/MAS.SharedLibrary.Compilation.LoadedAssemblyInfo.html",
    "title": "Class LoadedAssemblyInfo | DataMaster",
    "summary": "Class LoadedAssemblyInfo Namespace MAS.SharedLibrary.Compilation Assembly MAS.SharedLibrary.dll 表示已加载程序集的详细信息 public class LoadedAssemblyInfo Inheritance object LoadedAssemblyInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AssemblyName 获取或设置程序集的名称 public string AssemblyName { get; set; } Property Value string FullName 获取或设置程序集的完整名称 public string FullName { get; set; } Property Value string LoadPath 获取或设置程序集的加载路径或标识符（若从内存中加载则可能为空字符串） public string LoadPath { get; set; } Property Value string SizeInKB 获取程序集的大小（以KB为单位，保留两位小数） public double SizeInKB { get; set; } Property Value double UpdateTime 获取更新时间 public DateTime UpdateTime { get; } Property Value DateTime"
  },
  "api/MAS.SharedLibrary.Compilation.html": {
    "href": "api/MAS.SharedLibrary.Compilation.html",
    "title": "Namespace MAS.SharedLibrary.Compilation | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Compilation Classes AssemblyInfo 表示程序集的详细信息数据模型 CompilationResult 表示编译结果的数据模型 LoadedAssemblyInfo 表示已加载程序集的详细信息 Interfaces IBuildConfig 构建配置接口 ICommBuildConfig 通讯构建相关的配置接口 ICommCompilationService 动态加载和编译通讯代码的服务接口 ICompilationManager 中央编译管理器接口，管理器负责跟踪所有动态编译的程序集，并为其他编译服务提供必要的元数据引用 ICompilationService 动态加载和编译的通用服务接口 ICompilationServiceFactory 编译服务工厂接口 IDataAccessCompilationService 动态加载和编译数据访问层的服务接口 IDataExportCompilationService 动态编译数据导出脚本服务接口 IPipelineCompilationService 管道编译服务接口"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ConnectionLine.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ConnectionLine.html",
    "title": "Class ConnectionLine | DataMaster",
    "summary": "Class ConnectionLine Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块之间的连接线数据模型，表示从一个模块的指定输出端点到另一个模块的指定输入端点的连接 public class ConnectionLine Inheritance object ConnectionLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConnectionLine(Guid, short, Guid, short, Path) 模块之间的连接线数据模型，表示从一个模块的指定输出端点到另一个模块的指定输入端点的连接 public ConnectionLine(Guid sourceId, short sourceIndex, Guid targetId, short targetIndex, Path path) Parameters sourceId Guid 源模块的唯一标识符 sourceIndex short 源模块的输出端点索引 targetId Guid 目标模块的唯一标识符 targetIndex short 目标模块的输入端点索引 path Path 连接线的路径对象 Properties BezierSegmentPoint1 获取或设置贝塞尔曲线第一个控制点 public Point BezierSegmentPoint1 { get; set; } Property Value Point BezierSegmentPoint2 获取或设置贝塞尔曲线第二个控制点 public Point BezierSegmentPoint2 { get; set; } Property Value Point BezierSegmentPoint3 获取或设置贝塞尔曲线第三个控制点 public Point BezierSegmentPoint3 { get; set; } Property Value Point ConnectionId 获取或设置连接线的唯一标识符，自动生成 public Guid ConnectionId { get; set; } Property Value Guid LineType 获取或设置连接线的类型 public string LineType { get; set; } Property Value string Path 获取或设置连接线的视觉表示，用于在界面上绘制连接线 [JsonIgnore] public Path Path { get; set; } Property Value Path SourceModuleId 获取或设置源模块的唯一标识符，表示连接的起始点所在的模块 public Guid SourceModuleId { get; set; } Property Value Guid SourceOutputIndex 获取或设置源模块的输出端点索引，指定从哪个输出端点开始连接 public short SourceOutputIndex { get; set; } Property Value short StartPoint 获取或设置连接线的起点位置 public Point StartPoint { get; set; } Property Value Point StrokeThickness 获取或设置连接线的线宽 public double StrokeThickness { get; set; } Property Value double TargetInputIndex 获取或设置目标模块的输入端点索引，指定连接的目标输入端点 public short TargetInputIndex { get; set; } Property Value short TargetModuleId 获取或设置目标模块的唯一标识符，表示连接线的终点所在的模块 public Guid TargetModuleId { get; set; } Property Value Guid"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ConnectionLineEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ConnectionLineEventArgs.html",
    "title": "Class ConnectionLineEventArgs | DataMaster",
    "summary": "Class ConnectionLineEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 连接线事件参数，包含连接线的相关信息 public class ConnectionLineEventArgs : EventArgs Inheritance object EventArgs ConnectionLineEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConnectionLineEventArgs(ConnectionLine) 连接线事件参数，包含连接线的相关信息 public ConnectionLineEventArgs(ConnectionLine connectionLine) Parameters connectionLine ConnectionLine Properties ConnectionLine 获取创建或移除的连接线数据模型 public ConnectionLine ConnectionLine { get; } Property Value ConnectionLine"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ConnectionSetupEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ConnectionSetupEventArgs.html",
    "title": "Class ConnectionSetupEventArgs | DataMaster",
    "summary": "Class ConnectionSetupEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块间的连接建立事件 public class ConnectionSetupEventArgs : ModuleInfo Inheritance object ModuleInfo ConnectionSetupEventArgs Inherited Members ModuleInfo.AcceptableInputTypes ModuleInfo.OutputTypes ModuleInfo.SetOutputType ModuleInfo.SetInputType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 模块A输出 -> 模块B输入时，由模块B触发此事件 Constructors ConnectionSetupEventArgs(ModuleConnection) 模块间的连接建立事件 public ConnectionSetupEventArgs(ModuleConnection connection) Parameters connection ModuleConnection 模块连接数据模型 Remarks 模块A输出 -> 模块B输入时，由模块B触发此事件 Properties Connection 获取模块间的信息，仅在初始化时可设置 public ModuleConnection Connection { get; init; } Property Value ModuleConnection CustomProperties 获取键值对集合，用于额外的或扩展信息，仅在初始化时可设置 public Dictionary<string, object>? CustomProperties { get; init; } Property Value Dictionary<string, object>"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ControlCleanupEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ControlCleanupEventArgs.html",
    "title": "Class ControlCleanupEventArgs | DataMaster",
    "summary": "Class ControlCleanupEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 控件清理事件参数，通知控件准备清理 public class ControlCleanupEventArgs : EventArgs Inheritance object EventArgs ControlCleanupEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ControlModel.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ControlModel.html",
    "title": "Class ControlModel | DataMaster",
    "summary": "Class ControlModel Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 控件数据模型，工程文件重建、保存 public class ControlModel Inheritance object ControlModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AdditionalProperties 获取或设置扩展属性用于存储每个模块的附加属性 public Dictionary<string, object?> AdditionalProperties { get; set; } Property Value Dictionary<string, object> ConnectionLines 获取或设置控件连接线数据模型列表 public List<ConnectionLine>? ConnectionLines { get; set; } Property Value List<ConnectionLine> Id 获取或设置模块的唯一标识符 public required Guid Id { get; set; } Property Value Guid ModuleConnections 获取或设置模块间连接数据模型列表 public List<ModuleConnection>? ModuleConnections { get; set; } Property Value List<ModuleConnection> Name 获取或设置模块名称 public required string Name { get; set; } Property Value string Type 获取或设置模块类型 public required string Type { get; set; } Property Value string Remarks Type 类型本身是不能被直接序列化，固使用 string ；使用 Type.GetType(string) 重新获取 Type 对象 ViewModelData 获取或设置视图模型数据 public ModuleViewModelData? ViewModelData { get; set; } Property Value ModuleViewModelData X 获取或设置模块的X坐标 public required double X { get; set; } Property Value double Y 获取或设置模块的Y坐标 public required double Y { get; set; } Property Value double"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ControlMovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ControlMovedEventArgs.html",
    "title": "Class ControlMovedEventArgs | DataMaster",
    "summary": "Class ControlMovedEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 控件移动事件，用于触发项目修改状态 public class ControlMovedEventArgs Inheritance object ControlMovedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ExecutionFlowServiceModel.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ExecutionFlowServiceModel.html",
    "title": "Class ExecutionFlowServiceModel | DataMaster",
    "summary": "Class ExecutionFlowServiceModel Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 表示执行流服务的数据模型，用于存储和管理管道相关的持久化信息 public class ExecutionFlowServiceModel Inheritance object ExecutionFlowServiceModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NameToIdMap 获取或设置管道名称到管道唯一标识符的映射字典，其中键是管道名称，值是管道的 Guid 标识符 public Dictionary<string, Guid> NameToIdMap { get; set; } Property Value Dictionary<string, Guid> PipelineCode 获取或设置管道代码，其中键是管道Id，值是管道代码 public Dictionary<Guid, string> PipelineCode { get; set; } Property Value Dictionary<Guid, string> PipelineNames 获取或设置管道名称的字典，其中键是管道的起始模块和结束模块的组合（格式为 \"startModuleId_endModuleId\"），值是管道的名称 public Dictionary<string, string> PipelineNames { get; set; } Property Value Dictionary<string, string> Methods GetKey(Guid, Guid) 根据起始模块和结束模块的唯一标识符生成管道的键字符串 public static string GetKey(Guid startModuleId, Guid endModuleId) Parameters startModuleId Guid 管道起始模块的唯一标识符 endModuleId Guid 管道结束模块的唯一标识符 Returns string 返回表示管道键的字符串，格式为 \"startModuleId_endModuleId\""
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IConnectionLineManager.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IConnectionLineManager.html",
    "title": "Interface IConnectionLineManager | DataMaster",
    "summary": "Interface IConnectionLineManager Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 统一管理所有模块的连接线接口，包括不限于创建、更新、移除 public interface IConnectionLineManager Remarks 每个模块只需创建连接到自己的连接线，可以是一对一、一对多、多对多； 例：模块A输出 -> 模块B输入，由模块B确认可以接受模块A的输出后创建此连接线 Methods CreateBezierCurve(ConnectionLine, Canvas, Path) 创建一条连接线对象，从指定源模块的特定输出端点到目标模块的特定输入端点的贝塞尔曲线 void CreateBezierCurve(ConnectionLine connection, Canvas parentCanvas, Path path) Parameters connection ConnectionLine 从工程文件读取的 ConnectionLine 对象 parentCanvas Canvas 连接线应该被添加到的画布，此画布承载了视觉元素 path Path 用于绘制连接线的路径对象。路径对象定义了连接线的视觉表现和样式 Remarks 用于从文件反序列化的连接线数据对象，保持数据引用 CreateBezierCurve(Guid, short, Guid, short, Canvas, Path, Guid?) 创建一条从指定源模块的特定输出端点到目标模块的特定输入端点的贝塞尔曲线 void CreateBezierCurve(Guid sourceModuleId, short sourceOutputIndex, Guid targetModuleId, short targetInputIndex, Canvas parentCanvas, Path path, Guid? connectionId = null) Parameters sourceModuleId Guid 源模块的唯一标识符，表示连接的起始点所在的模块 sourceOutputIndex short 源模块中的输出端点索引，指定从哪个输出端点开始连接 targetModuleId Guid 目标模块的唯一标识符，表示连接的终点所在的模块 targetInputIndex short 目标模块中的输入端点索引，指定连接的目标输入端点 parentCanvas Canvas 连接线应该被添加到的画布，此画布承载了视觉元素 path Path 用于绘制连接线的路径对象。路径对象定义了连接线的视觉表现和样式 connectionId Guid? 连接线唯一标识符（如已有） GetConnectionLine() 获取当前最新的所有连接线数据 Dictionary<Guid, ConnectionLine> GetConnectionLine() Returns Dictionary<Guid, ConnectionLine> 一个字典，键为连接线的唯一标识符（Guid）， 值为对应的连接线数据模型 ConnectionLine 对象 GetConnectionLinesList() 获取当前最新的所有连接线数据模型的列表 List<ConnectionLine> GetConnectionLinesList() Returns List<ConnectionLine> 包含所有连接线数据模型 ConnectionLine 的列表 RemoveAllLines() 移除所有已创建的连接线 void RemoveAllLines() RemoveConnectionLine(Guid, Canvas) 移除模块的连接线 void RemoveConnectionLine(Guid moduleId, Canvas parentCanvas) Parameters moduleId Guid 要移除的模块连接线的唯一标识符 parentCanvas Canvas 连接线所在的父画布 Remarks 将移除此模块已创建的所有连接线 UpdateAllBezierCurvePoint(Guid, TranslateTransform) 更新指定模块的所有的贝塞尔曲线位置，用于模块的拖动时 void UpdateAllBezierCurvePoint(Guid moduleId, TranslateTransform moduleTransform) Parameters moduleId Guid 模块的唯一标识符 moduleTransform TranslateTransform 模块的平移变换 Remarks 将更新此模块已创建的所有输出、输入点的贝塞尔曲线 UpdateBezierCurveEndPoint(Guid, TranslateTransform) 更新贝塞尔曲线的终点位置，用于模块的拖动时 void UpdateBezierCurveEndPoint(Guid moduleId, TranslateTransform moduleTransform) Parameters moduleId Guid 模块的唯一标识符 moduleTransform TranslateTransform 模块拖动的变换信息 Remarks 将更新此模块输入点已创建的所有贝塞尔曲线的终点 UpdateBezierCurveStartPoint(Guid, TranslateTransform) 更新贝塞尔曲线的起点位置，用于模块的拖动时 void UpdateBezierCurveStartPoint(Guid moduleId, TranslateTransform moduleTransform) Parameters moduleId Guid 模块的唯一标识符 moduleTransform TranslateTransform 模块拖动的变换信息 Remarks 将更新此模块输出点已创建的所有贝塞尔曲线的起点 Events ConnectionAdded 连接线添加事件 event EventHandler<ConnectionLineEventArgs>? ConnectionAdded Event Type EventHandler<ConnectionLineEventArgs> ConnectionCleared 连接线清除事件 event EventHandler? ConnectionCleared Event Type EventHandler ConnectionRemoved 连接线移除事件 event EventHandler<ConnectionLineEventArgs>? ConnectionRemoved Event Type EventHandler<ConnectionLineEventArgs>"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IExecutionFlowManager.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IExecutionFlowManager.html",
    "title": "Interface IExecutionFlowManager | DataMaster",
    "summary": "Interface IExecutionFlowManager Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 管理和协调模块间的流程的组件接口 public interface IExecutionFlowManager Properties Messages 获取信息列表 List<string> Messages { get; } Property Value List<string> PipelineCount 获取独立的管道数量 int PipelineCount { get; } Property Value int TotalModules 获取已注册的模块列表数量 int TotalModules { get; } Property Value int Methods ConcurrentExecuteAllAsync(CancellationToken) 异步并行执行所有管道 Task<List<long>> ConcurrentExecuteAllAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌，用于支持异步操作的取消 Returns Task<List<long>> 异步操作任务，返回每个管道的执行耗时（毫秒） Remarks 并行执行所有管道，充分利用多核 CPU 资源，提高执行效率 Exceptions PipelineExecutionException OperationCanceledException ExecuteAllAsync(CancellationToken) 异步执行所有管道 Task<List<long>> ExecuteAllAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌，用于支持异步操作的取消 Returns Task<List<long>> 异步操作任务，根据执行策略返回执行耗时/ms Remarks 根据当前管道的数量自动选择执行策略： - 如果管道数量为 1，则使用串行执行（SequentialExecuteAllAsync(CancellationToken)） - 如果管道数量大于 1，则使用并行执行（ConcurrentExecuteAllAsync(CancellationToken)） Exceptions PipelineExecutionException OperationCanceledException ExecutePipelineAsync(Guid, CancellationToken) 异步执行指定管道 Task<(long ExecutionTime, List<IModuleOutput> Outputs)> ExecutePipelineAsync(Guid pipelineId, CancellationToken token = default) Parameters pipelineId Guid 管道Id token CancellationToken 取消令牌 Returns Task<(long ExecutionTime, List<IModuleOutput> Outputs)> 异步操作任务，一个元组，指定管道的执行耗时/ms和所有特定模块的输出结果列表 Exceptions PipelineExecutionException OperationCanceledException ExecutePipelineAsync(string, CancellationToken) 异步执行指定管道 Task<(long ExecutionTime, List<IModuleOutput> Outputs)> ExecutePipelineAsync(string pipelineName, CancellationToken token = default) Parameters pipelineName string 管道名称 token CancellationToken 取消令牌 Returns Task<(long ExecutionTime, List<IModuleOutput> Outputs)> 异步操作任务，一个元组，指定管道的执行耗时/ms和所有特定模块的输出结果列表 Exceptions PipelineExecutionException OperationCanceledException GetAllPipelines() 获取所有独立的管道的拓扑排序结果 List<List<ModuleWithConnections>> GetAllPipelines() Returns List<List<ModuleWithConnections>> 包含每个管道的模块拓扑排序列表 InitializePipelineAsync(Guid, CancellationToken) 异步初始化指定管道中的所有模块 Task<bool> InitializePipelineAsync(Guid pipelineId, CancellationToken token = default) Parameters pipelineId Guid 要初始化的管道Id token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，表示初始化是否成功，失败通过 Messages 获取信息列表 Exceptions OperationCanceledException InitializePipelineAsync(string, CancellationToken) 异步初始化指定管道中的所有模块 Task<bool> InitializePipelineAsync(string pipelineName, CancellationToken token = default) Parameters pipelineName string 要初始化的管道名称 token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，表示初始化是否成功，失败通过 Messages 获取信息列表 Exceptions OperationCanceledException RegisterAllModule(List<IModule>) 注册所有模块 void RegisterAllModule(List<IModule> modules) Parameters modules List<IModule> 要注册的模块实例列表 Remarks 清除列表并重新注册所有模块，按照依赖关系正确地管理和调度这些模块 Exceptions ArgumentException 如果有重复的模块被注册则抛出此异常 RegisterModule(IModule) 注册单个模块 void RegisterModule(IModule module) Parameters module IModule 要注册的模块实例 SequentialExecuteAllAsync(CancellationToken) 异步串行执行所有管道 Task<long> SequentialExecuteAllAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌，用于支持异步操作的取消 Returns Task<long> 异步操作任务，返回所有管道的执行耗时之和（毫秒） Remarks 按顺序依次执行所有管道，每个管道完全执行完成后才开始下一个管道的执行 Exceptions PipelineExecutionException OperationCanceledException TopologyAllModule() 拓扑所有存在的模块 List<PipelineInfo> TopologyAllModule() Returns List<PipelineInfo> 分配的管道信息列表 TryUpdatePipelineName(Guid, Guid, string, out string) 尝试更新管道的名称 bool TryUpdatePipelineName(Guid startModuleId, Guid endModuleId, string newName, out string message) Parameters startModuleId Guid 起始模块的唯一标识符 endModuleId Guid 结束模块的唯一标识符 newName string 要设置的新管道名称 message string 输出参数，如果更新失败，则返回具体的错误信息 Returns bool 返回 true 表示名称更新成功；返回 false 表示更新失败，可通过 message 获取原因 UnregisterAllModule() 注销/清除所有已注册的模块 void UnregisterAllModule() UnregisterModule(IModule) 注销单个模块 void UnregisterModule(IModule module) Parameters module IModule 要注销的模块实例 Exceptions ArgumentException 如果要注销的模块未注册则抛出此异常 UnregisterModule(Guid) 注销单个模块 void UnregisterModule(Guid id) Parameters id Guid 要注销的模块ID"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IImageProceFlowControlsFactory.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IImageProceFlowControlsFactory.html",
    "title": "Interface IImageProceFlowControlsFactory | DataMaster",
    "summary": "Interface IImageProceFlowControlsFactory Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 图像流程处理控件创建工厂接口 public interface IImageProceFlowControlsFactory Methods CreateControl(Type, Canvas?) 创建一个控件实例 Control CreateControl(Type controlType, Canvas? parentCanvas = null) Parameters controlType Type 控件的类型 parentCanvas Canvas 容纳控件的父元素画布，如果需要 Returns Control 新创建的控件实例 CreateControl<T>(Canvas?) 创建一个控件实例 T CreateControl<T>(Canvas? parentCanvas = null) where T : Control Parameters parentCanvas Canvas 容纳控件的父元素画布，如果需要 Returns T 新创建的控件实例 Type Parameters T 控件的类型，必须是 Control 的子类 Exceptions InvalidOperationException 如果T不是 Control 的派生类或服务未注册相应类型的窗口、 控件需要ParentCanvas属性但没有此属性时则抛出此异常"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModule.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModule.html",
    "title": "Interface IModule | DataMaster",
    "summary": "Interface IModule Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块的统一接口 public interface IModule Properties AcceptableInputTypes 获取或设置可接受的输入类型 Type[] AcceptableInputTypes { get; set; } Property Value Type[] InputModuleIds 获取或设置输入模块的唯一标识符列表，用于标识所有连接到此模块的输入模块 List<Guid> InputModuleIds { get; set; } Property Value List<Guid> ModelType 获取模块的类型 ModelTypes ModelType { get; init; } Property Value ModelTypes ModuleId 获取或设置当前模块的唯一标识符Guid Guid ModuleId { get; set; } Property Value Guid Name 获取此模块的名称，仅在初始化时可设置 string Name { get; init; } Property Value string OutputModuleIds 获取或设置输出模块的唯一标识符列表，用于标识所有此模块连接的输出模块 List<Guid> OutputModuleIds { get; set; } Property Value List<Guid> OutputTypes 获取或设置可用的输出类型 Type[] OutputTypes { get; set; } Property Value Type[] SetAcceptableInputType 获取或设置当前模块设定的可接受输入类型 Type SetAcceptableInputType { get; set; } Property Value Type SetOutputType 获取或设置当前模块设定的输出类型 Type SetOutputType { get; set; } Property Value Type Version 获取或设置此模块的版本 string Version { get; set; } Property Value string Methods ExecuteAsync(CancellationToken) 异步执行任务逻辑 Task<object> ExecuteAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<object> 异步操作任务结果，该模块的输出类型结果 Exceptions VisionExecutionFailureException InitializeAsync(CancellationToken) 异步执行初始化 Task InitializeAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task 异步操作任务 Exceptions VisionInitializationFailureException VisionWarningException SetInputData(Dictionary<short, ModuleInputData>) 设置传递给当前模块的输入数据 void SetInputData(Dictionary<short, ModuleInputData> inputs) Parameters inputs Dictionary<short, ModuleInputData> 一个字典，键是输入索引，值是包含数据源模块ID、输出索引和实际数据的 ModuleInputData 对象 Exceptions VisionInvalidInputDataException SetInputData(short, object) 设置传递给当前模块的输入数据 void SetInputData(short index, object input) Parameters index short 输入索引 input object 输入对象 Exceptions VisionInvalidInputDataException"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModuleConnectionService.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModuleConnectionService.html",
    "title": "Interface IModuleConnectionService | DataMaster",
    "summary": "Interface IModuleConnectionService Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块间的连接服务接口 public interface IModuleConnectionService Methods AddConnection(ModuleConnection) 添加模块间的连接 void AddConnection(ModuleConnection connection) Parameters connection ModuleConnection 连接的模块详细信息 AddConnections(List<ModuleConnection>?) 添加模块间列表的连接 void AddConnections(List<ModuleConnection>? connections) Parameters connections List<ModuleConnection> 连接的模块详细信息列表 ConnectionExists(ModuleConnection) 检查指定的连接对象是否存在，防止重复添加 bool ConnectionExists(ModuleConnection connection) Parameters connection ModuleConnection 给定的连接对象 Returns bool 如果存在返回true，否则false GetAllConnectionsList() 获取所有模块间的连接数据列表 List<ModuleConnection> GetAllConnectionsList() Returns List<ModuleConnection> 模块间连接的数据列表 GetAllConnectionsReadOnly() 获取所有模块间的连接的只读视图 IEnumerable<ModuleConnection> GetAllConnectionsReadOnly() Returns IEnumerable<ModuleConnection> 模块连接的只读序列 GetConnection(Guid, Guid?) 获取单个连接信息 ModuleConnection? GetConnection(Guid sourceModuleId, Guid? targetModuleId = null) Parameters sourceModuleId Guid 源模块的ID targetModuleId Guid? 目标模块的ID Returns ModuleConnection 返回指定的模块连接信息，如果未找到则返回null GetConnectionsByModuleId(Guid) 检索与指定模块ID关联的所有连接 IEnumerable<ModuleConnection> GetConnectionsByModuleId(Guid moduleId) Parameters moduleId Guid 模块的ID Returns IEnumerable<ModuleConnection> 与模块ID匹配的 ModuleConnection 对象的可枚举集合 GetConnectionsListByModuleId(Guid) 检索与指定模块ID关联的所有连接的列表 List<ModuleConnection> GetConnectionsListByModuleId(Guid moduleId) Parameters moduleId Guid 模块的ID Returns List<ModuleConnection> 与模块ID匹配的 ModuleConnection 对象列表 HasConnections(Guid) 查询指定模块是否有任何连接 bool HasConnections(Guid moduleId) Parameters moduleId Guid 模块的ID Returns bool 如果该模块作为源或目标有任何连接，返回true；否则返回false RemoveAllConnect() 删除已存在的所有模块连接 void RemoveAllConnect() RemoveConnection(Guid) 删除与指定模块ID相关的所有连接 void RemoveConnection(Guid moduleId) Parameters moduleId Guid 要删除连接的模块的ID RemoveConnection(Guid, Guid) 删除指定的模块连接 void RemoveConnection(Guid sourceModuleId, Guid targetModuleId) Parameters sourceModuleId Guid 源模块的ID targetModuleId Guid 目标模块的ID Events ConnectionAdded 模块连接添加事件 event EventHandler<ModuleConnectionEventArgs>? ConnectionAdded Event Type EventHandler<ModuleConnectionEventArgs> ConnectionRemoved 模块连接移除事件 event EventHandler<ModuleConnectionEventArgs>? ConnectionRemoved Event Type EventHandler<ModuleConnectionEventArgs>"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModuleControlManager.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModuleControlManager.html",
    "title": "Interface IModuleControlManager | DataMaster",
    "summary": "Interface IModuleControlManager Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 管理所有模块控件的生命周期和状态接口 public interface IModuleControlManager Remarks 在主画布中统一管理模块数据模型的添加、删除、修改 Properties TotalModules 获取控件数据模型列表数量 int TotalModules { get; } Property Value int Methods Create(ControlModel) 创建一个新的模块控件数据模型 void Create(ControlModel controlModel) Parameters controlModel ControlModel 控件数据模型 GetControlModels() 获取控件模型列表 List<ControlModel> GetControlModels() Returns List<ControlModel> ControlModel 对象列表 RemoveModuleControl(Guid) 根据模块ID移除一个模块控件 void RemoveModuleControl(Guid moduleId) Parameters moduleId Guid 要移除控件的唯一标识符 Exceptions VisionProjectException RestoreControlToCanvas(Control, ControlModel, Canvas?) 根据单个控件模型数据重建控件并添加到画布，如果画布为null仅重建数据模型 void RestoreControlToCanvas(Control control, ControlModel model, Canvas? canvas = null) Parameters control Control 要创建的控件 model ControlModel 单个控件数据模型 canvas Canvas 要应用的画布，如果需要 Exceptions VisionProjectException RestoreControlsToCanvas(Control, List<ControlModel>, Canvas?) 根据控件模型数据列表重建控件并添加到画布，如果画布为null仅重建数据模型 void RestoreControlsToCanvas(Control control, List<ControlModel> models, Canvas? canvas = null) Parameters control Control 要创建的控件 models List<ControlModel> 控件数据模型列表 canvas Canvas 要应用的画布，如果需要 Exceptions VisionProjectException RestoreControlsToCanvas(Control, Canvas?) 根据单个控件模型数据重建控件并添加到画布，如果画布为null仅重建数据模型 void RestoreControlsToCanvas(Control control, Canvas? canvas = null) Parameters control Control 要创建的控件 canvas Canvas 要应用的画布，如果需要 SerializeUpdateControlModelAsync(Canvas) 异步更新控件数据模型并序列化保存 Task SerializeUpdateControlModelAsync(Canvas parentCanvas) Parameters parentCanvas Canvas 需要更新控件数据模型的父画布 Returns Task Exceptions VisionProjectException"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModuleOutput.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IModuleOutput.html",
    "title": "Interface IModuleOutput | DataMaster",
    "summary": "Interface IModuleOutput Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 定义图像处理模块的输出数据契约接口 public interface IModuleOutput Remarks 该接口用于标准化模块间的结果输出，提供： 模块唯一标识和名称的元数据 结构化输出数据字典（值+描述） 可扩展的数据类型支持 Properties ModuleId 获取模块的唯一标识符（ID） Guid ModuleId { get; } Property Value Guid ModuleName 获取模块的名称 string ModuleName { get; } Property Value string Methods GetOutputData() 获取模块的输出数据集合 Dictionary<string, (object Value, string Description)> GetOutputData() Returns Dictionary<string, (object Value, string Description)> 键值对字典，其中： Key 输出项标识符（不区分大小写） Value 元组包含： Value: 实际输出值 Description: 可读描述"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IPersistenceService.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IPersistenceService.html",
    "title": "Interface IPersistenceService | DataMaster",
    "summary": "Interface IPersistenceService Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 数据的持久化服务接口 public interface IPersistenceService Properties CurrentPath 获取或设置当前工程文件路径 string CurrentPath { get; set; } Property Value string CurrentProject 获取当前工程数据模型 ProjectModel CurrentProject { get; } Property Value ProjectModel Methods CreationProject(string) 创建项目，重置工程数据模型 void CreationProject(string filePath) Parameters filePath string 新的文件路径 GetPipelineCode(Guid) 获取指定管道 ID 的代码 string? GetPipelineCode(Guid pipelineId) Parameters pipelineId Guid 管道 ID Returns string 管道代码，如果不存在返回 null 表示未进行初始化 LoadProjectAsync(string) 异步加载工程 Task LoadProjectAsync(string filePath) Parameters filePath string 要加载的文件 Returns Task 表示异步操作任务 Remarks 加载完成后 CurrentProject 可用 Exceptions VisionProjectException SavePipelineCode(Guid, string) 保存指定管道 ID 的代码 void SavePipelineCode(Guid pipelineId, string code) Parameters pipelineId Guid 管道 ID code string 要保存的代码 SaveProjectAsync() 异步保存工程 Task SaveProjectAsync() Returns Task 表示异步操作任务 Exceptions VisionProjectException Events ProjectCreated 当新项目创建完成时触发 event EventHandler<ProjectEventArgs> ProjectCreated Event Type EventHandler<ProjectEventArgs> ProjectLoaded 当项目加载完成时触发 event EventHandler<ProjectEventArgs> ProjectLoaded Event Type EventHandler<ProjectEventArgs> ProjectSaved 当项目保存完成时触发 event EventHandler<ProjectEventArgs> ProjectSaved Event Type EventHandler<ProjectEventArgs> ProjectSaving 当项目即将保存时触发 event EventHandler<ProjectEventArgs> ProjectSaving Event Type EventHandler<ProjectEventArgs>"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IPipelineService.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IPipelineService.html",
    "title": "Interface IPipelineService | DataMaster",
    "summary": "Interface IPipelineService Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 管道服务接口 public interface IPipelineService Methods StartAllPipelinesAsync(CancellationToken) 异步启动所有管道 Task StartAllPipelinesAsync(CancellationToken token = default) Parameters token CancellationToken Returns Task Exceptions PipelineStartException OperationCanceledException StartPipelineAsync(Guid, CancellationToken) 异步启动指定管道 Task StartPipelineAsync(Guid pipelineID, CancellationToken token = default) Parameters pipelineID Guid 要启动的管道 Id token CancellationToken 取消令牌 Returns Task 表示异步操作任务结果 Exceptions OperationCanceledException PipelineStartException StartPipelineAsync(string, CancellationToken) 异步启动指定管道 Task StartPipelineAsync(string pipelineName, CancellationToken token = default) Parameters pipelineName string 要启动的管道名称 token CancellationToken 取消令牌 Returns Task 表示异步操作任务结果 Exceptions OperationCanceledException PipelineStartException StopAllPipelinesAsync(TimeSpan?) 异步停止所有管道 Task StopAllPipelinesAsync(TimeSpan? timeout = null) Parameters timeout TimeSpan? 设定超时时间 Returns Task Exceptions PipelineTimeoutException StopPipelineAsync(Guid, TimeSpan?) 异步停止指定管道 Task StopPipelineAsync(Guid pipelineID, TimeSpan? timeout = null) Parameters pipelineID Guid 要停止的管道 Id timeout TimeSpan? 设定超时时间 Returns Task 表示异步操作任务结果 Exceptions PipelineTimeoutException StopPipelineAsync(string, TimeSpan?) 异步停止指定管道 Task StopPipelineAsync(string pipelineName, TimeSpan? timeout = null) Parameters pipelineName string 要停止的管道名称 timeout TimeSpan? 设定超时时间 Returns Task 表示异步操作任务结果 Exceptions PipelineTimeoutException Events OnTaskAbnormalStop 任务异常停止事件 event EventHandler<TaskAbnormalStopEventArgs> OnTaskAbnormalStop Event Type EventHandler<TaskAbnormalStopEventArgs>"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IPipelineTaskHandler.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IPipelineTaskHandler.html",
    "title": "Interface IPipelineTaskHandler | DataMaster",
    "summary": "Interface IPipelineTaskHandler Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 管道任务处理程序接口 public interface IPipelineTaskHandler Properties PipelineId 获取管道 Id 标识 Guid PipelineId { get; } Property Value Guid PipelineName 获取管道名称 string PipelineName { get; } Property Value string Methods CompleteAsync(CancellationToken) 异步通知管道任务完成 Task CompleteAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task 表示异步操作任务 Exceptions ProtocolInstanceNotFoundException HandleOutputsAsync(List<IModuleOutput>, CancellationToken) 异步处理管道中的模块输出结果 Task HandleOutputsAsync(List<IModuleOutput> outputs, CancellationToken token = default) Parameters outputs List<IModuleOutput> 模块输出结果列表 token CancellationToken 取消令牌 Returns Task 表示异步操作任务 Exceptions ProtocolInstanceNotFoundException TriggerSignalAsync(CancellationToken) 异步检测管道触发信号 Task<bool> TriggerSignalAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，是否触发管道执行信号 Exceptions ProtocolInstanceNotFoundException"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.IVisionPersistenceService.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.IVisionPersistenceService.html",
    "title": "Interface IVisionPersistenceService | DataMaster",
    "summary": "Interface IVisionPersistenceService Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 视觉项目持久化数据服务接口 public interface IVisionPersistenceService : IPersistenceService, IDisposable Inherited Members IPersistenceService.ProjectCreated IPersistenceService.ProjectLoaded IPersistenceService.ProjectSaved IPersistenceService.ProjectSaving IPersistenceService.GetCurrentFileStream() IPersistenceService.GetCurrentProject() IPersistenceService.SaveProjectAsync() IPersistenceService.SaveProjectAsync(string) IPersistenceService.LoadProjectAsync(string) IPersistenceService.CreationProject(string) IPersistenceService.ReloadCurrentProjectAsync() IDisposable.Dispose() Methods GetPipelineCode(Guid) 获取指定管道 ID 的代码 string? GetPipelineCode(Guid pipelineId) Parameters pipelineId Guid 管道 ID Returns string 管道代码，如果不存在返回 null 表示未进行初始化 SavePipelineCode(Guid, string) 保存指定管道 ID 的代码 void SavePipelineCode(Guid pipelineId, string code) Parameters pipelineId Guid 管道 ID code string 要保存的代码"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModelTypes.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModelTypes.html",
    "title": "Enum ModelTypes | DataMaster",
    "summary": "Enum ModelTypes Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块类型枚举 [JsonConverter(typeof(StringEnumConverter))] public enum ModelTypes Fields Camera = 0 相机 ColorConvert = 2 颜色空间转换 ColorRecognition = 5 颜色识别 Denoise = 3 降噪 ImageInfo = 7 图像信息 ImageSource = 1 图像源 ImageViewer = 6 图像浏览器 ROISelector = 8 ROI 选择器 TemplateMatching = 4 模板匹配"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleAdditionEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleAdditionEventArgs.html",
    "title": "Class ModuleAdditionEventArgs | DataMaster",
    "summary": "Class ModuleAdditionEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块添加事件参数 public class ModuleAdditionEventArgs : EventArgs Inheritance object EventArgs ModuleAdditionEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModuleAdditionEventArgs(Guid, ModelTypes?) 模块添加事件参数 public ModuleAdditionEventArgs(Guid guid, ModelTypes? type = null) Parameters guid Guid 被添加模块的唯一标识符 type ModelTypes? 被添加模块的类型 Properties ModuleId 获取被添加模块的唯一标识符 public Guid ModuleId { get; init; } Property Value Guid Type 获取被添加模块的类型 public ModelTypes? Type { get; init; } Property Value ModelTypes?"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleConnection.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleConnection.html",
    "title": "Class ModuleConnection | DataMaster",
    "summary": "Class ModuleConnection Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块连接数据模型，模块间的连接信息 public class ModuleConnection Inheritance object ModuleConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModuleConnection(ModelTypes, ModelTypes, Guid, short, Guid, short, string, string?) 模块连接数据模型，模块间的连接信息 public ModuleConnection(ModelTypes sourceType, ModelTypes targeteType, Guid sourceId, short sourceOutputIndex, Guid targetId, short targetInputIndex, string connectionNotes, string? creationTime = null) Parameters sourceType ModelTypes 源模块的类型 targeteType ModelTypes 目标模块的类型 sourceId Guid 源模块的标识符 sourceOutputIndex short 源模块输出端点索引 targetId Guid 目标模块的标识符 targetInputIndex short 目标模块输入端点索引 connectionNotes string 连接描述 creationTime string 创建时间 Properties ConnectionNotes 获取或设置连接类型描述连接的性质和用途备注 public string ConnectionNotes { get; set; } Property Value string CreationTime 获取或设置创建时间 public string CreationTime { get; set; } Property Value string SourceId 获取或设置源模块的唯一标识符，用于识别连接的起始模块 public Guid SourceId { get; set; } Property Value Guid SourceOutputIndex 获取或设置源模块输出端点索引 public short SourceOutputIndex { get; set; } Property Value short SourceType 获取或设置源模块的类型，用于识别连接的起始模块 public ModelTypes SourceType { get; set; } Property Value ModelTypes TargetId 获取或设置目标模块的唯一标识符，用于识别连接的终点模块 public Guid TargetId { get; set; } Property Value Guid TargetInputIndex 获取或设置目标模块输入端点索引 public short TargetInputIndex { get; set; } Property Value short TargeteType 获取或设置目标模块类型，用于识别连接的终点模块 public ModelTypes TargeteType { get; set; } Property Value ModelTypes"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleConnectionEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleConnectionEventArgs.html",
    "title": "Class ModuleConnectionEventArgs | DataMaster",
    "summary": "Class ModuleConnectionEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块间连接事件 public class ModuleConnectionEventArgs : EventArgs Inheritance object EventArgs ModuleConnectionEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModuleConnectionEventArgs(ModuleConnection) 模块间连接事件 public ModuleConnectionEventArgs(ModuleConnection moduleConnection) Parameters moduleConnection ModuleConnection Properties ModuleConnection 获取创建或移除的模块间连接数据模型 public ModuleConnection ModuleConnection { get; } Property Value ModuleConnection"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleDeletionEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleDeletionEventArgs.html",
    "title": "Class ModuleDeletionEventArgs | DataMaster",
    "summary": "Class ModuleDeletionEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块删除事件参数 public class ModuleDeletionEventArgs : EventArgs Inheritance object EventArgs ModuleDeletionEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModuleDeletionEventArgs(Guid, ModelTypes?) 模块删除事件参数 public ModuleDeletionEventArgs(Guid guid, ModelTypes? type = null) Parameters guid Guid 被删除模块的唯一标识符 type ModelTypes? 被删除模块的类型 Properties ModuleId 获取被删除模块的唯一标识符 public Guid ModuleId { get; init; } Property Value Guid Type 获取被删除模块的类型 public ModelTypes? Type { get; init; } Property Value ModelTypes?"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleInfo.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleInfo.html",
    "title": "Class ModuleInfo | DataMaster",
    "summary": "Class ModuleInfo Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块信息 public class ModuleInfo Inheritance object ModuleInfo Derived ConnectionSetupEventArgs OutputMouseEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AcceptableInputTypes 获取可接受的输入类型，仅在初始化时可设置 public Type[] AcceptableInputTypes { get; init; } Property Value Type[] OutputTypes 获取输出类型，仅在初始化时可设置 public Type[] OutputTypes { get; init; } Property Value Type[] SetInputType 获取或设置当前模块设定的输入类型 public Type? SetInputType { get; set; } Property Value Type SetOutputType 获取或设置当前模块设定的输出类型 public Type? SetOutputType { get; set; } Property Value Type"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleInputData.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleInputData.html",
    "title": "Class ModuleInputData | DataMaster",
    "summary": "Class ModuleInputData Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 从一个模块传递到另一个模块的输入数据 public class ModuleInputData Inheritance object ModuleInputData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModuleInputData(object) 从一个模块传递到另一个模块的输入数据 public ModuleInputData(object data) Parameters data object 传入的数据对象 Properties Data 获取实际传递的数据对象，仅在初始化时可设置 public object Data { get; init; } Property Value object SourceModuleId 获取源模块的唯一标识符， 仅在初始化时可设置 public Guid SourceModuleId { get; init; } Property Value Guid SourceOutputIndex 获取源模块输出的索引，指数据来自源模块的哪个输出端，仅在初始化时可设置 public short SourceOutputIndex { get; init; } Property Value short"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleViewModelData.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleViewModelData.html",
    "title": "Class ModuleViewModelData | DataMaster",
    "summary": "Class ModuleViewModelData Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块的视图模型数据 public class ModuleViewModelData Inheritance object ModuleViewModelData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModuleViewModelData(List<Guid>, List<Guid>, string, string) 模块的视图模型数据 public ModuleViewModelData(List<Guid> inputModuleIds, List<Guid> outputModuleIds, string setOutputType, string setAcceptableInputType) Parameters inputModuleIds List<Guid> 输入模块的唯一标识符列表 outputModuleIds List<Guid> 输出模块的唯一标识符列表 setOutputType string 当前模块设定的输出类型 setAcceptableInputType string 当前模块设定的可接受输入类型 Properties InputModuleIds 获取输入模块的唯一标识符列表，用于标识所有连接到此模块的输入模块 public List<Guid> InputModuleIds { get; } Property Value List<Guid> OutputModuleIds 获取或设置输出模块的唯一标识符列表，用于标识所有此模块连接的输出模块 public List<Guid> OutputModuleIds { get; } Property Value List<Guid> SetAcceptableInputType 获取当前模块设定的可接受输入类型 public string SetAcceptableInputType { get; } Property Value string Remarks Type 类型本身是不能被直接序列化，固使用 string ；使用 Type.GetType(string) 重新获取 Type 对象 SetOutputType 获取当前模块设定的输出类型 public string SetOutputType { get; } Property Value string Remarks Type 类型本身是不能被直接序列化，固使用 string ；使用 Type.GetType(string) 重新获取 Type 对象"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleWithConnections.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.ModuleWithConnections.html",
    "title": "Class ModuleWithConnections | DataMaster",
    "summary": "Class ModuleWithConnections Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 封装一个模块及其连接信息 public class ModuleWithConnections Inheritance object ModuleWithConnections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 在执行拓扑排序后，处理模块间的数据流动 Constructors ModuleWithConnections(IModule, List<(Guid TargetModuleId, short TargetInputIndex)>) 封装一个模块及其连接信息 public ModuleWithConnections(IModule module, List<(Guid TargetModuleId, short TargetInputIndex)> connections) Parameters module IModule 模块实例 connections List<(Guid TargetModuleId, short TargetInputIndex)> 模块的输出连接列表，每个元素包含目标模块ID和目标模块的输入索引 Remarks 在执行拓扑排序后，处理模块间的数据流动 Properties Connections 获取或设置模块的输出连接列表，列表中的每个元组包含一个目标模块ID和该目标模块的输入端口索引 public List<(Guid TargetModuleId, short TargetInputIndex)> Connections { get; set; } Property Value List<(Guid TargetModuleId, short TargetInputIndex)> Module 获取或设置模块实例，表示当前正在处理的模块 public IModule Module { get; set; } Property Value IModule"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.OutputMouseEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.OutputMouseEventArgs.html",
    "title": "Class OutputMouseEventArgs | DataMaster",
    "summary": "Class OutputMouseEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块输出点建立连接的鼠标事件 public class OutputMouseEventArgs : ModuleInfo Inheritance object ModuleInfo OutputMouseEventArgs Derived OutputMouseLeftButtonDownEventArgs OutputMouseUpEventArgs Inherited Members ModuleInfo.AcceptableInputTypes ModuleInfo.OutputTypes ModuleInfo.SetOutputType ModuleInfo.SetInputType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectionPath 获取连接线的路径，用于 UI 样式 public Path? ConnectionPath { get; init; } Property Value Path ModuleId 获取或设置当前模块的唯一标识符Guid public Guid ModuleId { get; set; } Property Value Guid OutputIndex 获取模块输出端点索引，仅在初始化时可设置 public short OutputIndex { get; init; } Property Value short Position 获取鼠标放下位置，仅在初始化时可设置 public Point Position { get; init; } Property Value Point Timestamp 获取事件发生的时间戳，仅在初始化时可设置 public DateTime Timestamp { get; init; } Property Value DateTime Type 获取发起事件的类型，仅在初始化时可设置 public ModelTypes Type { get; init; } Property Value ModelTypes"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.OutputMouseLeftButtonDownEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.OutputMouseLeftButtonDownEventArgs.html",
    "title": "Class OutputMouseLeftButtonDownEventArgs | DataMaster",
    "summary": "Class OutputMouseLeftButtonDownEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块输出点鼠标左键按下事件 public class OutputMouseLeftButtonDownEventArgs : OutputMouseEventArgs Inheritance object ModuleInfo OutputMouseEventArgs OutputMouseLeftButtonDownEventArgs Inherited Members OutputMouseEventArgs.ModuleId OutputMouseEventArgs.OutputIndex OutputMouseEventArgs.ConnectionPath OutputMouseEventArgs.Position OutputMouseEventArgs.Type OutputMouseEventArgs.Timestamp ModuleInfo.AcceptableInputTypes ModuleInfo.OutputTypes ModuleInfo.SetOutputType ModuleInfo.SetInputType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.OutputMouseUpEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.OutputMouseUpEventArgs.html",
    "title": "Class OutputMouseUpEventArgs | DataMaster",
    "summary": "Class OutputMouseUpEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 模块输出点鼠标抬起事件 public class OutputMouseUpEventArgs : OutputMouseEventArgs Inheritance object ModuleInfo OutputMouseEventArgs OutputMouseUpEventArgs Inherited Members OutputMouseEventArgs.ModuleId OutputMouseEventArgs.OutputIndex OutputMouseEventArgs.ConnectionPath OutputMouseEventArgs.Position OutputMouseEventArgs.Type OutputMouseEventArgs.Timestamp ModuleInfo.AcceptableInputTypes ModuleInfo.OutputTypes ModuleInfo.SetOutputType ModuleInfo.SetInputType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.PipelineInfo.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.PipelineInfo.html",
    "title": "Class PipelineInfo | DataMaster",
    "summary": "Class PipelineInfo Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 表示管道信息数据模型 public class PipelineInfo : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase PipelineInfo Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentState public RunState CurrentState { get; set; } Property Value RunState EndModuleId 获取或设置管道的结束模块ID public Guid EndModuleId { get; set; } Property Value Guid Id 获取管道的唯一标识符 public Guid Id { get; init; } Property Value Guid Remarks 由 StartModuleId + EndModuleId 的组合标识，随组合改变 IsInitSuccessful public bool IsInitSuccessful { get; set; } Property Value bool IsRun public bool IsRun { get; set; } Property Value bool ModuleCount 获取或设置管道中的模块数量 public int ModuleCount { get; set; } Property Value int Modules 获取或设置管道中的模块列表（拓扑排序后的顺序） public required List<ModuleWithConnections> Modules { get; set; } Property Value List<ModuleWithConnections> Name 获取或设置管道的名称 public required string Name { get; set; } Property Value string Remarks 由 StartModuleId + EndModuleId 的组合标识，随组合改变且可更改 StartModuleId 获取或设置管道的起始模块ID public Guid StartModuleId { get; set; } Property Value Guid Methods RestoreName() 恢复名称 public void RestoreName()"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.TaskAbnormalStopEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.TaskAbnormalStopEventArgs.html",
    "title": "Class TaskAbnormalStopEventArgs | DataMaster",
    "summary": "Class TaskAbnormalStopEventArgs Namespace MAS.SharedLibrary.Controls.ImageProceFlow Assembly MAS.SharedLibrary.dll 任务异常停止事件参数 public class TaskAbnormalStopEventArgs : EventArgs Inheritance object EventArgs TaskAbnormalStopEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Exception 获取或设置异常对象，表示任务停止时发生的错误 public required Exception Exception { get; set; } Property Value Exception OccurredTime 获取事件发生时间 public DateTime OccurredTime { get; } Property Value DateTime TaskId 获取或设置任务的标识符 public required Guid TaskId { get; set; } Property Value Guid TaskName 获取或设置任务的名称 public required string TaskName { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Controls.ImageProceFlow.html": {
    "href": "api/MAS.SharedLibrary.Controls.ImageProceFlow.html",
    "title": "Namespace MAS.SharedLibrary.Controls.ImageProceFlow | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Controls.ImageProceFlow Classes ConnectionLine 模块之间的连接线数据模型，表示从一个模块的指定输出端点到另一个模块的指定输入端点的连接 ConnectionLineEventArgs 连接线事件参数，包含连接线的相关信息 ConnectionSetupEventArgs 模块间的连接建立事件 ControlCleanupEventArgs 控件清理事件参数，通知控件准备清理 ControlModel 控件数据模型，工程文件重建、保存 ControlMovedEventArgs 控件移动事件，用于触发项目修改状态 ExecutionFlowServiceModel 表示执行流服务的数据模型，用于存储和管理管道相关的持久化信息 ModuleAdditionEventArgs 模块添加事件参数 ModuleConnection 模块连接数据模型，模块间的连接信息 ModuleConnectionEventArgs 模块间连接事件 ModuleDeletionEventArgs 模块删除事件参数 ModuleInfo 模块信息 ModuleInputData 从一个模块传递到另一个模块的输入数据 ModuleViewModelData 模块的视图模型数据 ModuleWithConnections 封装一个模块及其连接信息 OutputMouseEventArgs 模块输出点建立连接的鼠标事件 OutputMouseLeftButtonDownEventArgs 模块输出点鼠标左键按下事件 OutputMouseUpEventArgs 模块输出点鼠标抬起事件 PipelineInfo 表示管道信息数据模型 TaskAbnormalStopEventArgs 任务异常停止事件参数 Interfaces IConnectionLineManager 统一管理所有模块的连接线接口，包括不限于创建、更新、移除 IExecutionFlowManager 管理和协调模块间的流程的组件接口 IImageProceFlowControlsFactory 图像流程处理控件创建工厂接口 IModule 模块的统一接口 IModuleConnectionService 模块间的连接服务接口 IModuleControlManager 管理所有模块控件的生命周期和状态接口 IModuleOutput 定义图像处理模块的输出数据契约接口 IPipelineService 管道服务接口 IPipelineTaskHandler 管道任务处理程序接口 IVisionPersistenceService 视觉项目持久化数据服务接口 Enums ModelTypes 模块类型枚举"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.ControlModel.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.ControlModel.html",
    "title": "Class ControlModel | DataMaster",
    "summary": "Class ControlModel Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 控件数据模型 public class ControlModel Inheritance object ControlModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ControlModel(InstancesItem, double, double) 控件数据模型 public ControlModel(InstancesItem instancesItem, double x, double y) Parameters instancesItem InstancesItem 实例数据模型 x double 控件X坐标 y double 控件Y坐标 Properties AdditionalProperties 获取或设置扩展属性用于存储每个模块的附加属性 public Dictionary<string, object> AdditionalProperties { get; set; } Property Value Dictionary<string, object> Instance 获取或设置实例项数据模型 public InstancesItem Instance { get; set; } Property Value InstancesItem ModuleLifecycle 获取或设置对模块视图模型的引用 [JsonIgnore] public IModuleLifecycle? ModuleLifecycle { get; set; } Property Value IModuleLifecycle X 获取或设置模块的X坐标 public double X { get; set; } Property Value double Y 获取或设置模块的Y坐标 public double Y { get; set; } Property Value double"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.ControlMovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.ControlMovedEventArgs.html",
    "title": "Class ControlMovedEventArgs | DataMaster",
    "summary": "Class ControlMovedEventArgs Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 控件移动事件，用于触发项目修改状态 public class ControlMovedEventArgs Inheritance object ControlMovedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModule.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModule.html",
    "title": "Interface IModule | DataMaster",
    "summary": "Interface IModule Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 模块的统一接口 public interface IModule : IModuleLifecycle, IDisposable Inherited Members IModuleLifecycle.StateChanged IModuleLifecycle.OnDestroyControl IModuleLifecycle.CurrentState IModuleLifecycle.StartAsync() IModuleLifecycle.StopAsync() IDisposable.Dispose() Properties Instance 获取或设置实例数据 InstancesItem Instance { get; set; } Property Value InstancesItem Methods SetViewModel() 设置视图模型数据 void SetViewModel()"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleControlManager.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleControlManager.html",
    "title": "Interface IModuleControlManager | DataMaster",
    "summary": "Interface IModuleControlManager Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 管理所有模块控件的生命周期和状态接口 public interface IModuleControlManager Remarks 在主画布中统一管理模块的添加、删除、状态管理 Methods AreAllInstancesRunning() 检查是否所有实例都已启动 bool AreAllInstancesRunning() Returns bool 如果全部启动返回true，否则false AreAllInstancesStopped() 检查是否所有实例都已停止 bool AreAllInstancesStopped() Returns bool 如果全部停止返回true，否则false Create(InstancesItem, Point, Canvas) 创建并添加一个新的模块控件到指定的画布，并将其数据模型添加到内部管理列表中 void Create(InstancesItem instancesItem, Point location, Canvas parentCanvas) Parameters instancesItem InstancesItem 模块实例数据模型 location Point 模块控件在画布上的初始位置 parentCanvas Canvas 要添加控件的父画布 GetControlModels() 获取控件模型列表 List<ControlModel> GetControlModels() Returns List<ControlModel> ControlModel 对象列表 GetHandler(ToolboxItemType) 获取模块处理实例 IModuleHandler GetHandler(ToolboxItemType type) Parameters type ToolboxItemType 要获取的模块实例类型 Returns IModuleHandler 实现了 IModuleHandler 具体对象 Exceptions NotSupportedException GetRunningInstanceCount() 获取正在运行的实例数量 int GetRunningInstanceCount() Returns int 实例的运行数量 GetTotalInstanceCount() 获取存在的实例总数 int GetTotalInstanceCount() Returns int 所有存在的实例的数量 RemoveModuleControl(string) 根据指定的模块实例键移除对应的模块控件数据 void RemoveModuleControl(string key) Parameters key string 要移除控件的实例键 Remarks 从数据持久化中移除 RestoreControlToCanvas(ControlModel, Canvas) 根据指定的控件模型数据重建控件并添加到指定的画布 void RestoreControlToCanvas(ControlModel model, Canvas canvas) Parameters model ControlModel 要重建的单个控件数据模型 canvas Canvas 要添加控件的目标画布 SerializeUpdateControlModelAsync(Canvas) 异步更新控件数据模型并将其序列化保存 Task SerializeUpdateControlModelAsync(Canvas parentCanvas) Parameters parentCanvas Canvas 需要更新控件数据模型的父画布 Returns Task 表示异步操作的任务 StartAllInstancesAsync() 异步启动所有模块实例 Task<bool> StartAllInstancesAsync() Returns Task<bool> 异步操作任务结果，如果所有模块启动成功返回true，否则返回false StopAllInstancesAsync() 停止所有模块实例 Task<bool> StopAllInstancesAsync() Returns Task<bool> 如果所有模块成功停止，返回true；否则返回false Events AllInstancesStarted 当所有模块实例启动完成时触发的事件 event EventHandler AllInstancesStarted Event Type EventHandler AllInstancesStopped 当所有模块实例停止完成时触发的事件 event EventHandler AllInstancesStopped Event Type EventHandler"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleControslFactory.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleControslFactory.html",
    "title": "Interface IModuleControslFactory | DataMaster",
    "summary": "Interface IModuleControslFactory Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 模块控件创建工厂接口 public interface IModuleControslFactory Methods Create(IModule) 根据实现接口的具体类型创建对应的控件实例 [Obsolete(\"Use the Create(ToolboxItem) method instead.\", true)] Control Create(IModule viewModelData) Parameters viewModelData IModule 实现接口的具体类型 Returns Control 创建好的 Control 对象 Exceptions InvalidOperationException 如果类型未知或不支持则抛出此异常 Create(InstancesItem) 创建控件，根据 InstancesItem 的类型 Control Create(InstancesItem item) Parameters item InstancesItem Returns Control 创建好的 Control 对象 Exceptions InvalidOperationException 如果类型未知或不支持则抛出此异常 Create(string) 根据实例键创建对应的控件 [Obsolete(\"Use the Create(ToolboxItem) method instead.\", true)] Control Create(string key) Parameters key string 实例的唯一键 Returns Control 创建好的 Control 对象 Exceptions InvalidOperationException 如果类型未知或不支持则抛出此异常"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleHandler.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleHandler.html",
    "title": "Interface IModuleHandler | DataMaster",
    "summary": "Interface IModuleHandler Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 模块处理程序接口，用于处理特定模块类型的存在检查、实例创建和配置数据获取 public interface IModuleHandler Properties ModuleType 获取模块类型 ToolboxItemType ModuleType { get; } Property Value ToolboxItemType Methods Create(object) 根据提供的配置对象创建模块实例 void Create(object config) Parameters config object 模块的配置数据 Exceptions InvalidOperationException 如果配置数据格式错误、配置类型不支持或模块创建失败，将抛出此异常 Exists(string) 检查指定键对应的模块实例是否存在 bool Exists(string key) Parameters key string 要检查的模块的唯一标识符 Returns bool 如果存在，则返回 true；否则返回 false GetConfig(string) 获取指定键对应的模块实例的配置信息 object? GetConfig(string key) Parameters key string 模块实例的唯一标识符 Returns object 一个对象，表示模块实例的配置信息；如果指定键的模块不存在，则返回 null"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleLifecycle.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.IModuleLifecycle.html",
    "title": "Interface IModuleLifecycle | DataMaster",
    "summary": "Interface IModuleLifecycle Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 模块生命周期的管理接口 public interface IModuleLifecycle Properties CurrentState 获取或设置当前状态 RunState CurrentState { get; set; } Property Value RunState Methods StartAsync() 异步启动 Task<bool> StartAsync() Returns Task<bool> 表示异步操作的任务，启动成功返回true，否则false StopAsync() 异步停止 Task StopAsync() Returns Task Events OnDestroyControl 模块销毁事件 event EventHandler? OnDestroyControl Event Type EventHandler StateChanged 状态变化时触发的事件 event EventHandler<RunState> StateChanged Event Type EventHandler<RunState>"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.InstancesItem.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.InstancesItem.html",
    "title": "Class InstancesItem | DataMaster",
    "summary": "Class InstancesItem Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll 实例项数据模型 public class InstancesItem : INotifyPropertyChanged Inheritance object InstancesItem Implements INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsAdded 获取或设置是否已被添加到画布中 public bool IsAdded { get; set; } Property Value bool Key 获取或设置实例键 public string Key { get; set; } Property Value string ModuleId 获取或设置当前模块的唯一标识符Guid public Guid ModuleId { get; set; } Property Value Guid Title 获取或设置标题 public string Title { get; set; } Property Value string Type 获取或设置类型 public ToolboxItemType Type { get; set; } Property Value ToolboxItemType Methods OnPropertyChanged(string) 触发属性更改通知 protected virtual void OnPropertyChanged(string propertyName) Parameters propertyName string 更改的属性名称 Events PropertyChanged 触发属性更改通知的事件 public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.ToolboxItemType.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.ToolboxItemType.html",
    "title": "Enum ToolboxItemType | DataMaster",
    "summary": "Enum ToolboxItemType Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Assembly MAS.SharedLibrary.dll ToolboxItem 类型枚举 [JsonConverter(typeof(StringEnumConverter))] public enum ToolboxItemType Fields Communication = 0 通讯 DataExport = 2 数据导出 Database = 1 数据库"
  },
  "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.html": {
    "href": "api/MAS.SharedLibrary.Controls.InteractiveDataFlow.html",
    "title": "Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Controls.InteractiveDataFlow Classes ControlModel 控件数据模型 ControlMovedEventArgs 控件移动事件，用于触发项目修改状态 InstancesItem 实例项数据模型 Interfaces IModule 模块的统一接口 IModuleControlManager 管理所有模块控件的生命周期和状态接口 IModuleControslFactory 模块控件创建工厂接口 IModuleHandler 模块处理程序接口，用于处理特定模块类型的存在检查、实例创建和配置数据获取 IModuleLifecycle 模块生命周期的管理接口 Enums ToolboxItemType ToolboxItem 类型枚举"
  },
  "api/MAS.SharedLibrary.Controls.LoadAnimation.ILoadingService.html": {
    "href": "api/MAS.SharedLibrary.Controls.LoadAnimation.ILoadingService.html",
    "title": "Interface ILoadingService | DataMaster",
    "summary": "Interface ILoadingService Namespace MAS.SharedLibrary.Controls.LoadAnimation Assembly MAS.SharedLibrary.dll 加载动画服务接口 public interface ILoadingService Methods DestroyLoadingAnimation() 销毁加载动画 void DestroyLoadingAnimation() ShowLoadingAnimation(ContentControl?) 显示加载动画 void ShowLoadingAnimation(ContentControl? host) Parameters host ContentControl 容器"
  },
  "api/MAS.SharedLibrary.Controls.LoadAnimation.html": {
    "href": "api/MAS.SharedLibrary.Controls.LoadAnimation.html",
    "title": "Namespace MAS.SharedLibrary.Controls.LoadAnimation | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Controls.LoadAnimation Interfaces ILoadingService 加载动画服务接口"
  },
  "api/MAS.SharedLibrary.Controls.Notifications.INotificationHistoryService.html": {
    "href": "api/MAS.SharedLibrary.Controls.Notifications.INotificationHistoryService.html",
    "title": "Interface INotificationHistoryService | DataMaster",
    "summary": "Interface INotificationHistoryService Namespace MAS.SharedLibrary.Controls.Notifications Assembly MAS.SharedLibrary.dll 通知历史记录服务的接口 public interface INotificationHistoryService Remarks 用于存储、查看整个应用程序生命周期的所有通知 Methods AddNotification(NotificationRecord) 添加一条通知到历史记录 void AddNotification(NotificationRecord notification) Parameters notification NotificationRecord 通知信息 ClearNotifications() 清除所有通知历史记录 void ClearNotifications() GetAllNotifications() 获取所有的通知历史记录 IReadOnlyList<NotificationRecord> GetAllNotifications() Returns IReadOnlyList<NotificationRecord> 通知记录的只读列表 SaveNotificationsToFileAsync(string) 异步将所有通知保存到指定的文件路径 Task SaveNotificationsToFileAsync(string filePath) Parameters filePath string 保存文件的路径 Returns Task 异步任务 Events NotificationsUpdated 通知数据更新事件 event EventHandler<NotificationRecord> NotificationsUpdated Event Type EventHandler<NotificationRecord>"
  },
  "api/MAS.SharedLibrary.Controls.Notifications.INotificationService.html": {
    "href": "api/MAS.SharedLibrary.Controls.Notifications.INotificationService.html",
    "title": "Interface INotificationService | DataMaster",
    "summary": "Interface INotificationService Namespace MAS.SharedLibrary.Controls.Notifications Assembly MAS.SharedLibrary.dll 普通的消息通知控件接口 public interface INotificationService Methods Show(string, ContentControl) 显示消息通知 void Show(string message, ContentControl host) Parameters message string 信息内容 host ContentControl 控件名称"
  },
  "api/MAS.SharedLibrary.Controls.Notifications.ITipsNotificationService.html": {
    "href": "api/MAS.SharedLibrary.Controls.Notifications.ITipsNotificationService.html",
    "title": "Interface ITipsNotificationService | DataMaster",
    "summary": "Interface ITipsNotificationService Namespace MAS.SharedLibrary.Controls.Notifications Assembly MAS.SharedLibrary.dll Tips 通知提示服务接口 public interface ITipsNotificationService Methods Error(string, InfoPosition, Action?, Window?) 错误提示 void Error(string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 Error(string, string, InfoPosition, Action?, Window?) 错误提示 void Error(string title, string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters title string 标题 message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 Info(string, InfoPosition, Action?, Window?) 信息提示 void Info(string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 Info(string, string, InfoPosition, Action?, Window?) 信息提示 void Info(string title, string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters title string 标题 message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 Success(string, InfoPosition, Action?, Window?) 成功提示 void Success(string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 Success(string, string, InfoPosition, Action?, Window?) 成功提示 void Success(string title, string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters title string 标题 message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 Warning(string, InfoPosition, Action?, Window?) 警告提示 void Warning(string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本 Warning(string, string, InfoPosition, Action?, Window?) 警告提示 void Warning(string title, string message, InfoPosition position = InfoPosition.BottomRight, Action? onClick = null, Window? ownerWindow = null) Parameters title string 标题 message string 内容 position InfoPosition 通知显示的位置 onClick Action 点击时的回调操作 ownerWindow Window 指定窗口作为通知的宿主 Remarks 优先查找本地语言文化资源使用，如果未找到则使用原文本"
  },
  "api/MAS.SharedLibrary.Controls.Notifications.InfoPosition.html": {
    "href": "api/MAS.SharedLibrary.Controls.Notifications.InfoPosition.html",
    "title": "Enum InfoPosition | DataMaster",
    "summary": "Enum InfoPosition Namespace MAS.SharedLibrary.Controls.Notifications Assembly MAS.SharedLibrary.dll 通知信息显示的位置选项 public enum InfoPosition Fields BottomLeft = 3 在通知区域的左下角显示 BottomRight = 4 在通知区域的右下角显示 Center = 0 在通知区域居中显示 TopLeft = 1 在通知区域的左上角显示 TopRight = 2 在通知区域的右上角显示"
  },
  "api/MAS.SharedLibrary.Controls.Notifications.NotificationRecord.html": {
    "href": "api/MAS.SharedLibrary.Controls.Notifications.NotificationRecord.html",
    "title": "Class NotificationRecord | DataMaster",
    "summary": "Class NotificationRecord Namespace MAS.SharedLibrary.Controls.Notifications Assembly MAS.SharedLibrary.dll 通知记录的数据模型 public class NotificationRecord Inheritance object NotificationRecord Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NotificationRecord(string, string, NotificationType, Action?) 通知记录的数据模型 public NotificationRecord(string title, string message, NotificationType type, Action? onClick = null) Parameters title string 标题 message string 内容 type NotificationType 类型 onClick Action 点击回调 Properties IconKind 获取通知图标类型 public PackIconKind IconKind { get; init; } Property Value PackIconKind Message 获取通知内容 public string Message { get; init; } Property Value string OnClick 获取点击回调 public Action? OnClick { get; init; } Property Value Action Timestamp 获取通知时间 public DateTime Timestamp { get; init; } Property Value DateTime Title 获取通知标题 public string Title { get; init; } Property Value string Type 获取通知类型 public NotificationType Type { get; init; } Property Value NotificationType"
  },
  "api/MAS.SharedLibrary.Controls.Notifications.NotificationType.html": {
    "href": "api/MAS.SharedLibrary.Controls.Notifications.NotificationType.html",
    "title": "Enum NotificationType | DataMaster",
    "summary": "Enum NotificationType Namespace MAS.SharedLibrary.Controls.Notifications Assembly MAS.SharedLibrary.dll 通知类型 public enum NotificationType Fields Critical = 4 严重 Error = 3 错误 Info = 0 信息 Success = 1 成功 Warning = 2 警告"
  },
  "api/MAS.SharedLibrary.Controls.Notifications.html": {
    "href": "api/MAS.SharedLibrary.Controls.Notifications.html",
    "title": "Namespace MAS.SharedLibrary.Controls.Notifications | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Controls.Notifications Classes NotificationRecord 通知记录的数据模型 Interfaces INotificationHistoryService 通知历史记录服务的接口 INotificationService 普通的消息通知控件接口 ITipsNotificationService Tips 通知提示服务接口 Enums InfoPosition 通知信息显示的位置选项 NotificationType 通知类型"
  },
  "api/MAS.SharedLibrary.Converters.BoolToColorConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.BoolToColorConverter.html",
    "title": "Class BoolToColorConverter | DataMaster",
    "summary": "Class BoolToColorConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将布尔值转换为 SolidColorBrush public sealed class BoolToColorConverter : IValueConverter Inheritance object BoolToColorConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.BoolToSymbolConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.BoolToSymbolConverter.html",
    "title": "Class BoolToSymbolConverter | DataMaster",
    "summary": "Class BoolToSymbolConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 用于将布尔值转换为符号名称的转换器。常用于根据条件更改UI元素的图标 public sealed class BoolToSymbolConverter : IValueConverter Inheritance object BoolToSymbolConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object? Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.BooleanToAlignmentConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.BooleanToAlignmentConverter.html",
    "title": "Class BooleanToAlignmentConverter | DataMaster",
    "summary": "Class BooleanToAlignmentConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 转换布尔值到水平对齐枚举，用于确定消息在界面上的对齐方式 public sealed class BooleanToAlignmentConverter : IValueConverter Inheritance object BooleanToAlignmentConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks true 对应 Right，表示用户消息 false 对应 Left，表示 AI 消息 Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object? Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.BooleanToBackgroundConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.BooleanToBackgroundConverter.html",
    "title": "Class BooleanToBackgroundConverter | DataMaster",
    "summary": "Class BooleanToBackgroundConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll public sealed class BooleanToBackgroundConverter : IValueConverter Inheritance object BooleanToBackgroundConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.BooleanToStringConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.BooleanToStringConverter.html",
    "title": "Class BooleanToStringConverter | DataMaster",
    "summary": "Class BooleanToStringConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 编辑状态转换器 public sealed class BooleanToStringConverter : IValueConverter Inheritance object BooleanToStringConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks - 为 true 时，返回字符串星号 (*) - 为 false 时，返回空字符串 Methods Convert(object, Type, object?, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.BooleanToSymbolConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.BooleanToSymbolConverter.html",
    "title": "Class BooleanToSymbolConverter | DataMaster",
    "summary": "Class BooleanToSymbolConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将布尔值转换为对应的 SymbolIcon 符号 public sealed class BooleanToSymbolConverter : IValueConverter Inheritance object BooleanToSymbolConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.BooleanToVisibilityConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.BooleanToVisibilityConverter.html",
    "title": "Class BooleanToVisibilityConverter | DataMaster",
    "summary": "Class BooleanToVisibilityConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将布尔值转换为Visibility枚举值的转换器。 当布尔值为true时，返回Visibility.Visible，使控件可见； 当布尔值为false时，返回Visibility.Collapsed，使控件隐藏 public sealed class BooleanToVisibilityConverter : IValueConverter Inheritance object BooleanToVisibilityConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.DeveloperModeToSymbolConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.DeveloperModeToSymbolConverter.html",
    "title": "Class DeveloperModeToSymbolConverter | DataMaster",
    "summary": "Class DeveloperModeToSymbolConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 IsDeveloperMode 布尔值转换为相应的 Symbol 图标 public sealed class DeveloperModeToSymbolConverter : IValueConverter Inheritance object DeveloperModeToSymbolConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.DeveloperModeToTextConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.DeveloperModeToTextConverter.html",
    "title": "Class DeveloperModeToTextConverter | DataMaster",
    "summary": "Class DeveloperModeToTextConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 IsDeveloperMode 布尔值转换为相应的文本 public class DeveloperModeToTextConverter : IValueConverter Inheritance object DeveloperModeToTextConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.DifficultyLevelToStringConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.DifficultyLevelToStringConverter.html",
    "title": "Class DifficultyLevelToStringConverter | DataMaster",
    "summary": "Class DifficultyLevelToStringConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 DifficultyLevel 的数值映射为字符串描述 public sealed class DifficultyLevelToStringConverter : IValueConverter Inheritance object DifficultyLevelToStringConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.EmptyTitleConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.EmptyTitleConverter.html",
    "title": "Class EmptyTitleConverter | DataMaster",
    "summary": "Class EmptyTitleConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 空标题转换器 public sealed class EmptyTitleConverter : IValueConverter Inheritance object EmptyTitleConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.EnumToBooleanConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.EnumToBooleanConverter.html",
    "title": "Class EnumToBooleanConverter | DataMaster",
    "summary": "Class EnumToBooleanConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 根据当前值是否与指定的枚举值匹配，将枚举值转换为布尔值 public sealed class EnumToBooleanConverter : IValueConverter Inheritance object EnumToBooleanConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.InfoLevelToIconColorConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.InfoLevelToIconColorConverter.html",
    "title": "Class InfoLevelToIconColorConverter | DataMaster",
    "summary": "Class InfoLevelToIconColorConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 用于将信息等级转换为对应的颜色 public sealed class InfoLevelToIconColorConverter : IValueConverter Inheritance object InfoLevelToIconColorConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.InfoLevelToIconKindConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.InfoLevelToIconKindConverter.html",
    "title": "Class InfoLevelToIconKindConverter | DataMaster",
    "summary": "Class InfoLevelToIconKindConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 用于将信息等级转换为对应的Material Design图标 public sealed class InfoLevelToIconKindConverter : IValueConverter Inheritance object InfoLevelToIconKindConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.InstallStatusToColorConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.InstallStatusToColorConverter.html",
    "title": "Class InstallStatusToColorConverter | DataMaster",
    "summary": "Class InstallStatusToColorConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 基于组件的安装状态安装的状态颜色转换器 public sealed class InstallStatusToColorConverter : IValueConverter Inheritance object InstallStatusToColorConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.InverseBooleanConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.InverseBooleanConverter.html",
    "title": "Class InverseBooleanConverter | DataMaster",
    "summary": "Class InverseBooleanConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 反转布尔值的逆布尔转换器，与绑定的布尔属性相反 public sealed class InverseBooleanConverter : IValueConverter Inheritance object InverseBooleanConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.InverseBooleanToVisibilityConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.InverseBooleanToVisibilityConverter.html",
    "title": "Class InverseBooleanToVisibilityConverter | DataMaster",
    "summary": "Class InverseBooleanToVisibilityConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 反转布尔值并将其转换为Visibility枚举值的转换器 当布尔值为true时，返回Visibility.Collapsed； 当布尔值为false时，返回Visibility.Visible public sealed class InverseBooleanToVisibilityConverter : IValueConverter Inheritance object InverseBooleanToVisibilityConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.InverseVisibilityConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.InverseVisibilityConverter.html",
    "title": "Class InverseVisibilityConverter | DataMaster",
    "summary": "Class InverseVisibilityConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 反转可见性状态的值转换器 public sealed class InverseVisibilityConverter : IValueConverter Inheritance object InverseVisibilityConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Converts Visibility.Visible to Visibility.Collapsed and vice versa Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.JsonConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.JsonConverter.html",
    "title": "Class JsonConverter | DataMaster",
    "summary": "Class JsonConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 在 WPF 绑定中进行 JSON 对象和字符串之间的转换 public sealed class JsonConverter : IValueConverter Inheritance object JsonConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object? ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.LanguageConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.LanguageConverter.html",
    "title": "Class LanguageConverter | DataMaster",
    "summary": "Class LanguageConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 语言转换器，用于将语言键（字符串）转换为对应的本地化字符串 public class LanguageConverter : IValueConverter Inheritance object LanguageConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.ListToStringConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.ListToStringConverter.html",
    "title": "Class ListToStringConverter | DataMaster",
    "summary": "Class ListToStringConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 short、int 或 string 的列表转换为一个逗号分隔的字符串 public sealed class ListToStringConverter : IValueConverter Inheritance object ListToStringConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.MarginConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.MarginConverter.html",
    "title": "Class MarginConverter | DataMaster",
    "summary": "Class MarginConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 根据传入对象的类型返回不同节点的 Thickness 值 public class MarginConverter : IValueConverter Inheritance object MarginConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.MultiBooleanToIsEnabledConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.MultiBooleanToIsEnabledConverter.html",
    "title": "Class MultiBooleanToIsEnabledConverter | DataMaster",
    "summary": "Class MultiBooleanToIsEnabledConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 仅当所有输入布尔值均为 true 时返回 true，否则返回 false public sealed class MultiBooleanToIsEnabledConverter : IMultiValueConverter Inheritance object MultiBooleanToIsEnabledConverter Implements IMultiValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object[], Type, object, CultureInfo) Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target. public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture) Parameters values object[] The array of values that the source bindings in the MultiBinding produces. The value UnsetValue indicates that the source binding has no value to provide for conversion. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. A return value of DependencyProperty.UnsetValue indicates that the converter did not produce a value, and that the binding will use the FallbackValue if it is available, or else will use the default value. A return value of Binding.DoNothing indicates that the binding does not transfer the value or use the FallbackValue or the default value. ConvertBack(object, Type[], object, CultureInfo) Converts a binding target value to the source binding values. public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) Parameters value object The value that the binding target produces. targetTypes Type[] The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object[] An array of values that have been converted from the target value back to the source values."
  },
  "api/MAS.SharedLibrary.Converters.NotificationTypeToColorConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.NotificationTypeToColorConverter.html",
    "title": "Class NotificationTypeToColorConverter | DataMaster",
    "summary": "Class NotificationTypeToColorConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 NotificationType 转换为对应的颜色 public sealed class NotificationTypeToColorConverter : IValueConverter Inheritance object NotificationTypeToColorConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.NullToBooleanConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.NullToBooleanConverter.html",
    "title": "Class NullToBooleanConverter | DataMaster",
    "summary": "Class NullToBooleanConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将输入值（通常是一个对象）转换为布尔值 如果输入值为 null，则返回 false；否则返回 true public sealed class NullToBooleanConverter : IValueConverter Inheritance object NullToBooleanConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.NullToVisibilityConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.NullToVisibilityConverter.html",
    "title": "Class NullToVisibilityConverter | DataMaster",
    "summary": "Class NullToVisibilityConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 null 值转换为 Visibility。如果值为 null，则转换结果为 Collapsed，否则为 Visible public sealed class NullToVisibilityConverter : IValueConverter Inheritance object NullToVisibilityConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.PaddingConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.PaddingConverter.html",
    "title": "Class PaddingConverter | DataMaster",
    "summary": "Class PaddingConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将窗口大小转换为 Padding 值 public sealed class PaddingConverter : IValueConverter Inheritance object PaddingConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks 参数格式示例: \"0.1,0\" 表示左右 padding 为窗口宽度的 10%，上下 padding 为 0 Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.PaneDisplayModeToIndexConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.PaneDisplayModeToIndexConverter.html",
    "title": "Class PaneDisplayModeToIndexConverter | DataMaster",
    "summary": "Class PaneDisplayModeToIndexConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将导航视图的面板显示模式转换为对应的索引值 public sealed class PaneDisplayModeToIndexConverter : IValueConverter Inheritance object PaneDisplayModeToIndexConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.PercentageConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.PercentageConverter.html",
    "title": "Class PercentageConverter | DataMaster",
    "summary": "Class PercentageConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 ActualWidth 和 ActualHeight 转换为百分比 public sealed class PercentageConverter : IValueConverter Inheritance object PercentageConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.PipelineStateToIsEnabledConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.PipelineStateToIsEnabledConverter.html",
    "title": "Class PipelineStateToIsEnabledConverter | DataMaster",
    "summary": "Class PipelineStateToIsEnabledConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 管道的触发按钮启用状态转换 public sealed class PipelineStateToIsEnabledConverter : IMultiValueConverter Inheritance object PipelineStateToIsEnabledConverter Implements IMultiValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object[], Type, object, CultureInfo) Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target. public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture) Parameters values object[] The array of values that the source bindings in the MultiBinding produces. The value UnsetValue indicates that the source binding has no value to provide for conversion. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. A return value of DependencyProperty.UnsetValue indicates that the converter did not produce a value, and that the binding will use the FallbackValue if it is available, or else will use the default value. A return value of Binding.DoNothing indicates that the binding does not transfer the value or use the FallbackValue or the default value. ConvertBack(object, Type[], object, CultureInfo) Converts a binding target value to the source binding values. public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) Parameters value object The value that the binding target produces. targetTypes Type[] The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object[] An array of values that have been converted from the target value back to the source values."
  },
  "api/MAS.SharedLibrary.Converters.PointToStringConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.PointToStringConverter.html",
    "title": "Class PointToStringConverter | DataMaster",
    "summary": "Class PointToStringConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 Point 转换为格式化的字符串 public sealed class PointToStringConverter : IValueConverter Inheritance object PointToStringConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.ProgressToColorConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.ProgressToColorConverter.html",
    "title": "Class ProgressToColorConverter | DataMaster",
    "summary": "Class ProgressToColorConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将进度值转换为对应颜色的转换器 public sealed class ProgressToColorConverter : IValueConverter Inheritance object ProgressToColorConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.RunStateToEnabledConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.RunStateToEnabledConverter.html",
    "title": "Class RunStateToEnabledConverter | DataMaster",
    "summary": "Class RunStateToEnabledConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 运行状态到启用转换器 public sealed class RunStateToEnabledConverter : IValueConverter Inheritance object RunStateToEnabledConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.RunStateToIsEnabledConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.RunStateToIsEnabledConverter.html",
    "title": "Class RunStateToIsEnabledConverter | DataMaster",
    "summary": "Class RunStateToIsEnabledConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 根据 RunState 枚举值返回控件是否启用（只有 Stopped 状态返回 true） public sealed class RunStateToIsEnabledConverter : IValueConverter Inheritance object RunStateToIsEnabledConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.RunStateToIsRunningConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.RunStateToIsRunningConverter.html",
    "title": "Class RunStateToIsRunningConverter | DataMaster",
    "summary": "Class RunStateToIsRunningConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 根据 RunState 枚举值返回控件是否启用（只有 Running 状态返回 true） public sealed class RunStateToIsRunningConverter : IValueConverter Inheritance object RunStateToIsRunningConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.ScaleToPixelConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.ScaleToPixelConverter.html",
    "title": "Class ScaleToPixelConverter | DataMaster",
    "summary": "Class ScaleToPixelConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 比例像素转换器。根据 DPI 和当前的缩放比例计算正确的网格大小 public sealed class ScaleToPixelConverter : IValueConverter Inheritance object ScaleToPixelConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object?, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.ScaleToStringConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.ScaleToStringConverter.html",
    "title": "Class ScaleToStringConverter | DataMaster",
    "summary": "Class ScaleToStringConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 显示和输入百分比格式的 Scale，将 double 和 string 之间进行转换 public sealed class ScaleToStringConverter : IValueConverter Inheritance object ScaleToStringConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.SizeToStringConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.SizeToStringConverter.html",
    "title": "Class SizeToStringConverter | DataMaster",
    "summary": "Class SizeToStringConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 Size 对象转换为字符串（比如“800×600”） public sealed class SizeToStringConverter : IValueConverter Inheritance object SizeToStringConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.StateToVisibilityConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.StateToVisibilityConverter.html",
    "title": "Class StateToVisibilityConverter | DataMaster",
    "summary": "Class StateToVisibilityConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 RunState 状态转换为 Visibility 值 public sealed class StateToVisibilityConverter : IValueConverter Inheritance object StateToVisibilityConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.TagConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.TagConverter.html",
    "title": "Class TagConverter | DataMaster",
    "summary": "Class TagConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 提供从 TreeViewControlItem 对象转换为其 Tag 属性值的功能 public sealed class TagConverter : IValueConverter Inheritance object TagConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object? Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.ThemeToIndexConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.ThemeToIndexConverter.html",
    "title": "Class ThemeToIndexConverter | DataMaster",
    "summary": "Class ThemeToIndexConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 负责将应用程序的主题（暗黑、高对比度）转换为对应的索引值 public sealed class ThemeToIndexConverter : IValueConverter Inheritance object ThemeToIndexConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.TitleColonConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.TitleColonConverter.html",
    "title": "Class TitleColonConverter | DataMaster",
    "summary": "Class TitleColonConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 标题冒号转换器 public sealed class TitleColonConverter : IValueConverter Inheritance object TitleColonConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.ToolboxItemTypeToSymbolConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.ToolboxItemTypeToSymbolConverter.html",
    "title": "Class ToolboxItemTypeToSymbolConverter | DataMaster",
    "summary": "Class ToolboxItemTypeToSymbolConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 根据 ToolboxItemType 返回相应的 Symbol 图标 public sealed class ToolboxItemTypeToSymbolConverter : IValueConverter Inheritance object ToolboxItemTypeToSymbolConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object? Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object? ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.TypeToNameConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.TypeToNameConverter.html",
    "title": "Class TypeToNameConverter | DataMaster",
    "summary": "Class TypeToNameConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 将 Type 对象转换为其名称的字符串表示形式 public sealed class TypeToNameConverter : IValueConverter Inheritance object TypeToNameConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.VisionStatusToColorConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.VisionStatusToColorConverter.html",
    "title": "Class VisionStatusToColorConverter | DataMaster",
    "summary": "Class VisionStatusToColorConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 根据机器视觉系统的检测结果（\"OK\", \"NG\"）转换为相应的颜色 public sealed class VisionStatusToColorConverter : IValueConverter Inheritance object VisionStatusToColorConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object, Type, object, CultureInfo) Converts a value. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object, Type, object, CultureInfo) Converts a value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.ZeroToVisibilityConverter.html": {
    "href": "api/MAS.SharedLibrary.Converters.ZeroToVisibilityConverter.html",
    "title": "Class ZeroToVisibilityConverter | DataMaster",
    "summary": "Class ZeroToVisibilityConverter Namespace MAS.SharedLibrary.Converters Assembly MAS.SharedLibrary.dll 用于将集合的计数转换为 Visibility，当集合为空时 Collapsed；否则 Visible public sealed class ZeroToVisibilityConverter : IValueConverter Inheritance object ZeroToVisibilityConverter Implements IValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Convert(object?, Type, object?, CultureInfo) Converts a value. public object Convert(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value produced by the binding source. targetType Type The type of the binding target property. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used. ConvertBack(object?, Type, object?, CultureInfo) Converts a value. public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture) Parameters value object The value that is produced by the binding target. targetType Type The type to convert to. parameter object The converter parameter to use. culture CultureInfo The culture to use in the converter. Returns object A converted value. If the method returns null, the valid null value is used."
  },
  "api/MAS.SharedLibrary.Converters.html": {
    "href": "api/MAS.SharedLibrary.Converters.html",
    "title": "Namespace MAS.SharedLibrary.Converters | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Converters Classes BoolToColorConverter 将布尔值转换为 SolidColorBrush BoolToSymbolConverter 用于将布尔值转换为符号名称的转换器。常用于根据条件更改UI元素的图标 BooleanToAlignmentConverter 转换布尔值到水平对齐枚举，用于确定消息在界面上的对齐方式 BooleanToBackgroundConverter BooleanToStringConverter 编辑状态转换器 BooleanToSymbolConverter 将布尔值转换为对应的 SymbolIcon 符号 BooleanToVisibilityConverter 将布尔值转换为Visibility枚举值的转换器。 当布尔值为true时，返回Visibility.Visible，使控件可见； 当布尔值为false时，返回Visibility.Collapsed，使控件隐藏 DeveloperModeToSymbolConverter 将 IsDeveloperMode 布尔值转换为相应的 Symbol 图标 DeveloperModeToTextConverter 将 IsDeveloperMode 布尔值转换为相应的文本 DifficultyLevelToStringConverter 将 DifficultyLevel 的数值映射为字符串描述 EmptyTitleConverter 空标题转换器 EnumToBooleanConverter 根据当前值是否与指定的枚举值匹配，将枚举值转换为布尔值 InfoLevelToIconColorConverter 用于将信息等级转换为对应的颜色 InfoLevelToIconKindConverter 用于将信息等级转换为对应的Material Design图标 InstallStatusToColorConverter 基于组件的安装状态安装的状态颜色转换器 InverseBooleanConverter 反转布尔值的逆布尔转换器，与绑定的布尔属性相反 InverseBooleanToVisibilityConverter 反转布尔值并将其转换为Visibility枚举值的转换器 当布尔值为true时，返回Visibility.Collapsed； 当布尔值为false时，返回Visibility.Visible InverseVisibilityConverter 反转可见性状态的值转换器 JsonConverter 在 WPF 绑定中进行 JSON 对象和字符串之间的转换 LanguageConverter 语言转换器，用于将语言键（字符串）转换为对应的本地化字符串 ListToStringConverter 将 short、int 或 string 的列表转换为一个逗号分隔的字符串 MarginConverter 根据传入对象的类型返回不同节点的 Thickness 值 MultiBooleanToIsEnabledConverter 仅当所有输入布尔值均为 true 时返回 true，否则返回 false NotificationTypeToColorConverter 将 NotificationType 转换为对应的颜色 NullToBooleanConverter 将输入值（通常是一个对象）转换为布尔值 如果输入值为 null，则返回 false；否则返回 true NullToVisibilityConverter 将 null 值转换为 Visibility。如果值为 null，则转换结果为 Collapsed，否则为 Visible PaddingConverter 将窗口大小转换为 Padding 值 PaneDisplayModeToIndexConverter 将导航视图的面板显示模式转换为对应的索引值 PercentageConverter 将 ActualWidth 和 ActualHeight 转换为百分比 PipelineStateToIsEnabledConverter 管道的触发按钮启用状态转换 PointToStringConverter 将 Point 转换为格式化的字符串 ProgressToColorConverter 将进度值转换为对应颜色的转换器 RunStateToEnabledConverter 运行状态到启用转换器 RunStateToIsEnabledConverter 根据 RunState 枚举值返回控件是否启用（只有 Stopped 状态返回 true） RunStateToIsRunningConverter 根据 RunState 枚举值返回控件是否启用（只有 Running 状态返回 true） ScaleToPixelConverter 比例像素转换器。根据 DPI 和当前的缩放比例计算正确的网格大小 ScaleToStringConverter 显示和输入百分比格式的 Scale，将 double 和 string 之间进行转换 SizeToStringConverter 将 Size 对象转换为字符串（比如“800×600”） StateToVisibilityConverter 将 RunState 状态转换为 Visibility 值 TagConverter 提供从 TreeViewControlItem 对象转换为其 Tag 属性值的功能 ThemeToIndexConverter 负责将应用程序的主题（暗黑、高对比度）转换为对应的索引值 TitleColonConverter 标题冒号转换器 ToolboxItemTypeToSymbolConverter 根据 ToolboxItemType 返回相应的 Symbol 图标 TypeToNameConverter 将 Type 对象转换为其名称的字符串表示形式 VisionStatusToColorConverter 根据机器视觉系统的检测结果（\"OK\", \"NG\"）转换为相应的颜色 ZeroToVisibilityConverter 用于将集合的计数转换为 Visibility，当集合为空时 Collapsed；否则 Visible"
  },
  "api/MAS.SharedLibrary.DataExport.DataExportServiceWrapper.html": {
    "href": "api/MAS.SharedLibrary.DataExport.DataExportServiceWrapper.html",
    "title": "Class DataExportServiceWrapper | DataMaster",
    "summary": "Class DataExportServiceWrapper Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 用于数据导出服务及其依赖项的包装类 public class DataExportServiceWrapper Inheritance object DataExportServiceWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataExportServiceWrapper(IDataExportService, IDataExportCompilationService) 用于数据导出服务及其依赖项的包装类 public DataExportServiceWrapper(IDataExportService dataExportService, IDataExportCompilationService dataExportCompilationService) Parameters dataExportService IDataExportService dataExportCompilationService IDataExportCompilationService Properties DataExportCompilationService 获取数据导出脚本编译服务 public IDataExportCompilationService DataExportCompilationService { get; } Property Value IDataExportCompilationService DataExportService 获取数据导出服务 public IDataExportService DataExportService { get; } Property Value IDataExportService"
  },
  "api/MAS.SharedLibrary.DataExport.DataExportStatusModel.html": {
    "href": "api/MAS.SharedLibrary.DataExport.DataExportStatusModel.html",
    "title": "Class DataExportStatusModel | DataMaster",
    "summary": "Class DataExportStatusModel Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 表示数据导出实例状态数据模型 public class DataExportStatusModel Inheritance object DataExportStatusModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackupPath 获取或设置备份路径 public string BackupPath { get; set; } Property Value string ExportPath 获取或设置导出路径 public string ExportPath { get; set; } Property Value string Id 获取或设置唯一标识符Guid public Guid Id { get; set; } Property Value Guid IsBackupExport 获取或设置是否备份 public bool IsBackupExport { get; set; } Property Value bool IsRunning 获取或设置是否运行 public bool IsRunning { get; set; } Property Value bool Key 获取或设置实例的唯一键 public string Key { get; set; } Property Value string LastUsed 获取或设置最后使用时间 public DateTime LastUsed { get; set; } Property Value DateTime"
  },
  "api/MAS.SharedLibrary.DataExport.DataExportTypeDetails.html": {
    "href": "api/MAS.SharedLibrary.DataExport.DataExportTypeDetails.html",
    "title": "Class DataExportTypeDetails | DataMaster",
    "summary": "Class DataExportTypeDetails Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 表示用于数据导出详细信息数据模型 public class DataExportTypeDetails : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase DataExportTypeDetails Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ExportScriptName 获取或设置定义的导出脚本名称 public string? ExportScriptName { get; set; } Property Value string ExportScriptType 获取或设置脚本类型 public Type? ExportScriptType { get; set; } Property Value Type IsEnable 获取或设置是否启用脚本 public bool IsEnable { get; set; } Property Value bool Remark 获取或设置备注信息 public string? Remark { get; set; } Property Value string ScriptFilePath 获取或设置脚本关联的文件路径 public string? ScriptFilePath { get; set; } Property Value string ScriptFullName 获取或设置脚本完全限定名称 public string? ScriptFullName { get; set; } Property Value string StructFullName 获取或设置结构体完全限定名称 public string StructFullName { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.DataExport.ExportScriptAttribute.html": {
    "href": "api/MAS.SharedLibrary.DataExport.ExportScriptAttribute.html",
    "title": "Class ExportScriptAttribute | DataMaster",
    "summary": "Class ExportScriptAttribute Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 表示数据导出脚本的元数据属性 [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public class ExportScriptAttribute : Attribute Inheritance object Attribute ExportScriptAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExportScriptAttribute(bool, string?) 表示数据导出脚本的元数据属性 public ExportScriptAttribute(bool isEnabled, string? description = null) Parameters isEnabled bool description string Properties Description 获取脚本的描述信息 public string? Description { get; } Property Value string IsEnabled 获取脚本是否启用 public bool IsEnabled { get; } Property Value bool"
  },
  "api/MAS.SharedLibrary.DataExport.IDataExportBuildConfig.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IDataExportBuildConfig.html",
    "title": "Interface IDataExportBuildConfig | DataMaster",
    "summary": "Interface IDataExportBuildConfig Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出构建配置接口 public interface IDataExportBuildConfig : IBuildConfig Inherited Members IBuildConfig.BuildPathFull IBuildConfig.SourceDirectories IBuildConfig.RootNamespace IBuildConfig.OutputAssemblyName IBuildConfig.OutputAssemblyPath IBuildConfig.ReferencePaths IBuildConfig.ReferenceDirectories IBuildConfig.TempDirectory IBuildConfig.WarningLevel IBuildConfig.GetBuildPathFull()"
  },
  "api/MAS.SharedLibrary.DataExport.IDataExportConfig.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IDataExportConfig.html",
    "title": "Interface IDataExportConfig | DataMaster",
    "summary": "Interface IDataExportConfig Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出参数配置接口 public interface IDataExportConfig : ICloneable Inherited Members ICloneable.Clone() Properties BackupPath 获取或设置备份路径 string? BackupPath { get; set; } Property Value string Build 获取构建相关配置 IDataExportBuildConfig Build { get; } Property Value IDataExportBuildConfig DateTimeFormat 获取或设置导出数据中的日期和时间字段的格式 string DateTimeFormat { get; set; } Property Value string Encoding 获取或设置编码 string Encoding { get; set; } Property Value string ExportPath 获取或设置导出路径 string? ExportPath { get; set; } Property Value string FileFormat 获取或设置文件格式 string FileFormat { get; set; } Property Value string FileNameSuffix 获取或设置导出文件名的后缀（自定义字符串） string FileNameSuffix { get; set; } Property Value string FullFileName 获取完整的导出文件名 string FullFileName { get; } Property Value string Remarks $\"{DateTimeFormat}_{FileNameSuffix}.{FileFormat}\" IsBackupExport 获取或设置是否在导出完成后进行备份操作 bool IsBackupExport { get; set; } Property Value bool SheetName 获取或设置工作表的名称 string SheetName { get; set; } Property Value string Methods Clone<T>() 泛型克隆方法，返回指定类型的克隆实例 T Clone<T>() where T : IDataExportConfig Returns T 克隆后的实例 Type Parameters T 克隆实例的类型，必须实现 IDataExportConfig 接口 GetBuildPathFull() 获取完整的构建路径，如果 BuildPath 是相对路径，则与 AppContext.BaseDirectory 结合 string GetBuildPathFull() Returns string 完整的构建路径"
  },
  "api/MAS.SharedLibrary.DataExport.IDataExportConfigConverter.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IDataExportConfigConverter.html",
    "title": "Interface IDataExportConfigConverter | DataMaster",
    "summary": "Interface IDataExportConfigConverter Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出配置转换器接口，用于将 JSON 对象转换为实现 IDataExportConfig 接口的配置实例 public interface IDataExportConfigConverter Methods Convert(JObject) 将 JObject 转换为 IDataExportConfig 实例 IDataExportConfig Convert(JObject jConfig) Parameters jConfig JObject 包含数据导出配置数据的 JSON 对象 Returns IDataExportConfig 转换后的 IDataExportConfig 实例 Exceptions InvalidOperationException 当转换失败时抛出"
  },
  "api/MAS.SharedLibrary.DataExport.IDataExportService.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IDataExportService.html",
    "title": "Interface IDataExportService | DataMaster",
    "summary": "Interface IDataExportService Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出服务接口 public interface IDataExportService : IDisposable Inherited Members IDisposable.Dispose() Properties Configuration 获取参数配置 IDataExportConfig Configuration { get; } Property Value IDataExportConfig Id 获取或设置唯一标识符 Guid Id { get; set; } Property Value Guid Key 获取或设置实例的唯一键 string Key { get; set; } Property Value string Methods Disconnect() 断开相关连接，并清理相关处理程序资源 void Disconnect() GetInstanceStatus() 获取当前实例状态 DataExportStatusModel GetInstanceStatus() Returns DataExportStatusModel DataExportStatusModel 对象 InitializationAsync() 异步执行初始化 Task<bool> InitializationAsync() Returns Task<bool> 异步操作任务结果，成功返回true，否则false StartTask() 启动任务 void StartTask() StopTask() 停止任务 void StopTask() Events OnInstantMessageReceived 即时信息事件 event EventHandler<InstantMessageModel> OnInstantMessageReceived Event Type EventHandler<InstantMessageModel>"
  },
  "api/MAS.SharedLibrary.DataExport.IDataExportServiceFactory.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IDataExportServiceFactory.html",
    "title": "Interface IDataExportServiceFactory | DataMaster",
    "summary": "Interface IDataExportServiceFactory Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出服务创建工厂接口 public interface IDataExportServiceFactory : IDisposable Inherited Members IDisposable.Dispose() Methods Create() 创建或获取默认数据导出服务实例 DataExportServiceWrapper Create() Returns DataExportServiceWrapper 包含实现了 IDataExportService 接口的数据导出服务及其依赖项的包装类 DataExportServiceWrapper Remarks 创建一个新的数据导出服务实例 如果已存在相同配置的实例，则返回已存在的实例 Create(IDataExportConfig) 根据指定的导出配置创建或获取数据导出服务实例 DataExportServiceWrapper Create(IDataExportConfig config) Parameters config IDataExportConfig 数据导出服务的配置参数 Returns DataExportServiceWrapper 包含实现了 IDataExportService 接口的数据导出服务及其依赖项的包装类 DataExportServiceWrapper Remarks 根据传入的数据导出配置 config 创建一个新的数据导出服务实例 如果已存在相同配置的实例，则返回已存在的实例 Exists(IDataExportConfig) 检查指定的配置是否存在实例 bool Exists(IDataExportConfig config) Parameters config IDataExportConfig 协议参数配置 Returns bool 如果存在返回 true，否则 false Exists(string) 检查指定的键是否存在实例 bool Exists(string key) Parameters key string 用于查找 DataExportServiceWrapper 实例的唯一键 Returns bool 如果存在返回 true，否则 false GetAllInstanceStatus() 获取所有实例的状态信息 IEnumerable<DataExportStatusModel> GetAllInstanceStatus() Returns IEnumerable<DataExportStatusModel> 协议状态信息集合 GetAllInstancesWithKeys() 获取所有已存在的 DataExportServiceWrapper 实例及其对应的键 IEnumerable<KeyValuePair<string, DataExportServiceWrapper>>? GetAllInstancesWithKeys() Returns IEnumerable<KeyValuePair<string, DataExportServiceWrapper>> 返回包含所有已存在的 DataExportServiceWrapper 实例及其对应键的只读集合，如果没有则返回null GetInstance(string) 根据唯一标识符获取已存在的 DataExportServiceWrapper 实例 DataExportServiceWrapper? GetInstance(string key) Parameters key string 用于查找 DataExportServiceWrapper 实例的唯一键 Returns DataExportServiceWrapper 如果找到对应的实例则返回该实例，否则返回 null RemoveInstance(string) 移除指定 Key 的实例 bool RemoveInstance(string key) Parameters key string 要移除的实例唯一 Key Returns bool 如果移除成功返回 true，否则返回 false Events OnInstanceCreate 实例创建事件 event EventHandler<InstanceCreateEventArgs> OnInstanceCreate Event Type EventHandler<InstanceCreateEventArgs> OnInstanceRemove 实例移除事件 event EventHandler<InstanceRemovedEventArgs> OnInstanceRemove Event Type EventHandler<InstanceRemovedEventArgs>"
  },
  "api/MAS.SharedLibrary.DataExport.IDataExportTaskHandler.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IDataExportTaskHandler.html",
    "title": "Interface IDataExportTaskHandler | DataMaster",
    "summary": "Interface IDataExportTaskHandler Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出务处理程序接口 public interface IDataExportTaskHandler Properties TaskName 获取任务名称 string TaskName { get; } Property Value string Methods StartTask() 启动任务 void StartTask() StopTask() 停止任务 void StopTask() Events OnInstantMessageReceived 即时信息事件 event EventHandler<InstantMessageModel>? OnInstantMessageReceived Event Type EventHandler<InstantMessageModel>"
  },
  "api/MAS.SharedLibrary.DataExport.IDataExportTaskHandlerFactory.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IDataExportTaskHandlerFactory.html",
    "title": "Interface IDataExportTaskHandlerFactory | DataMaster",
    "summary": "Interface IDataExportTaskHandlerFactory Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出任务处理工厂接口，创建数据务处理程序 public interface IDataExportTaskHandlerFactory Methods CreateHandlersAsync() 异步创建所有需要的数据任务处理程序 Task<IEnumerable<IDataExportTaskHandler>> CreateHandlersAsync() Returns Task<IEnumerable<IDataExportTaskHandler>> 异步操作任务结果，实现了 IDataExportTaskHandler 接口的数据任务处理程序的集合"
  },
  "api/MAS.SharedLibrary.DataExport.IExportScript-1.html": {
    "href": "api/MAS.SharedLibrary.DataExport.IExportScript-1.html",
    "title": "Interface IExportScript<T> | DataMaster",
    "summary": "Interface IExportScript<T> Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 数据导出脚本接口 public interface IExportScript<T> where T : struct Type Parameters T Methods ExecuteAsync(DataUpdateEventArgs<T>) 异步执行脚本逻辑 Task ExecuteAsync(DataUpdateEventArgs<T> dataUpdateEvent) Parameters dataUpdateEvent DataUpdateEventArgs<T> 数据更新事件 Returns Task 表示异步操作任务"
  },
  "api/MAS.SharedLibrary.DataExport.InstanceCreateEventArgs.html": {
    "href": "api/MAS.SharedLibrary.DataExport.InstanceCreateEventArgs.html",
    "title": "Class InstanceCreateEventArgs | DataMaster",
    "summary": "Class InstanceCreateEventArgs Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 实例创建事件参数 public class InstanceCreateEventArgs : EventArgs, IInstanceCreateEventArgs Inheritance object EventArgs InstanceCreateEventArgs Implements IInstanceCreateEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceCreateEventArgs(DataExportStatusModel, JObject) 实例创建事件参数 public InstanceCreateEventArgs(DataExportStatusModel statusModel, JObject config) Parameters statusModel DataExportStatusModel 数据导出实例状态数据模型 config JObject 实例配置对象 Properties Config 获取配置对象 public JObject Config { get; } Property Value JObject Key 获取标识键 public string Key { get; } Property Value string Model 获取数据导出实例状态数据 public DataExportStatusModel Model { get; } Property Value DataExportStatusModel"
  },
  "api/MAS.SharedLibrary.DataExport.InstanceRemovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.DataExport.InstanceRemovedEventArgs.html",
    "title": "Class InstanceRemovedEventArgs | DataMaster",
    "summary": "Class InstanceRemovedEventArgs Namespace MAS.SharedLibrary.DataExport Assembly MAS.SharedLibrary.dll 实例移除事件参数 public class InstanceRemovedEventArgs : EventArgs, IInstanceRemovedEventArgs Inheritance object EventArgs InstanceRemovedEventArgs Implements IInstanceRemovedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceRemovedEventArgs(string) 实例移除事件参数 public InstanceRemovedEventArgs(string key) Parameters key string 移除的实例的唯一键 Properties Key 获取移除的实例的唯一键 public string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.DataExport.html": {
    "href": "api/MAS.SharedLibrary.DataExport.html",
    "title": "Namespace MAS.SharedLibrary.DataExport | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.DataExport Classes DataExportServiceWrapper 用于数据导出服务及其依赖项的包装类 DataExportStatusModel 表示数据导出实例状态数据模型 DataExportTypeDetails 表示用于数据导出详细信息数据模型 ExportScriptAttribute 表示数据导出脚本的元数据属性 InstanceCreateEventArgs 实例创建事件参数 InstanceRemovedEventArgs 实例移除事件参数 Interfaces IDataExportBuildConfig 数据导出构建配置接口 IDataExportConfig 数据导出参数配置接口 IDataExportService 数据导出服务接口 IDataExportServiceFactory 数据导出服务创建工厂接口 IDataExportTaskHandler 数据导出务处理程序接口 IDataExportTaskHandlerFactory 数据导出任务处理工厂接口，创建数据务处理程序 IExportScript<T> 数据导出脚本接口"
  },
  "api/MAS.SharedLibrary.Database.ColumnAttribute.html": {
    "href": "api/MAS.SharedLibrary.Database.ColumnAttribute.html",
    "title": "Class ColumnAttribute | DataMaster",
    "summary": "Class ColumnAttribute Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 自定义属性类，用于将类的属性映射到数据库表的列 [AttributeUsage(AttributeTargets.Property, Inherited = false)] public class ColumnAttribute : Attribute Inheritance object Attribute ColumnAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 使用此属性可以详细定义列的各项参数，如数据类型、是否主键等 Constructors ColumnAttribute(string, string) 自定义属性类，用于将类的属性映射到数据库表的列 public ColumnAttribute(string name, string dataType) Parameters name string 列的名称 dataType string 列的数据类型 Remarks 使用此属性可以详细定义列的各项参数，如数据类型、是否主键等 Properties Comment 获取或设置列的备注信息 public string Comment { get; set; } Property Value string DataType 获取列的类型 public string DataType { get; } Property Value string Default 获取或设置列的默认值 public string? Default { get; set; } Property Value string ForeignKeyColumn 获取或设置外键列的名称 public string ForeignKeyColumn { get; set; } Property Value string ForeignKeyTable 获取或设置外键表的名称 public string ForeignKeyTable { get; set; } Property Value string IsAutoIncrement 获取或设置列是否自动递增 public bool IsAutoIncrement { get; set; } Property Value bool IsNullable 获取或设置列是否可为空 public bool IsNullable { get; set; } Property Value bool IsPrimaryKey 获取或设置列是否为主键 public bool IsPrimaryKey { get; set; } Property Value bool IsUnique 获取或设置列是否唯一 public bool IsUnique { get; set; } Property Value bool IsUpdatable 获取或设置在更新操作中是否为可更新的字段 public bool IsUpdatable { get; set; } Property Value bool Length 获取或设置列的长度（适用于需要长度的类型，如 VARCHAR） public int Length { get; set; } Property Value int Name 获取列的名称 public string Name { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.IDataMapper-2.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.IDataMapper-2.html",
    "title": "Interface IDataMapper<TSource, TDestination> | DataMaster",
    "summary": "Interface IDataMapper<TSource, TDestination> Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 从源类型映射到目标类型，并支持反向映射的通用映射器接口 public interface IDataMapper<TSource, TDestination> Type Parameters TSource 源数据类型 TDestination 目标数据类型 Methods Map(TSource) 将源类型的数据映射到目标类型 TDestination Map(TSource source) Parameters source TSource 源数据对象 Returns TDestination 映射后的目标类型对象 MapBack(TDestination?) 将目标类型的数据映射回源类型 TSource MapBack(TDestination? destination) Parameters destination TDestination 目标数据对象 Returns TSource 映射后的源类型对象"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.IEntityMapper-1.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.IEntityMapper-1.html",
    "title": "Interface IEntityMapper<T> | DataMaster",
    "summary": "Interface IEntityMapper<T> Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 将IDataReader的数据映射到一个特定类型的实体对象上 public interface IEntityMapper<T> Type Parameters T 映射目标的实体类型 Methods Map(IDataReader) 将IDataReader中的数据映射到特定类型的实体对象 T Map(IDataReader reader) Parameters reader IDataReader 包含从数据库读取的数据的IDataReader Returns T 映射后的实体对象"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.IRepository-1.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.IRepository-1.html",
    "title": "Interface IRepository<TEntity> | DataMaster",
    "summary": "Interface IRepository<TEntity> Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 泛型仓储接口，用于对实体对象进行CRUD操作 public interface IRepository<TEntity> : IRepositoryBase where TEntity : new() Type Parameters TEntity Inherited Members IRepositoryBase.AddAsync(object) IRepositoryBase.AddOrUpdateAsync(object) IRepositoryBase.DeleteAsync(object) IRepositoryBase.GetAllObjectAsync() IRepositoryBase.GetByIdObjectAsync(int) IRepositoryBase.GetByPropertyAsync(object) IRepositoryBase.LoadTableDataObjectAsync(TableQueryParameters) IRepositoryBase.GetTotalRecordsAsync(TableQueryParameters) IRepositoryBase.UpdateObjectAsync(object) IRepositoryBase.GetTotalRecordsAsync() Methods AddAsync(TEntity) 异步添加一个新的实体对象 Task AddAsync(TEntity entity) Parameters entity TEntity 要添加的实体对象 Returns Task 异步操作的任务 AddOrUpdateAsync(TEntity) 异步添加一个新的实体对象，如果唯一键已存在，则执行更新操作 Task AddOrUpdateAsync(TEntity entity) Parameters entity TEntity 要添加或更新的实体对象 Returns Task 异步操作的任务 DeleteAsync(TEntity) 异步删除一个已存在的实体对象 Task DeleteAsync(TEntity entity) Parameters entity TEntity 要删除的实体对象 Returns Task 异步操作的任务 GetAllAsync() 异步获取所有实体对象 Task<IEnumerable<TEntity>> GetAllAsync() Returns Task<IEnumerable<TEntity>> 表示异步操作的任务对象，任务结果为包含所有实体对象的集合 GetByIdAsync(int) 异步根据ID异步获取一个实体对象 Task<TEntity?> GetByIdAsync(int id) Parameters id int 实体对象的唯一标识符 Returns Task<TEntity> 异步操作的任务对象，如果没有结果则返回默认值 GetByPropertyAsync(TEntity) 根据实体对象的非空属性动态生成查询条件，获取匹配的实体对象 Task<TEntity?> GetByPropertyAsync(TEntity entity) Parameters entity TEntity 包含查询条件的实体对象 Returns Task<TEntity> 匹配的实体对象，如果没有结果则返回 null LoadTableDataAsync(TableQueryParameters) 异步加载表的数据 Task<List<TEntity>> LoadTableDataAsync(TableQueryParameters parameters) Parameters parameters TableQueryParameters 查询参数 Returns Task<List<TEntity>> 异步操作任务，数据列表 UpdateAsync(TEntity) 异步更新一个已存在的实体对象 Task UpdateAsync(TEntity entity) Parameters entity TEntity 要更新的实体对象 Returns Task 异步操作的任务"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.IRepositoryBase.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.IRepositoryBase.html",
    "title": "Interface IRepositoryBase | DataMaster",
    "summary": "Interface IRepositoryBase Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 非泛型仓储基本接口，用于对实体对象进行CRUD操作 public interface IRepositoryBase Methods AddAsync(object) 异步添加一个新的实体对象 Task AddAsync(object entity) Parameters entity object 要添加的实体对象 Returns Task 异步操作的任务。 AddOrUpdateAsync(object) 异步添加或更新一个实体对象 如果对象已存在则执行更新操作，否则执行添加操作 Task AddOrUpdateAsync(object entity) Parameters entity object 要添加或更新的实体对象 Returns Task 异步操作的任务 DeleteAsync(object) 异步删除一个实体对象 Task DeleteAsync(object entity) Parameters entity object 要删除的实体对象 Returns Task 异步操作的任务 GetAllObjectAsync() 异步获取所有实体对象 Task<IEnumerable<object>> GetAllObjectAsync() Returns Task<IEnumerable<object>> 表示异步操作的任务对象，任务结果为包含所有实体对象的集合 GetByIdObjectAsync(int) 异步根据ID获取一个实体对象 Task<object?> GetByIdObjectAsync(int id) Parameters id int 实体对象的唯一标识符 Returns Task<object> 异步操作的任务对象，如果没有找到则返回 null GetByPropertyAsync(object) 根据实体对象的属性动态生成查询条件，获取匹配的实体对象 Task<object?> GetByPropertyAsync(object entity) Parameters entity object 包含查询条件的实体对象 Returns Task<object> 异步操作任务，匹配的实体对象，如果没有结果则返回 null GetTotalRecordsAsync() 异步获取表的总记录数 Task<long> GetTotalRecordsAsync() Returns Task<long> 异步操作任务，总记录数 GetTotalRecordsAsync(TableQueryParameters) 异步根据表名和查询参数获取总记录数 Task<long> GetTotalRecordsAsync(TableQueryParameters parameters) Parameters parameters TableQueryParameters Returns Task<long> 异步操作任务，总记录数 LoadTableDataObjectAsync(TableQueryParameters) 异步加载表数据 Task<List<object>> LoadTableDataObjectAsync(TableQueryParameters parameters) Parameters parameters TableQueryParameters 查询参数 Returns Task<List<object>> 异步操作任务，数据列表 UpdateObjectAsync(object) 异步更新一个已存在的实体对象 Task UpdateObjectAsync(object entity) Parameters entity object 要更新的实体对象 Returns Task 异步操作的任务"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.IRepositoryFactory.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.IRepositoryFactory.html",
    "title": "Interface IRepositoryFactory | DataMaster",
    "summary": "Interface IRepositoryFactory Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 仓储工厂接口，用于根据实体类型获取对应的仓储实例 public interface IRepositoryFactory Methods CreateRepository(Type) 根据运行时动态提供的实体类型创建一个新的仓储实例 IRepositoryBase CreateRepository(Type entityType) Parameters entityType Type 实体类型的 Type 对象 Returns IRepositoryBase 与指定实体类型对应的 IRepositoryBase 仓储实例 CreateRepository<TEntity>() 根据实体类型创建一个新的仓储实例 IRepository<TEntity> CreateRepository<TEntity>() where TEntity : class, new() Returns IRepository<TEntity> 与指定实体类型对应的 IRepository<TEntity> 实例 Type Parameters TEntity 实体类型"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.OperationLogsEntity.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.OperationLogsEntity.html",
    "title": "Class OperationLogsEntity | DataMaster",
    "summary": "Class OperationLogsEntity Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 操作日志数据实体模型 [Table(\"OperationLogs\")] [DbHandler(true, null)] public class OperationLogsEntity Inheritance object OperationLogsEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action 获取或设置操作名称 [Column(\"Action\", \"VARCHAR(100)\", IsNullable = false, Comment = \"操作名称\")] public string Action { get; set; } Property Value string CreatedAt 获取或设置创建时间 [Column(\"CreatedAt\", \"DATETIME\", IsNullable = false, Comment = \"创建时间\")] public DateTime CreatedAt { get; set; } Property Value DateTime Description 获取或设置操作描述或详细信息 [Column(\"Description\", \"VARCHAR(255)\", IsNullable = true, Comment = \"操作描述或详细信息\")] public string? Description { get; set; } Property Value string IPAddress 获取或设置操作地址 [Column(\"IPAddress\", \"VARCHAR(50)\", IsNullable = true, Comment = \"操作地址\")] public string? IPAddress { get; set; } Property Value string Id 获取或设置操作日志的唯一标识符，主键，自增 [Column(\"Id\", \"INT\", IsPrimaryKey = true, IsAutoIncrement = true, IsNullable = false, Comment = \"操作日志的唯一标识符，主键\")] public int Id { get; set; } Property Value int ResourceID 获取或设置操作资源的Id [Column(\"ResourceID\", \"VARCHAR(100)\", IsNullable = true, Comment = \"操作资源的Id\")] public string? ResourceID { get; set; } Property Value string UserAgent 获取或设置操作时的代理信息 [Column(\"UserAgent\", \"VARCHAR(255)\", IsNullable = true, Comment = \"操作时的代理信息\")] public string? UserAgent { get; set; } Property Value string UserID 获取或设置操作者的用户ID，外键，唯一，关联到Users表 [Column(\"UserID\", \"INT\", IsNullable = false, IsUnique = true, ForeignKeyTable = \"Users\", ForeignKeyColumn = \"Id\", Comment = \"操作者的用户ID，外键，唯一，关联到Users表\")] public int UserID { get; set; } Property Value int"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.PermissionsEntity.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.PermissionsEntity.html",
    "title": "Class PermissionsEntity | DataMaster",
    "summary": "Class PermissionsEntity Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 权限表数据实体模型 [Table(\"Permissions\")] [DbHandler(true, null)] public class PermissionsEntity Inheritance object PermissionsEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt 获取或设置创建时间 [Column(\"CreatedAt\", \"DATETIME\", IsNullable = false, IsUpdatable = false, Comment = \"创建时间\")] public DateTime CreatedAt { get; set; } Property Value DateTime Description 获取或设置权限描述 [Column(\"Description\", \"VARCHAR(255)\", Comment = \"权限描述\")] public string? Description { get; set; } Property Value string Id 获取或设置权限唯一标识符，主键，自增 [Column(\"Id\", \"INT\", IsPrimaryKey = true, IsAutoIncrement = true, IsNullable = false, Comment = \"权限唯一标识符，主键\")] public int Id { get; set; } Property Value int PermissionName 获取或设置权限名称 [Column(\"PermissionName\", \"VARCHAR(50)\", IsNullable = false, IsUnique = true, Comment = \"权限名称，唯一\")] public string PermissionName { get; set; } Property Value string UpdatedAt 获取或设置更新时间 [Column(\"UpdatedAt\", \"DATETIME\", IsNullable = false, Comment = \"更新时间\")] public DateTime UpdatedAt { get; set; } Property Value DateTime"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.RolePermissionsEntity.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.RolePermissionsEntity.html",
    "title": "Class RolePermissionsEntity | DataMaster",
    "summary": "Class RolePermissionsEntity Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 角色权限关联表数据实体模型 [Table(\"RolePermissions\")] [DbHandler(true, null)] public class RolePermissionsEntity Inheritance object RolePermissionsEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt 获取或设置创建时间 [Column(\"CreatedAt\", \"DATETIME\", IsNullable = false, IsUpdatable = false, Comment = \"创建时间\")] public DateTime CreatedAt { get; set; } Property Value DateTime Id 获取或设置角色权限关联表唯一标识符，主键，自增 [Column(\"Id\", \"INT\", IsPrimaryKey = true, IsAutoIncrement = true, IsNullable = false, Comment = \"角色权限关联表唯一标识符，主键\")] public int Id { get; set; } Property Value int PermissionID 获取或设置权限ID，外键，唯一，关联到Permissions表 [Column(\"PermissionID\", \"INT\", IsNullable = false, IsUnique = true, ForeignKeyTable = \"Permissions\", ForeignKeyColumn = \"Id\", Comment = \"权限ID，外键，唯一，关联到Permissions表\")] public int PermissionID { get; set; } Property Value int RoleID 获取或设置角色ID，外键，唯一，关联到Roles表 [Column(\"RoleID\", \"INT\", IsNullable = false, IsUnique = true, ForeignKeyTable = \"Roles\", ForeignKeyColumn = \"Id\", Comment = \"角色ID，外键，唯一，关联到Roles表\")] public int RoleID { get; set; } Property Value int UpdatedAt 获取或设置更新时间 [Column(\"UpdatedAt\", \"DATETIME\", IsNullable = false, Comment = \"更新时间\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime?"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.RolesEntity.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.RolesEntity.html",
    "title": "Class RolesEntity | DataMaster",
    "summary": "Class RolesEntity Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 角色表数据实体模型 [Table(\"Roles\")] [DbHandler(true, null)] public class RolesEntity Inheritance object RolesEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt 获取或设置创建时间 [Column(\"CreatedAt\", \"DATETIME\", IsNullable = false, IsUpdatable = false, Comment = \"创建时间\")] public DateTime CreatedAt { get; set; } Property Value DateTime Description 获取或设置角色描述 [Column(\"Description\", \"VARCHAR(255)\", Comment = \"角色描述\")] public string? Description { get; set; } Property Value string Id 获取或设置角色唯一标识，主键，自增 [Column(\"Id\", \"INT\", IsPrimaryKey = true, IsAutoIncrement = true, IsNullable = false, Comment = \"角色唯一标识，主键\")] public int Id { get; set; } Property Value int RoleName 获取或设置角色名称 [Column(\"RoleName\", \"VARCHAR(50)\", IsNullable = false, IsUnique = true, Comment = \"角色名称，唯一\")] public string RoleName { get; set; } Property Value string UpdatedAt 获取或设置更新时间 [Column(\"UpdatedAt\", \"DATETIME\", IsNullable = false, Comment = \"更新时间\")] public DateTime UpdatedAt { get; set; } Property Value DateTime"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.UserRolesEntity.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.UserRolesEntity.html",
    "title": "Class UserRolesEntity | DataMaster",
    "summary": "Class UserRolesEntity Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 用户角色关联表数据实体模型 [Table(\"UserRoles\")] [DbHandler(true, null)] public class UserRolesEntity Inheritance object UserRolesEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt 获取或设置创建时间 [Column(\"CreatedAt\", \"DATETIME\", IsNullable = false, IsUpdatable = false, Comment = \"创建时间\")] public DateTime? CreatedAt { get; set; } Property Value DateTime? Id 获取或设置用户角色关联表唯一标识符，主键，自增 [Column(\"Id\", \"INT\", IsPrimaryKey = true, IsAutoIncrement = true, IsNullable = false, Comment = \"用户角色关联表唯一标识符，主键\")] public int Id { get; set; } Property Value int RoleID 获取或设置角色ID，外键，唯一，关联到Roles表 [Column(\"RoleID\", \"INT\", IsNullable = false, IsUnique = true, ForeignKeyTable = \"Roles\", ForeignKeyColumn = \"Id\", Comment = \"角色ID，外键，唯一，关联到Roles表\")] public int? RoleID { get; set; } Property Value int? UpdatedAt 获取或设置更新时间 [Column(\"UpdatedAt\", \"DATETIME\", IsNullable = false, Comment = \"更新时间\")] public DateTime UpdatedAt { get; set; } Property Value DateTime UserID 获取或设置用户ID，外键，唯一，关联到Users表 [Column(\"UserID\", \"INT\", IsNullable = false, IsUnique = true, ForeignKeyTable = \"Users\", ForeignKeyColumn = \"Id\", Comment = \"用户ID，外键，唯一，关联到Users表\")] public int UserID { get; set; } Property Value int"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.UsersEntity.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.UsersEntity.html",
    "title": "Class UsersEntity | DataMaster",
    "summary": "Class UsersEntity Namespace MAS.SharedLibrary.Database.DataAccess Assembly MAS.SharedLibrary.dll 用户表数据实体模型 [Table(\"Users\")] [DbHandler(true, null)] public class UsersEntity Inheritance object UsersEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt 获取或设置创建时间 [Column(\"CreatedAt\", \"DATETIME\", IsNullable = false, IsUpdatable = false, Comment = \"创建时间\")] public DateTime CreatedAt { get; set; } Property Value DateTime Email 获取或设置邮箱 [Column(\"Email\", \"VARCHAR(50)\", Comment = \"用户名\")] public string? Email { get; set; } Property Value string Id 获取或设置主键标识符，自增 [Column(\"Id\", \"INT\", IsPrimaryKey = true, IsAutoIncrement = true, IsNullable = false, Comment = \"用户的唯一标识符，主键\")] public int Id { get; set; } Property Value int LastLoginTime 获取或设置最后一次登录时间 [Column(\"LastLoginTime\", \"DATETIME\", Comment = \"最后一次登录时间\")] public DateTime? LastLoginTime { get; set; } Property Value DateTime? LoginCount 获取或设置用户登录次数 [Column(\"LoginCount\", \"INT\", Comment = \"用户登录次数\")] public int LoginCount { get; set; } Property Value int PasswordHash 获取或设置密码哈希值 [Column(\"PasswordHash\", \"VARBINARY(64)\", IsNullable = false, Comment = \"用户密码的哈希值\")] public byte[] PasswordHash { get; set; } Property Value byte[] PasswordSalt 获取或设置密码盐 [Column(\"PasswordSalt\", \"VARBINARY(64)\", IsNullable = false, Comment = \"密码盐，用于加密用户密码\")] public byte[] PasswordSalt { get; set; } Property Value byte[] UpdatedAt 获取或设置最后更新时间 [Column(\"UpdatedAt\", \"DATETIME\", IsNullable = false, Comment = \"更新时间\")] public DateTime UpdatedAt { get; set; } Property Value DateTime UserName 获取或设置用户名 [Column(\"UserName\", \"VARCHAR(20)\", IsNullable = false, IsUnique = true, Comment = \"用户名\")] public string UserName { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.DataAccess.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccess.html",
    "title": "Namespace MAS.SharedLibrary.Database.DataAccess | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Database.DataAccess Classes OperationLogsEntity 操作日志数据实体模型 PermissionsEntity 权限表数据实体模型 RolePermissionsEntity 角色权限关联表数据实体模型 RolesEntity 角色表数据实体模型 UserRolesEntity 用户角色关联表数据实体模型 UsersEntity 用户表数据实体模型 Interfaces IDataMapper<TSource, TDestination> 从源类型映射到目标类型，并支持反向映射的通用映射器接口 IEntityMapper<T> 将IDataReader的数据映射到一个特定类型的实体对象上 IRepositoryBase 非泛型仓储基本接口，用于对实体对象进行CRUD操作 IRepositoryFactory 仓储工厂接口，用于根据实体类型获取对应的仓储实例 IRepository<TEntity> 泛型仓储接口，用于对实体对象进行CRUD操作"
  },
  "api/MAS.SharedLibrary.Database.DataAccessTypeDetails.html": {
    "href": "api/MAS.SharedLibrary.Database.DataAccessTypeDetails.html",
    "title": "Class DataAccessTypeDetails | DataMaster",
    "summary": "Class DataAccessTypeDetails Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 表示用于数据访问层详细信息数据模型 public class DataAccessTypeDetails : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase DataAccessTypeDetails Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EntityFilePath 获取或设置类型关联的实体文件路径 public string? EntityFilePath { get; set; } Property Value string EntityFullName 获取或设置类型关联的实体完全限定名称 public string? EntityFullName { get; set; } Property Value string EntityType 获取或设置实体类型 public Type? EntityType { get; set; } Property Value Type IsEnable 获取或设置是否启用 public bool IsEnable { get; set; } Property Value bool MapperFilePath 获取或设置映射器文件路径 public string? MapperFilePath { get; set; } Property Value string MapperFullName 获取或设置映射完全限定名称 public string? MapperFullName { get; set; } Property Value string MapperType 获取或设置映射器类型 public Type? MapperType { get; set; } Property Value Type RepositoryFilePath 获取或设置仓储文件路径 public string? RepositoryFilePath { get; set; } Property Value string RepositoryFullName 获取或设置仓储完全限定名称 public string? RepositoryFullName { get; set; } Property Value string RepositoryType 获取或设置仓储类型 public Type? RepositoryType { get; set; } Property Value Type StructFullName 获取或设置结构体完全限定名称 public string StructFullName { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.DatabaseModel.html": {
    "href": "api/MAS.SharedLibrary.Database.DatabaseModel.html",
    "title": "Class DatabaseModel | DataMaster",
    "summary": "Class DatabaseModel Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库的数据模型 public class DatabaseModel Inheritance object DatabaseModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DatabaseName 获取或设置数据库名称 public string DatabaseName { get; set; } Property Value string Id 获取或设置唯一标识符Guid public Guid Id { get; set; } Property Value Guid IsActive 获取或设置是否活跃 public bool IsActive { get; set; } Property Value bool IsRunning 获取或设置是否在运行 public bool IsRunning { get; set; } Property Value bool Key 获取或设置实例的唯一键 public string Key { get; set; } Property Value string LastUsed 获取或设置最后使用时间 public DateTime LastUsed { get; set; } Property Value DateTime Prot 获取或设置数据库服务器端口 public ushort Prot { get; set; } Property Value ushort ServerAddress 获取或设置服务器地址 public string ServerAddress { get; set; } Property Value string Type 获取或设置数据库类型 public DatabaseType Type { get; set; } Property Value DatabaseType User 获取或设置数据库用户名 public string User { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.DatabaseServiceWrapper.html": {
    "href": "api/MAS.SharedLibrary.Database.DatabaseServiceWrapper.html",
    "title": "Class DatabaseServiceWrapper | DataMaster",
    "summary": "Class DatabaseServiceWrapper Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 用于存数据库信服务及其依赖项的包装类 public class DatabaseServiceWrapper Inheritance object DatabaseServiceWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DatabaseServiceWrapper(string, IDbService, IDataAccessCompilationService) 用于存数据库信服务及其依赖项的包装类 public DatabaseServiceWrapper(string key, IDbService databaseService, IDataAccessCompilationService dataAccessCompilationService) Parameters key string databaseService IDbService dataAccessCompilationService IDataAccessCompilationService Properties DataAccessCompilationService 获取实体编译服务 public IDataAccessCompilationService DataAccessCompilationService { get; } Property Value IDataAccessCompilationService DatabaseService 获取数据库服务 public IDbService DatabaseService { get; } Property Value IDbService Key 获取包装实例标识键 public string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.DatabaseType.html": {
    "href": "api/MAS.SharedLibrary.Database.DatabaseType.html",
    "title": "Enum DatabaseType | DataMaster",
    "summary": "Enum DatabaseType Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库类型枚举 public enum DatabaseType Fields MySql = 1 MySql数据库：是一个开源的关系型数据库管理系统，由Oracle公司维护。 由于其性能高、成本低、可扩展性好，特别适合中小型网站。 它支持多种编程语言的接口，包括 PHP、Python、Java 等 Oracle = 3 Oracle数据库：由Oracle公司开发，是世界上应用最广泛的商业关系型数据库管理系统之一。 它支持跨平台部署和大规模并行处理，适用于需要极高数据一致性和可用性的商业环境 PostgreSql = 2 PostgreSQL数据库：一个强大的开源对象关系型数据库系统，以其高度的标准兼容性和扩展性而闻名。 它支持大型的数据体系和复杂的查询操作，是金融、科研等数据密集型行业的优选 SQLite = 4 SQLite数据库：一个轻量级的嵌入式数据库，它存储整个数据库作为一个单独的跨平台的磁盘文件。 适合于需要简单数据库系统的应用，例如移动应用、小型桌面应用等 SqlServer = 0 SqlServer数据库：由微软开发，是一个关系型数据库管理系统。 广泛用于企业环境中，特别是与.NET技术栈集成的场景。 支持高级的数据分析、复杂的事务处理以及企业级的数据管理需求"
  },
  "api/MAS.SharedLibrary.Database.DbHandlerAttribute.html": {
    "href": "api/MAS.SharedLibrary.Database.DbHandlerAttribute.html",
    "title": "Class DbHandlerAttribute | DataMaster",
    "summary": "Class DbHandlerAttribute Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 指示是否启用数据库任务处理程序的创建 [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class DbHandlerAttribute : Attribute Inheritance object Attribute DbHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DbHandlerAttribute(bool, string?) 指示是否启用数据库任务处理程序的创建 public DbHandlerAttribute(bool isEnabled, string? description = null) Parameters isEnabled bool description string Properties Description 获取描述信息 public string? Description { get; } Property Value string IsEnabled 获取是否启用 public bool IsEnabled { get; } Property Value bool"
  },
  "api/MAS.SharedLibrary.Database.IDbBuildConfig.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbBuildConfig.html",
    "title": "Interface IDbBuildConfig | DataMaster",
    "summary": "Interface IDbBuildConfig Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库构建相关的配置接口 public interface IDbBuildConfig : IBuildConfig Inherited Members IBuildConfig.BuildPathFull IBuildConfig.SourceDirectories IBuildConfig.RootNamespace IBuildConfig.OutputAssemblyName IBuildConfig.OutputAssemblyPath IBuildConfig.ReferencePaths IBuildConfig.ReferenceDirectories IBuildConfig.TempDirectory IBuildConfig.WarningLevel IBuildConfig.GetBuildPathFull() Properties EntityPath 获取或设置实体代码存放路径 string EntityPath { get; set; } Property Value string Remarks EntityPath\\ MapperPath 获取或设置映射器代码存放路径 string MapperPath { get; set; } Property Value string Remarks MapperPath\\ RepositoryPath 获取或设置仓储代码存放路径 string RepositoryPath { get; set; } Property Value string Remarks RepositoryPath\\ Methods GetEntityFullPath() 获取实体的完整路径 string GetEntityFullPath() Returns string 完整的文件路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config), EntityPath) GetMapperFullPath() 获取映射器的完整路径 string GetMapperFullPath() Returns string 完整的文件路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config), MapperPath) GetRepositoryFullPath() 获取仓储的完整路径 string GetRepositoryFullPath() Returns string 完整的文件路径 Remarks Path.Combine(BuildPathFull, InstanceKeyHelper.GetKey(config), RepositoryPath)"
  },
  "api/MAS.SharedLibrary.Database.IDbConfig.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbConfig.html",
    "title": "Interface IDbConfig | DataMaster",
    "summary": "Interface IDbConfig Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库的基本参数配置接口 public interface IDbConfig : ICloneable Inherited Members ICloneable.Clone() Properties ActiveThreshold 获取或设置实例活跃阈值，单位分钟，超过设置阈值则表示不活跃 ushort ActiveThreshold { get; set; } Property Value ushort Build 获取构建相关的配置 IDbBuildConfig Build { get; } Property Value IDbBuildConfig ConnectionTimeout 获取或设置连接数据库的超时时间（秒） ushort ConnectionTimeout { get; set; } Property Value ushort DatabaseName 获取或设置数据库名称 string DatabaseName { get; set; } Property Value string ExecutionTimeout 获取或设置执行超时时间（ms） ushort ExecutionTimeout { get; set; } Property Value ushort ExpirationTime 获取或设置实例过期时间，单位分钟，将清除过期的实例 ushort ExpirationTime { get; set; } Property Value ushort HeartbeatInterval 获取或设置心跳间隔(s) short HeartbeatInterval { get; set; } Property Value short IsAutoClear 获取或设置是否自动清除过期实例 bool IsAutoClear { get; set; } Property Value bool Password 获取或设置数据库密码 string Password { get; set; } Property Value string Port 获取或设置数据库服务器端口 ushort Port { get; set; } Property Value ushort Server 获取或设置数据库服务器地址 string Server { get; set; } Property Value string Type 获取或设置数据库类型 DatabaseType Type { get; set; } Property Value DatabaseType User 获取或设置数据库用户名 string User { get; set; } Property Value string Methods Clone<T>() 泛型克隆方法，返回指定类型的克隆实例 T Clone<T>() where T : IDbConfig, new() Returns T 克隆后的实例 Type Parameters T 克隆实例的类型，必须实现 IDbConfig 接口 GetConnectionString() 获取数据库连接字符串 string GetConnectionString() Returns string"
  },
  "api/MAS.SharedLibrary.Database.IDbConfigConverter.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbConfigConverter.html",
    "title": "Interface IDbConfigConverter | DataMaster",
    "summary": "Interface IDbConfigConverter Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库配置转换器接口，用于将 JSON 对象转换为实现 IDbConfig 接口的配置实例 public interface IDbConfigConverter Methods Convert(JObject) 将 JObject 转换为 IDbConfig 实例 IDbConfig Convert(JObject jConfig) Parameters jConfig JObject 包含数据库配置数据的 JSON 对象 Returns IDbConfig 转换后的 IDbConfig 实例 Exceptions InvalidOperationException 当配置数据格式错误或转换失败时抛出"
  },
  "api/MAS.SharedLibrary.Database.IDbInitializer.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbInitializer.html",
    "title": "Interface IDbInitializer | DataMaster",
    "summary": "Interface IDbInitializer Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库初始化接口 public interface IDbInitializer Methods InitializeDbAsync(string) 异步收集指定命名空间下的所有实体，并初始化数据库 Task InitializeDbAsync(string entityNamespaceName = \"MAS.SharedLibrary.Database.DataAccess\") Parameters entityNamespaceName string 实体命名空间 Returns Task 表示异步操作任务 Remarks 如果表不存在则创建，存在则跳过 Exceptions InvalidOperationException 未加载包含命名空间的程序集时抛出"
  },
  "api/MAS.SharedLibrary.Database.IDbMetadataOperations.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbMetadataOperations.html",
    "title": "Interface IDbMetadataOperations | DataMaster",
    "summary": "Interface IDbMetadataOperations Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 处理数据库元数据的操作接口 public interface IDbMetadataOperations Methods GetAllFunctionsAsync() 异步获取所有函数的名称 Task<List<string>> GetAllFunctionsAsync() Returns Task<List<string>> 包含所有函数名的列表 GetAllStoredProceduresAsync() 异步获取所有存储过程的名称 Task<List<string>> GetAllStoredProceduresAsync() Returns Task<List<string>> 包含所有存储过程名的列表 GetAllTableNamesAsync() 异步获取所有表的名称 Task<List<string>> GetAllTableNamesAsync() Returns Task<List<string>> 包含所有表名的列表 GetAllViewNamesAsync() 异步获取所有视图的名称 Task<List<string>> GetAllViewNamesAsync() Returns Task<List<string>> 包含所有视图名的列表"
  },
  "api/MAS.SharedLibrary.Database.IDbOperations.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbOperations.html",
    "title": "Interface IDbOperations | DataMaster",
    "summary": "Interface IDbOperations Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 通用的数据库操作接口 public interface IDbOperations Properties DbConfig 获取数据库配置 IDbConfig DbConfig { get; } Property Value IDbConfig Methods BeginTransactionAsync() 异步开始一个数据库事务 Task<IDbTransaction> BeginTransactionAsync() Returns Task<IDbTransaction> 表示异步操作的任务，包含事务对象 CommitTransaction(IDbTransaction) 提交当前事务 void CommitTransaction(IDbTransaction transaction) Parameters transaction IDbTransaction 要提交的事务对象 ExecuteCommandAsync(IEnumerable<(string sql, Action<IDbCommand> parameterSetter)>, IDbTransaction) 使用事务执行多个命令操作 Task ExecuteCommandAsync(IEnumerable<(string sql, Action<IDbCommand> parameterSetter)> commands, IDbTransaction transaction) Parameters commands IEnumerable<(string sql, Action<IDbCommand> parameterSetter)> SQL 命令列表及其参数设置函数 transaction IDbTransaction 用于执行命令的事务对象 Returns Task 表示异步操作的任务 ExecuteCommandAsync(string) 异步执行不带参数的命令操作 Task ExecuteCommandAsync(string sql) Parameters sql string 要执行的 SQL 命令语句 Returns Task ExecuteCommandAsync(string, Action<IDbCommand>) 异步执行命令操作，并使用指定的参数设置函数 Task ExecuteCommandAsync(string sql, Action<IDbCommand> parameterSetter) Parameters sql string 要执行的 SQL 命令语句 parameterSetter Action<IDbCommand> 用于设置命令参数的函数 Returns Task ExecuteCommandAsync(string, Action<IDbCommand>, IDbTransaction) 异步执行命令操作，并在指定的事务中使用指定的参数设置函数 Task ExecuteCommandAsync(string sql, Action<IDbCommand> parameterSetter, IDbTransaction transaction) Parameters sql string 要执行的 SQL 命令语句 parameterSetter Action<IDbCommand> 用于设置命令参数的函数 transaction IDbTransaction 用于执行命令的事务对象 Returns Task ExecuteCommandAsync(string, IDbTransaction) 异步执行不带参数的 SQL 命令，并在指定的事务中执行 Task ExecuteCommandAsync(string sql, IDbTransaction transaction) Parameters sql string 要执行的 SQL 命令语句 transaction IDbTransaction 用于执行命令的事务对象 Returns Task 表示异步操作的任务 ExecuteInTransactionAsync(Func<IDbTransaction, Task>) 异步执行事务操作 Task ExecuteInTransactionAsync(Func<IDbTransaction, Task> transactionWork) Parameters transactionWork Func<IDbTransaction, Task> 包含数据库操作的函数 Returns Task ExecuteInsertAndReturnIdAsync(string, Action<IDbCommand>) 异步执行插入操作，并返回新插入记录的自增 ID Task<long> ExecuteInsertAndReturnIdAsync(string sql, Action<IDbCommand> parameterSetter) Parameters sql string 要执行的 SQL 插入语句 parameterSetter Action<IDbCommand> 用于设置命令参数的函数 Returns Task<long> 表示异步操作的任务，包含新插入记录的自增 ID ExecuteQueryAsync(string, Func<IDataReader, Task>) 异步执行查询操作，并使用指定的处理函数处理结果集 Task ExecuteQueryAsync(string sql, Func<IDataReader, Task> resultProcessor) Parameters sql string 要执行的 SQL 查询语句 resultProcessor Func<IDataReader, Task> 用于处理数据读取器的函数 Returns Task 表示异步操作的任务 ExecuteQueryAsync<T>(string, Action<IDbCommand>, Func<IDataReader, T>) 异步执行查询操作，并将结果集映射为指定类型的列表 Task<List<T>> ExecuteQueryAsync<T>(string sql, Action<IDbCommand> parameterSetter, Func<IDataReader, T> selector) Parameters sql string 要执行的 SQL 查询语句 parameterSetter Action<IDbCommand> 用于设置命令参数的函数 selector Func<IDataReader, T> 用于从数据读取器中提取数据的函数 Returns Task<List<T>> 表示异步操作的任务，包含结果元素的列表 Type Parameters T 结果元素的类型 ExecuteQueryAsync<T>(string, Func<IDataReader, T>) 异步执行查询操作，并将结果集映射为指定类型的列表 Task<List<T>> ExecuteQueryAsync<T>(string sql, Func<IDataReader, T> selector) Parameters sql string 要执行的 SQL 查询语句 selector Func<IDataReader, T> 用于从数据读取器中提取数据的函数 Returns Task<List<T>> 表示异步操作的任务，包含结果元素的列表 Type Parameters T 结果元素的类型 ExecuteQuerySingleAsync<T>(string, Action<IDbCommand>, Func<IDataReader, T>) 异步执行 SQL 查询并返回单个实体 Task<T?> ExecuteQuerySingleAsync<T>(string sql, Action<IDbCommand> parameterSetter, Func<IDataReader, T> map) Parameters sql string SQL 查询语句 parameterSetter Action<IDbCommand> 设置命令参数的委托 map Func<IDataReader, T> 将 IDataReader 映射到实体的委托 Returns Task<T> 查询结果的单个实体，如果没有结果则返回默认值 Type Parameters T 实体的类型 ExecuteScalarAsync<T>(string, Action<IDbCommand>?) 异步执行标量 SQL 查询并返回结果 Task<T> ExecuteScalarAsync<T>(string sql, Action<IDbCommand>? parameterSetter = null) Parameters sql string 要执行的 SQL 查询语句 parameterSetter Action<IDbCommand> 设置命令参数的委托 Returns Task<T> 标量查询的结果 Type Parameters T 返回结果的类型 ExecuteSingleRowAsync<T>(string, Func<IDataReader, T>, Action<IDbCommand>?) 异步执行查询操作，并将结果映射为指定类型的单行数据 Task<T?> ExecuteSingleRowAsync<T>(string sql, Func<IDataReader, T> selector, Action<IDbCommand>? parameterSetter = null) Parameters sql string 要执行的 SQL 查询语句 selector Func<IDataReader, T> 用于从数据读取器中提取数据的函数 parameterSetter Action<IDbCommand> 用于设置命令参数的函数 Returns Task<T> 表示异步操作的任务，包含单行数据；如果没有结果，则返回默认值 Type Parameters T 结果类型 RollbackTransaction(IDbTransaction) 回滚当前事务 void RollbackTransaction(IDbTransaction transaction) Parameters transaction IDbTransaction 要回滚的事务对象 TestDatabaseConnectionAsync(CancellationToken) 异步测试数据库连接是否成功 Task<bool> TestDatabaseConnectionAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，连接成功返回true，否则false Exceptions OperationCanceledException 取消时抛出此异常 VerifyDatabaseConnectionAsync(CancellationToken) 验证数据库连接性，并执行简单的查询语句 Task VerifyDatabaseConnectionAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task 异步操作任务结果 Exceptions InvalidOperationException 当连接失败或查询执行失败时抛出"
  },
  "api/MAS.SharedLibrary.Database.IDbService.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbService.html",
    "title": "Interface IDbService | DataMaster",
    "summary": "Interface IDbService Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库服务接口 public interface IDbService : IDisposable Inherited Members IDisposable.Dispose() Properties DbConfig 获取数据库配置 IDbConfig DbConfig { get; } Property Value IDbConfig Id 获取或设置唯一标识符 Guid Id { get; set; } Property Value Guid Key 获取或设置实例的唯一键 string Key { get; set; } Property Value string Remarks $\"{Type}-{Server}-{DatabaseName}-{Port}\" Methods DisconnectDb() 断开数据库连接并清理必要资源 void DisconnectDb() GetDbTaskHandlers() 获取所有数据库任务处理程序的列表 IEnumerable<IDbTaskHandler> GetDbTaskHandlers() Returns IEnumerable<IDbTaskHandler> 包含所有任务处理程序的枚举 GetExistingTablesAsync() 获取数据库中已存在的表名列表 Task<HashSet<string>> GetExistingTablesAsync() Returns Task<HashSet<string>> Remarks 一个包含数据库中所有表名的 HashSet 集合，这个集合中的表名不区分大小写 GetInstanceStatus() 获取当前实例状态 DatabaseModel GetInstanceStatus() Returns DatabaseModel DatabaseModel 对象 InitializationAsync(CancellationToken) 异步执行初始化 Task<bool> InitializationAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，成功返回true，失败false Exceptions OperationCanceledException 取消此操作时抛出此异常 StartDbTask() 启动数据库任务 void StartDbTask() StopDbTask() 停止数据库任务 void StopDbTask() TestDbConnectionAsync(CancellationToken) 异步测试数据库连接，成功后自动关闭 Task<bool> TestDbConnectionAsync(CancellationToken token = default) Parameters token CancellationToken 取消令牌 Returns Task<bool> 异步操作任务结果，测试成功返回true，否则返回 false Remarks 如果手动取消，自行处理 OperationCanceledException 异常 Exceptions OperationCanceledException 取消此操作时抛出此异常 Events OnInstanceExpired 服务过期事件，表示闲置已达到设定时间 event EventHandler OnInstanceExpired Event Type EventHandler OnInstantMessageReceived 即时信息事件 event EventHandler<InstantMessageModel> OnInstantMessageReceived Event Type EventHandler<InstantMessageModel> OnTaskAbnormalStop 任务异常停止事件 event EventHandler OnTaskAbnormalStop Event Type EventHandler"
  },
  "api/MAS.SharedLibrary.Database.IDbServiceFactory.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbServiceFactory.html",
    "title": "Interface IDbServiceFactory | DataMaster",
    "summary": "Interface IDbServiceFactory Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 创建不同的数据库服务工厂接口 public interface IDbServiceFactory Methods Create(DatabaseType) 根据传入的数据库类型枚举创建或获取相应的数据库服务实例 DatabaseServiceWrapper Create(DatabaseType dbType) Parameters dbType DatabaseType 数据库类型枚举 Returns DatabaseServiceWrapper 包含实现了 IDbService 接口的数据库服务及其依赖项的包装类 DatabaseServiceWrapper Remarks 根据数据库类型枚举 dbType 创建一个新的数据库服务实例 如果已存在相同配置的实例，则返回已存在的实例 Create(IDbConfig) 根据指定的数据库配置创建或获取相应的数据库服务实例 DatabaseServiceWrapper Create(IDbConfig config) Parameters config IDbConfig 数据库服务的配置参数 Returns DatabaseServiceWrapper 包含实现了 IDbService 接口的数据库服务及其依赖项的包装类 DatabaseServiceWrapper Remarks 根据传入的数据库配置 config 创建一个新的数据库服务实例 如果已存在相同配置的实例，则返回已存在的实例 Create(string) 根据传入的数据库类型名称创建或获取相应的数据库服务实例 DatabaseServiceWrapper Create(string dbType) Parameters dbType string 数据库类型标识字符串 Returns DatabaseServiceWrapper 包含实现了 IDbService 接口的数据库服务及其依赖项的包装类 DatabaseServiceWrapper Remarks 根据数据库类型标识字符串 dbType 创建一个新的数据库服务实例 如果已存在相同配置的实例，则返回已存在的实例 Exists(IDbConfig) 检查指定的配置是否存在实例 bool Exists(IDbConfig config) Parameters config IDbConfig 数据库配置参数 Returns bool 如果存在返回 true，否则 false Exists(string) 检查指定的键是否存在实例 bool Exists(string key) Parameters key string 用于查找 IDbService 实例的唯一键 Returns bool 如果存在返回 true，否则 false GetAllDatabasesStatus() 获取所有数据库实例的状态信息 IEnumerable<DatabaseModel> GetAllDatabasesStatus() Returns IEnumerable<DatabaseModel> 数据库状态信息集合 GetInstance(string) 根据唯一标识符获取已存在的 DatabaseServiceWrapper 实例 DatabaseServiceWrapper? GetInstance(string key) Parameters key string 用于查找 DatabaseServiceWrapper 实例的唯一键 Returns DatabaseServiceWrapper 如果找到对应的实例则返回该实例及其依赖项的包装类，否则返回 null RemoveDatabase(string) 移除指定 Key 的数据库实例 bool RemoveDatabase(string key) Parameters key string 要移除的数据库实例唯一 Key Returns bool 如果移除成功返回 true，否则返回 false Events OnInstanceCreate 实例创建事件 event EventHandler<InstanceCreateEventArgs> OnInstanceCreate Event Type EventHandler<InstanceCreateEventArgs> OnInstanceExpiredRemove 实例过期移除事件 event EventHandler<InstanceExpiredRemovedEventArgs> OnInstanceExpiredRemove Event Type EventHandler<InstanceExpiredRemovedEventArgs> OnInstanceRemove 实例移除事件 event EventHandler<InstanceRemovedEventArgs> OnInstanceRemove Event Type EventHandler<InstanceRemovedEventArgs>"
  },
  "api/MAS.SharedLibrary.Database.IDbTaskHandler.html": {
    "href": "api/MAS.SharedLibrary.Database.IDbTaskHandler.html",
    "title": "Interface IDbTaskHandler | DataMaster",
    "summary": "Interface IDbTaskHandler Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 数据库任务处理程序接口 public interface IDbTaskHandler Properties DataSourceName 获取数据源名称 string DataSourceName { get; } Property Value string TaskName 获取任务名称 string TaskName { get; } Property Value string Methods StartTask() 启动任务 void StartTask() StopTask() 停止任务 void StopTask() Events OnInstantMessageReceived 即时信息事件 event EventHandler<InstantMessageModel>? OnInstantMessageReceived Event Type EventHandler<InstantMessageModel>"
  },
  "api/MAS.SharedLibrary.Database.InstanceCreateEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Database.InstanceCreateEventArgs.html",
    "title": "Class InstanceCreateEventArgs | DataMaster",
    "summary": "Class InstanceCreateEventArgs Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 实例创建事件参数 public class InstanceCreateEventArgs : EventArgs, IInstanceCreateEventArgs Inheritance object EventArgs InstanceCreateEventArgs Implements IInstanceCreateEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceCreateEventArgs(DatabaseModel, JObject) 实例创建事件参数 public InstanceCreateEventArgs(DatabaseModel model, JObject config) Parameters model DatabaseModel 创建的实例对象 config JObject 实例配置对象 Properties Config 获取配置对象 public JObject Config { get; } Property Value JObject Key 获取标识键 public string Key { get; } Property Value string Model 获取创建的实例对象 public DatabaseModel Model { get; } Property Value DatabaseModel"
  },
  "api/MAS.SharedLibrary.Database.InstanceExpiredRemovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Database.InstanceExpiredRemovedEventArgs.html",
    "title": "Class InstanceExpiredRemovedEventArgs | DataMaster",
    "summary": "Class InstanceExpiredRemovedEventArgs Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 实例过期移除事件参数 public class InstanceExpiredRemovedEventArgs : EventArgs, IInstanceExpiredRemovedEventArgs Inheritance object EventArgs InstanceExpiredRemovedEventArgs Implements IInstanceExpiredRemovedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceExpiredRemovedEventArgs(string) 实例过期移除事件参数 public InstanceExpiredRemovedEventArgs(string key) Parameters key string 移除的实例的唯一键 Properties Key 获取移除的实例的唯一键 public string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.InstanceRemovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Database.InstanceRemovedEventArgs.html",
    "title": "Class InstanceRemovedEventArgs | DataMaster",
    "summary": "Class InstanceRemovedEventArgs Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 实例移除事件参数 public class InstanceRemovedEventArgs : EventArgs, IInstanceRemovedEventArgs Inheritance object EventArgs InstanceRemovedEventArgs Implements IInstanceRemovedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceRemovedEventArgs(string) 实例移除事件参数 public InstanceRemovedEventArgs(string key) Parameters key string 移除的实例的唯一键 Properties Key 获取移除的实例的唯一键 public string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.SkipUpdateIfValueAttribute.html": {
    "href": "api/MAS.SharedLibrary.Database.SkipUpdateIfValueAttribute.html",
    "title": "Class SkipUpdateIfValueAttribute | DataMaster",
    "summary": "Class SkipUpdateIfValueAttribute Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 标记在更新操作中，如果字符串字段值为指定值，则跳过更新该字段 [AttributeUsage(AttributeTargets.Property, Inherited = false)] public class SkipUpdateIfValueAttribute : Attribute Inheritance object Attribute SkipUpdateIfValueAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SkipUpdateIfValueAttribute(string) 标记在更新操作中，如果字符串字段值为指定值，则跳过更新该字段 public SkipUpdateIfValueAttribute(string valueToSkip) Parameters valueToSkip string Properties ValueToSkip 获取要跳过更新的字符串值 public string ValueToSkip { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.TableAttribute.html": {
    "href": "api/MAS.SharedLibrary.Database.TableAttribute.html",
    "title": "Class TableAttribute | DataMaster",
    "summary": "Class TableAttribute Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 自定义属性类，用于将类映射到数据库表 [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class TableAttribute : Attribute Inheritance object Attribute TableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 使用此属性可以指定类对应的数据库表名 Constructors TableAttribute(string) 自定义属性类，用于将类映射到数据库表 public TableAttribute(string name) Parameters name string 表的名称 Remarks 使用此属性可以指定类对应的数据库表名 Properties Name 获取数据库中表的名称 public string Name { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Database.TableQueryParameters.html": {
    "href": "api/MAS.SharedLibrary.Database.TableQueryParameters.html",
    "title": "Class TableQueryParameters | DataMaster",
    "summary": "Class TableQueryParameters Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 表数据查询参数 public class TableQueryParameters : ICloneable Inheritance object TableQueryParameters Implements ICloneable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Columns 获取或设置要查询的列名。如果为空，则查询所有列 public string? Columns { get; set; } Property Value string Remarks column1, column2, column3 DateColumn 获取或设置用于日期过滤的列名。如果为空，则不应用日期过滤 public string? DateColumn { get; set; } Property Value string EndDate 获取或设置结束日期 public DateTime? EndDate { get; set; } Property Value DateTime? Filter 获取或设置查询条件 public string? Filter { get; set; } Property Value string Remarks 示例1： Id > 3000 示例2： Price < 100 AND Stock >= 50 示例3： CreatedDate >= '2023-01-01' AND CreatedDate <= '2023-12-31' PageNumber 获取或设置页码（从 1 开始） public int PageNumber { get; set; } Property Value int PageSize 获取或设置每页记录数 public int PageSize { get; set; } Property Value int SortColumn 获取或设置排序的列名。默认使用主键 \"Id\" public string? SortColumn { get; set; } Property Value string SortDescending 获取或设置是否降序排序。默认为升序 public bool SortDescending { get; set; } Property Value bool StartDate 获取或设置开始日期 public DateTime? StartDate { get; set; } Property Value DateTime? TableName 获取或设置表名 public string TableName { get; set; } Property Value string Methods Clone() Creates a new object that is a copy of the current instance. public object Clone() Returns object A new object that is a copy of this instance."
  },
  "api/MAS.SharedLibrary.Database.UniqueConstraintAttribute.html": {
    "href": "api/MAS.SharedLibrary.Database.UniqueConstraintAttribute.html",
    "title": "Class UniqueConstraintAttribute | DataMaster",
    "summary": "Class UniqueConstraintAttribute Namespace MAS.SharedLibrary.Database Assembly MAS.SharedLibrary.dll 自定义属性类，定义组合唯一键 [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public class UniqueConstraintAttribute : Attribute Inheritance object Attribute UniqueConstraintAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UniqueConstraintAttribute(params string[]) 构造函数，初始化 UniqueConstraintAttribute 新实例 public UniqueConstraintAttribute(params string[] columns) Parameters columns string[] 组合唯一键包含的列名 Properties Columns 获取组合唯一键中包含的列名 public string[] Columns { get; } Property Value string[]"
  },
  "api/MAS.SharedLibrary.Database.html": {
    "href": "api/MAS.SharedLibrary.Database.html",
    "title": "Namespace MAS.SharedLibrary.Database | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Database Classes ColumnAttribute 自定义属性类，用于将类的属性映射到数据库表的列 DataAccessTypeDetails 表示用于数据访问层详细信息数据模型 DatabaseModel 数据库的数据模型 DatabaseServiceWrapper 用于存数据库信服务及其依赖项的包装类 DbHandlerAttribute 指示是否启用数据库任务处理程序的创建 InstanceCreateEventArgs 实例创建事件参数 InstanceExpiredRemovedEventArgs 实例过期移除事件参数 InstanceRemovedEventArgs 实例移除事件参数 SkipUpdateIfValueAttribute 标记在更新操作中，如果字符串字段值为指定值，则跳过更新该字段 TableAttribute 自定义属性类，用于将类映射到数据库表 TableQueryParameters 表数据查询参数 UniqueConstraintAttribute 自定义属性类，定义组合唯一键 Interfaces IDbBuildConfig 数据库构建相关的配置接口 IDbConfig 数据库的基本参数配置接口 IDbInitializer 数据库初始化接口 IDbMetadataOperations 处理数据库元数据的操作接口 IDbOperations 通用的数据库操作接口 IDbService 数据库服务接口 IDbServiceFactory 创建不同的数据库服务工厂接口 IDbTaskHandler 数据库任务处理程序接口 Enums DatabaseType 数据库类型枚举"
  },
  "api/MAS.SharedLibrary.EventAggregator.ControlsDeleteEventArgs.html": {
    "href": "api/MAS.SharedLibrary.EventAggregator.ControlsDeleteEventArgs.html",
    "title": "Class ControlsDeleteEventArgs | DataMaster",
    "summary": "Class ControlsDeleteEventArgs Namespace MAS.SharedLibrary.EventAggregator Assembly MAS.SharedLibrary.dll 控件删除事件 public class ControlsDeleteEventArgs : EventArgs Inheritance object EventArgs ControlsDeleteEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 此事件用于通知控件被删除，适用于以下场景： - 控件视图模型的 Dispose() 调用（通常不移除持久化数据） - 手动删除控件（通常需要移除持久化数据） Constructors ControlsDeleteEventArgs(string, bool) 控件删除事件 public ControlsDeleteEventArgs(string key, bool isRemoveFromPersistence = false) Parameters key string 删除控件的键 isRemoveFromPersistence bool 是否清除持久化数据的标志 Remarks 此事件用于通知控件被删除，适用于以下场景： - 控件视图模型的 Dispose() 调用（通常不移除持久化数据） - 手动删除控件（通常需要移除持久化数据） Properties IsRemoveFromPersistence 获取是否应该从持久化数据中移除控件 public bool IsRemoveFromPersistence { get; } Property Value bool Key 获取被删除控件的键 public string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.EventAggregator.DataUpdateEventArgs-1.html": {
    "href": "api/MAS.SharedLibrary.EventAggregator.DataUpdateEventArgs-1.html",
    "title": "Class DataUpdateEventArgs<T> | DataMaster",
    "summary": "Class DataUpdateEventArgs<T> Namespace MAS.SharedLibrary.EventAggregator Assembly MAS.SharedLibrary.dll 泛型数据更新事件 public class DataUpdateEventArgs<T> : EventArgs Type Parameters T 数据类型 Inheritance object EventArgs DataUpdateEventArgs<T> Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataUpdateEventArgs(T) 泛型数据更新事件 public DataUpdateEventArgs(T data) Parameters data T 携带的数据内容 Properties Data 携带的数据内容 public T Data { get; } Property Value T"
  },
  "api/MAS.SharedLibrary.EventAggregator.IEventAggregatorService.html": {
    "href": "api/MAS.SharedLibrary.EventAggregator.IEventAggregatorService.html",
    "title": "Interface IEventAggregatorService | DataMaster",
    "summary": "Interface IEventAggregatorService Namespace MAS.SharedLibrary.EventAggregator Assembly MAS.SharedLibrary.dll 提供多线程安全的事件聚合器服务 public interface IEventAggregatorService Methods PublishAsync<TEvent>(TEvent) 异步发布一个事件，通知所有订阅了该事件的异步订阅者 Task PublishAsync<TEvent>(TEvent eventToPublish) Parameters eventToPublish TEvent 要发布的事件的实例 Returns Task 返回一个已完成的异步任务结果，表示事件发布操作已经启动 Type Parameters TEvent 要发布的事件的类型 Remarks Fire-and-Forget 模式。在单独的后台线程中启动所有订阅者的异步处理任务后立即返回，不等待这些任务完成 Publish<TEvent>(TEvent) 发布一个事件，通知所有订阅了该事件的订阅者 void Publish<TEvent>(TEvent eventToPublish) Parameters eventToPublish TEvent 要发布的事件的实例 Type Parameters TEvent 要发布的事件的类型 SubscribeAsync<TEvent>(Func<TEvent, Task>) 异步订阅事件 void SubscribeAsync<TEvent>(Func<TEvent, Task> action) Parameters action Func<TEvent, Task> 当事件发生时要异步执行的操作。这是一个接受事件类型作为参数的异步委托（方法） Type Parameters TEvent 要订阅的事件的类型 Subscribe<TEvent>(Action<TEvent>) 订阅事件 void Subscribe<TEvent>(Action<TEvent> action) Parameters action Action<TEvent> 当事件发生时要执行的操作。这是一个接受事件类型作为参数的委托（方法） Type Parameters TEvent 要订阅的事件的类型 UnsubscribeAsync<TEvent>(Func<TEvent, Task>) 取消异步事件订阅 void UnsubscribeAsync<TEvent>(Func<TEvent, Task> action) Parameters action Func<TEvent, Task> 当事件发生时应该异步执行的操作。这是一个异步方法委托， 它接受一个 TEvent 类型的参数，这个参数是之前订阅时指定的。 传入的委托应与订阅时使用的委托完全相同，包括其引用 Type Parameters TEvent 要取消订阅的事件的类型 Unsubscribe<TEvent>(Action<TEvent>) 取消事件订阅 void Unsubscribe<TEvent>(Action<TEvent> action) Parameters action Action<TEvent> 当事件发生时应该执行的操作。这是一个方法委托， 它接受一个 TEvent 类型的参数，这个参数是之前订阅时指定的。 传入的委托应与订阅时使用的委托完全相同，包括其引用 Type Parameters TEvent 要取消订阅的事件的类型"
  },
  "api/MAS.SharedLibrary.EventAggregator.NavigationEventArgs.html": {
    "href": "api/MAS.SharedLibrary.EventAggregator.NavigationEventArgs.html",
    "title": "Class NavigationEventArgs | DataMaster",
    "summary": "Class NavigationEventArgs Namespace MAS.SharedLibrary.EventAggregator Assembly MAS.SharedLibrary.dll 表示在应用程序中发生的导航事件，携带有关导航操作的详细信息 public class NavigationEventArgs : EventArgs Inheritance object EventArgs NavigationEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NavigationEventArgs(Type, object?) 表示在应用程序中发生的导航事件，携带有关导航操作的详细信息 public NavigationEventArgs(Type pageType, object? dataContext = null) Parameters pageType Type 导航目标页面的类型 dataContext object 导航页面的数据上下文 Properties DataContext 获取导航目标页面的数据上下文 public object? DataContext { get; init; } Property Value object PageType 获取导航目标页面的类型 public Type PageType { get; init; } Property Value Type"
  },
  "api/MAS.SharedLibrary.EventAggregator.html": {
    "href": "api/MAS.SharedLibrary.EventAggregator.html",
    "title": "Namespace MAS.SharedLibrary.EventAggregator | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.EventAggregator Classes ControlsDeleteEventArgs 控件删除事件 DataUpdateEventArgs<T> 泛型数据更新事件 NavigationEventArgs 表示在应用程序中发生的导航事件，携带有关导航操作的详细信息 Interfaces IEventAggregatorService 提供多线程安全的事件聚合器服务"
  },
  "api/MAS.SharedLibrary.Exceptions.ImageTypeException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.ImageTypeException.html",
    "title": "Class ImageTypeException | DataMaster",
    "summary": "Class ImageTypeException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 图像类型异常 public class ImageTypeException : Exception, ISerializable Inheritance object Exception ImageTypeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ImageTypeException() 初始化 ImageTypeException 类的新实例 public ImageTypeException() ImageTypeException(string) 初始化 ImageTypeException 新实例 public ImageTypeException(string message) Parameters message string 异常消息 ImageTypeException(string, Exception) 初始化 ImageTypeException 新实例 public ImageTypeException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PipelineCompilationException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PipelineCompilationException.html",
    "title": "Class PipelineCompilationException | DataMaster",
    "summary": "Class PipelineCompilationException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 管道编译异常 public class PipelineCompilationException : Exception, ISerializable Inheritance object Exception PipelineCompilationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PipelineCompilationException(string) 初始化 PipelineCompilationException 新实例 public PipelineCompilationException(string message) Parameters message string 异常消息 PipelineCompilationException(string, Exception) 初始化 PipelineCompilationException 新实例 public PipelineCompilationException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PipelineException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PipelineException.html",
    "title": "Class PipelineException | DataMaster",
    "summary": "Class PipelineException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 管道基础异常 public class PipelineException : Exception, ISerializable Inheritance object Exception PipelineException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PipelineException(string) 初始化 PipelineException 新实例 public PipelineException(string message) Parameters message string 异常消息 PipelineException(string, Exception) 初始化 PipelineException 新实例 public PipelineException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PipelineExecutionException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PipelineExecutionException.html",
    "title": "Class PipelineExecutionException | DataMaster",
    "summary": "Class PipelineExecutionException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 管道执行异常 public class PipelineExecutionException : Exception, ISerializable Inheritance object Exception PipelineExecutionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PipelineExecutionException(string) 初始化 PipelineExecutionException 新实例 public PipelineExecutionException(string message) Parameters message string 异常消息 PipelineExecutionException(string, Exception) 初始化 PipelineExecutionException 新实例 public PipelineExecutionException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PipelineInstantiationException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PipelineInstantiationException.html",
    "title": "Class PipelineInstantiationException | DataMaster",
    "summary": "Class PipelineInstantiationException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 管道实例化异常 public class PipelineInstantiationException : Exception, ISerializable Inheritance object Exception PipelineInstantiationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PipelineInstantiationException(string) 初始化 PipelineInstantiationException 新实例 public PipelineInstantiationException(string message) Parameters message string 异常消息 PipelineInstantiationException(string, Exception) 初始化 PipelineInstantiationException 新实例 public PipelineInstantiationException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PipelineNotFoundException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PipelineNotFoundException.html",
    "title": "Class PipelineNotFoundException | DataMaster",
    "summary": "Class PipelineNotFoundException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 管道未找到异常 public class PipelineNotFoundException : Exception, ISerializable Inheritance object Exception PipelineNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PipelineNotFoundException() 初始化 PipelineNotFoundException 新实例 public PipelineNotFoundException() PipelineNotFoundException(string) 初始化 PipelineNotFoundException 新实例 public PipelineNotFoundException(string message) Parameters message string 异常消息 PipelineNotFoundException(string, Exception) 初始化 PipelineNotFoundException 新实例 public PipelineNotFoundException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PipelineStartException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PipelineStartException.html",
    "title": "Class PipelineStartException | DataMaster",
    "summary": "Class PipelineStartException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 管道启动异常 public class PipelineStartException : Exception, ISerializable Inheritance object Exception PipelineStartException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PipelineStartException() 初始化 PipelineStartException 新实例 public PipelineStartException() PipelineStartException(string) 初始化 PipelineStartException 新实例 public PipelineStartException(string message) Parameters message string 异常消息 PipelineStartException(string, Exception) 初始化 PipelineStartException 新实例 public PipelineStartException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PipelineTimeoutException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PipelineTimeoutException.html",
    "title": "Class PipelineTimeoutException | DataMaster",
    "summary": "Class PipelineTimeoutException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 管道操作超时异常 public class PipelineTimeoutException : Exception, ISerializable Inheritance object Exception PipelineTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PipelineTimeoutException() 初始化 PipelineTimeoutException 新实例 public PipelineTimeoutException() PipelineTimeoutException(string) 初始化 PipelineTimeoutException 新实例 public PipelineTimeoutException(string message) Parameters message string 异常消息 PipelineTimeoutException(string, Exception) 初始化 PipelineTimeoutException 新实例 public PipelineTimeoutException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PlcConnectionException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PlcConnectionException.html",
    "title": "Class PlcConnectionException | DataMaster",
    "summary": "Class PlcConnectionException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll PLC 连接错误异常 public class PlcConnectionException : Exception, ISerializable Inheritance object Exception PlcConnectionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PlcConnectionException(string) 初始化 PlcConnectionException 新实例 public PlcConnectionException(string message) Parameters message string 异常消息 PlcConnectionException(string, Exception) 初始化 PlcConnectionException 新实例 public PlcConnectionException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PlcInvalidByteCountException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PlcInvalidByteCountException.html",
    "title": "Class PlcInvalidByteCountException | DataMaster",
    "summary": "Class PlcInvalidByteCountException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll PLC 接收字节数据错误异常 public class PlcInvalidByteCountException : Exception, ISerializable Inheritance object Exception PlcInvalidByteCountException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PlcInvalidByteCountException(string) 初始化 PlcInvalidByteCountException 新实例 public PlcInvalidByteCountException(string message) Parameters message string 异常消息 PlcInvalidByteCountException(string, Exception) 初始化 PlcInvalidByteCountException 新实例 public PlcInvalidByteCountException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PlcInvalidDataFormatException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PlcInvalidDataFormatException.html",
    "title": "Class PlcInvalidDataFormatException | DataMaster",
    "summary": "Class PlcInvalidDataFormatException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll PLC 变量格式错误异常 public class PlcInvalidDataFormatException : Exception, ISerializable Inheritance object Exception PlcInvalidDataFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PlcInvalidDataFormatException(string) 初始化 PlcInvalidDataFormatException 新实例 public PlcInvalidDataFormatException(string message) Parameters message string 异常消息 PlcInvalidDataFormatException(string, Exception) 初始化 PlcInvalidDataFormatException 新实例 public PlcInvalidDataFormatException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PlcReadErrorException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PlcReadErrorException.html",
    "title": "Class PlcReadErrorException | DataMaster",
    "summary": "Class PlcReadErrorException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll PLC 读取数据错误异常 public class PlcReadErrorException : Exception, ISerializable Inheritance object Exception PlcReadErrorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PlcReadErrorException(string) 初始化 PlcReadErrorException 新实例 public PlcReadErrorException(string message) Parameters message string 异常消息 PlcReadErrorException(string, Exception) 初始化 PlcReadErrorException 新实例 public PlcReadErrorException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PlcSendErrorException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PlcSendErrorException.html",
    "title": "Class PlcSendErrorException | DataMaster",
    "summary": "Class PlcSendErrorException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll PLC 发送数据错误异常 public class PlcSendErrorException : Exception, ISerializable Inheritance object Exception PlcSendErrorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PlcSendErrorException(string) 初始化 PlcSendErrorException 新实例 public PlcSendErrorException(string message) Parameters message string 异常消息 PlcSendErrorException(string, Exception) 初始化 PlcInvalidDataFormatException 新实例 public PlcSendErrorException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PlcTimeoutException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PlcTimeoutException.html",
    "title": "Class PlcTimeoutException | DataMaster",
    "summary": "Class PlcTimeoutException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll PLC 网络请求超时异常 public class PlcTimeoutException : Exception, ISerializable Inheritance object Exception PlcTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PlcTimeoutException(string) 初始化 PlcTimeoutException 新实例 public PlcTimeoutException(string message) Parameters message string 异常消息 PlcTimeoutException(string, Exception) 初始化 PlcTimeoutException 新实例 public PlcTimeoutException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.PlcWriteErrorException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.PlcWriteErrorException.html",
    "title": "Class PlcWriteErrorException | DataMaster",
    "summary": "Class PlcWriteErrorException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll PLC 写数据错误异常 public class PlcWriteErrorException : Exception, ISerializable Inheritance object Exception PlcWriteErrorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PlcWriteErrorException(string) 初始化 PlcWriteErrorException 新实例 public PlcWriteErrorException(string message) Parameters message string 异常消息 PlcWriteErrorException(string, Exception) 初始化 PlcWriteErrorException 新实例 public PlcWriteErrorException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.ProjectConfigException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.ProjectConfigException.html",
    "title": "Class ProjectConfigException | DataMaster",
    "summary": "Class ProjectConfigException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 项目配置异常类 public class ProjectConfigException : Exception, ISerializable Inheritance object Exception ProjectConfigException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProjectConfigException() 初始化 ProjectConfigException 新实例 public ProjectConfigException() ProjectConfigException(string) 初始化 ProjectConfigException 新实例 public ProjectConfigException(string message) Parameters message string 异常消息 ProjectConfigException(string, Exception) 初始化 ProjectConfigException 新实例 public ProjectConfigException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.ProjectCreationException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.ProjectCreationException.html",
    "title": "Class ProjectCreationException | DataMaster",
    "summary": "Class ProjectCreationException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 工程创建失败异常 public class ProjectCreationException : Exception, ISerializable Inheritance object Exception ProjectCreationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProjectCreationException() 初始化 ProjectCreationException 新实例 public ProjectCreationException() ProjectCreationException(string) 初始化 ProjectCreationException 新实例 public ProjectCreationException(string message) Parameters message string 异常消息 ProjectCreationException(string, Exception) 初始化 ProjectCreationException 新实例 public ProjectCreationException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.ProjectLoadException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.ProjectLoadException.html",
    "title": "Class ProjectLoadException | DataMaster",
    "summary": "Class ProjectLoadException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 工程加载异常 public class ProjectLoadException : Exception, ISerializable Inheritance object Exception ProjectLoadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProjectLoadException() 初始化 ProjectLoadException 新实例 public ProjectLoadException() ProjectLoadException(string) 初始化 ProjectLoadException 新实例 public ProjectLoadException(string message) Parameters message string 异常消息 ProjectLoadException(string, Exception) 初始化 ProjectLoadException 新实例 public ProjectLoadException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.ProjectNullException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.ProjectNullException.html",
    "title": "Class ProjectNullException | DataMaster",
    "summary": "Class ProjectNullException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 工程项目空异常 public class ProjectNullException : Exception, ISerializable Inheritance object Exception ProjectNullException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProjectNullException() 初始化 ProjectNullException 新实例 public ProjectNullException() ProjectNullException(string) 初始化 ProjectNullException 新实例 public ProjectNullException(string message) Parameters message string 异常消息 ProjectNullException(string, Exception) 初始化 ProjectNullException 新实例 public ProjectNullException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.ProjectSaveException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.ProjectSaveException.html",
    "title": "Class ProjectSaveException | DataMaster",
    "summary": "Class ProjectSaveException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 工程保存异常 public class ProjectSaveException : Exception, ISerializable Inheritance object Exception ProjectSaveException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProjectSaveException() 初始化 ProjectSaveException 新实例 public ProjectSaveException() ProjectSaveException(string) 初始化 ProjectSaveException 新实例 public ProjectSaveException(string message) Parameters message string 异常消息 ProjectSaveException(string, Exception) 初始化 ProjectSaveException 新实例 public ProjectSaveException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.ProtocolInstanceNotFoundException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.ProtocolInstanceNotFoundException.html",
    "title": "Class ProtocolInstanceNotFoundException | DataMaster",
    "summary": "Class ProtocolInstanceNotFoundException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 协议实例未找到异常 public class ProtocolInstanceNotFoundException : Exception, ISerializable Inheritance object Exception ProtocolInstanceNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProtocolInstanceNotFoundException(string) 初始化 ProtocolInstanceNotFoundException 新实例 public ProtocolInstanceNotFoundException(string instanceId) Parameters instanceId string 实例Id ProtocolInstanceNotFoundException(string, Exception) 初始化 ProtocolInstanceNotFoundException 新实例 public ProtocolInstanceNotFoundException(string instanceId, Exception innerException) Parameters instanceId string 实例Id innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.VisionCircularDependencyException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.VisionCircularDependencyException.html",
    "title": "Class VisionCircularDependencyException | DataMaster",
    "summary": "Class VisionCircularDependencyException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 理管道中存在循环依赖的异常 public class VisionCircularDependencyException : Exception, ISerializable Inheritance object Exception VisionCircularDependencyException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VisionCircularDependencyException() 初始化 VisionCircularDependencyException 新实例 public VisionCircularDependencyException() VisionCircularDependencyException(string) 初始化 VisionCircularDependencyException 新实例 public VisionCircularDependencyException(string message) Parameters message string 异常消息 VisionCircularDependencyException(string, Exception) 初始化 VisionCircularDependencyException 新实例 public VisionCircularDependencyException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.VisionExecutionFailureException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.VisionExecutionFailureException.html",
    "title": "Class VisionExecutionFailureException | DataMaster",
    "summary": "Class VisionExecutionFailureException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 图像处理执行过程中发生的异常 public class VisionExecutionFailureException : Exception, ISerializable Inheritance object Exception VisionExecutionFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VisionExecutionFailureException() 初始化 VisionExecutionFailureException 新实例 public VisionExecutionFailureException() VisionExecutionFailureException(string) 初始化 VisionExecutionFailureException 新实例 public VisionExecutionFailureException(string message) Parameters message string 异常消息 VisionExecutionFailureException(string, Exception) 初始化 VisionExecutionFailureException 新实例 public VisionExecutionFailureException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.VisionInitializationFailureException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.VisionInitializationFailureException.html",
    "title": "Class VisionInitializationFailureException | DataMaster",
    "summary": "Class VisionInitializationFailureException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 模块初始化失败的异常 public class VisionInitializationFailureException : Exception, ISerializable Inheritance object Exception VisionInitializationFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VisionInitializationFailureException() 初始化 VisionInitializationFailureException 新实例 public VisionInitializationFailureException() VisionInitializationFailureException(string) 初始化 VisionInitializationFailureException 新实例 public VisionInitializationFailureException(string message) Parameters message string 异常消息 VisionInitializationFailureException(string, Exception) 初始化 VisionInitializationFailureException 新实例 public VisionInitializationFailureException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.VisionInvalidInputDataException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.VisionInvalidInputDataException.html",
    "title": "Class VisionInvalidInputDataException | DataMaster",
    "summary": "Class VisionInvalidInputDataException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 图像输入数据存在问题的异常 public class VisionInvalidInputDataException : Exception, ISerializable Inheritance object Exception VisionInvalidInputDataException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VisionInvalidInputDataException() 初始化 VisionInvalidInputDataException 新实例 public VisionInvalidInputDataException() VisionInvalidInputDataException(string) 初始化 VisionInvalidInputDataException 新实例 public VisionInvalidInputDataException(string message) Parameters message string 异常消息 VisionInvalidInputDataException(string, Exception) 初始化 VisionInvalidInputDataException 新实例 public VisionInvalidInputDataException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.VisionProjectException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.VisionProjectException.html",
    "title": "Class VisionProjectException | DataMaster",
    "summary": "Class VisionProjectException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 视觉工程异常 public class VisionProjectException : Exception, ISerializable Inheritance object Exception VisionProjectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VisionProjectException(string) 初始化 VisionProjectException 新实例 public VisionProjectException(string message) Parameters message string 异常消息 VisionProjectException(string, Exception) 初始化 VisionProjectException 新实例 public VisionProjectException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.VisionWarningException.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.VisionWarningException.html",
    "title": "Class VisionWarningException | DataMaster",
    "summary": "Class VisionWarningException Namespace MAS.SharedLibrary.Exceptions Assembly MAS.SharedLibrary.dll 图像处理中的警告或非致命错误 public class VisionWarningException : Exception, ISerializable Inheritance object Exception VisionWarningException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VisionWarningException() 初始化 VisionWarningException 新实例 public VisionWarningException() VisionWarningException(string) 初始化 VisionWarningException 新实例 public VisionWarningException(string message) Parameters message string 异常消息 VisionWarningException(string, Exception) 初始化 VisionWarningException 新实例 public VisionWarningException(string message, Exception innerException) Parameters message string 异常消息 innerException Exception 内部异常"
  },
  "api/MAS.SharedLibrary.Exceptions.html": {
    "href": "api/MAS.SharedLibrary.Exceptions.html",
    "title": "Namespace MAS.SharedLibrary.Exceptions | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Exceptions Classes ImageTypeException 图像类型异常 PipelineCompilationException 管道编译异常 PipelineException 管道基础异常 PipelineExecutionException 管道执行异常 PipelineInstantiationException 管道实例化异常 PipelineNotFoundException 管道未找到异常 PipelineStartException 管道启动异常 PipelineTimeoutException 管道操作超时异常 PlcConnectionException PLC 连接错误异常 PlcInvalidByteCountException PLC 接收字节数据错误异常 PlcInvalidDataFormatException PLC 变量格式错误异常 PlcReadErrorException PLC 读取数据错误异常 PlcSendErrorException PLC 发送数据错误异常 PlcTimeoutException PLC 网络请求超时异常 PlcWriteErrorException PLC 写数据错误异常 ProjectConfigException 项目配置异常类 ProjectCreationException 工程创建失败异常 ProjectLoadException 工程加载异常 ProjectNullException 工程项目空异常 ProjectSaveException 工程保存异常 ProtocolInstanceNotFoundException 协议实例未找到异常 VisionCircularDependencyException 理管道中存在循环依赖的异常 VisionExecutionFailureException 图像处理执行过程中发生的异常 VisionInitializationFailureException 模块初始化失败的异常 VisionInvalidInputDataException 图像输入数据存在问题的异常 VisionProjectException 视觉工程异常 VisionWarningException 图像处理中的警告或非致命错误"
  },
  "api/MAS.SharedLibrary.GlobalDefaultPath.html": {
    "href": "api/MAS.SharedLibrary.GlobalDefaultPath.html",
    "title": "Class GlobalDefaultPath | DataMaster",
    "summary": "Class GlobalDefaultPath Namespace MAS.SharedLibrary Assembly MAS.SharedLibrary.dll 全局默认存储位置 public static class GlobalDefaultPath Inheritance object GlobalDefaultPath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackupPath 获取默认备份路径 public static string BackupPath { get; } Property Value string ConversionCachePath 获取转换的缓存图像存储的默认路径 public static string ConversionCachePath { get; } Property Value string DataExportPath 获取数据导出的默认存储路径 public static string DataExportPath { get; } Property Value string DetectedImagePath 获取检测到目标时图像存储的默认路径 public static string DetectedImagePath { get; } Property Value string DynamicAssemblyPath 获取默生成的程序集路径 public static string DynamicAssemblyPath { get; } Property Value string ImagePath 获取图像存储的默认路径 public static string ImagePath { get; } Property Value string NonDetectedImagePath 获取未检测到目标时图像存储的默认路径 public static string NonDetectedImagePath { get; } Property Value string ProjectPath 获取工程文件的默认存储路径 public static string ProjectPath { get; } Property Value string TemplatePath 获取模板图像的默认存储路径 public static string TemplatePath { get; } Property Value string Methods EnsureDefaultDirectoriesExist() 确保所有默认目录存在，如果不存在则创建 public static void EnsureDefaultDirectoriesExist()"
  },
  "api/MAS.SharedLibrary.GlobalEnvironment.html": {
    "href": "api/MAS.SharedLibrary.GlobalEnvironment.html",
    "title": "Class GlobalEnvironment | DataMaster",
    "summary": "Class GlobalEnvironment Namespace MAS.SharedLibrary Assembly MAS.SharedLibrary.dll 全局环境信息 public static class GlobalEnvironment Inheritance object GlobalEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetOSDescription() 获取当前操作系统的描述信息 public static string GetOSDescription() Returns string 操作系统描述字符串 Is64BitProcess() 判断当前进程是否为 64 位 public static bool Is64BitProcess() Returns bool 如果是返回 true，否则 false IsDebug() 当前的编译模式是否为调试环境 public static bool IsDebug() Returns bool 如果是返回true，否则false IsRelease() 当前的编译模式是否为发布环境 public static bool IsRelease() Returns bool 如果是返回 true，否则 false IsRunningInDocker() 当前程序是否在 Docker 容器中运行 public static bool IsRunningInDocker() Returns bool 如果是返回 true，否则 false"
  },
  "api/MAS.SharedLibrary.GlobalLanguageManager.html": {
    "href": "api/MAS.SharedLibrary.GlobalLanguageManager.html",
    "title": "Class GlobalLanguageManager | DataMaster",
    "summary": "Class GlobalLanguageManager Namespace MAS.SharedLibrary Assembly MAS.SharedLibrary.dll 全局语言文化管理 public class GlobalLanguageManager : INotifyPropertyChanged Inheritance object GlobalLanguageManager Implements INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance 获取 GlobalLanguageManager 类的单一实例 public static GlobalLanguageManager Instance { get; } Property Value GlobalLanguageManager this[string] 通过资源键名获取对应的本地化字符串 public string this[string key] { get; } Parameters key string 资源的键名，用于查找对应的本地化字符串 Property Value string 与提供的键名对应的本地化字符串 Methods ChangeLanguageByDescription(string) 根据语言描述切换语言 public void ChangeLanguageByDescription(string languageDescription) Parameters languageDescription string 语言描述（例如：“简体中文”、“English”） GetString(string) 得到字符串 public static string GetString(string key) Parameters key string 资源键名 Name Returns string 对应的 value，未找到则返回字符串 \"{key} is Undefined\" OnPropertyChanged(string) 触发属性更改通知 protected virtual void OnPropertyChanged(string propertyName) Parameters propertyName string 更改的属性名称 TryGetString(string) 尝试得到字符串 public static string? TryGetString(string key) Parameters key string 资源键名 Name Returns string 对应的 value，未找到则返回null Events LanguageChanged 语言改变事件，在语言切换后触发 public static event EventHandler? LanguageChanged Event Type EventHandler PropertyChanged 触发属性更改通知的事件 public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MAS.SharedLibrary.GlobalRuntime.html": {
    "href": "api/MAS.SharedLibrary.GlobalRuntime.html",
    "title": "Class GlobalRuntime | DataMaster",
    "summary": "Class GlobalRuntime Namespace MAS.SharedLibrary Assembly MAS.SharedLibrary.dll 全局累计运行时间 public static class GlobalRuntime Inheritance object GlobalRuntime Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CumulativeRunningTime 获取格式化后的累计运行时间字符串 public static string CumulativeRunningTime { get; } Property Value string Remarks 返回的字符串格式为 \"xh ym\"，其中 x 是小时数，y 是分钟数 Methods StartTimer() 初始化并启动累计运行时间的定时器 public static void StartTimer() StopTimer() 停止并释放累计运行时间的定时器 public static void StopTimer()"
  },
  "api/MAS.SharedLibrary.Helpers.DebounceDispatcherHelper.html": {
    "href": "api/MAS.SharedLibrary.Helpers.DebounceDispatcherHelper.html",
    "title": "Class DebounceDispatcherHelper | DataMaster",
    "summary": "Class DebounceDispatcherHelper Namespace MAS.SharedLibrary.Helpers Assembly MAS.SharedLibrary.dll 防抖机制的帮助类，使用 DispatcherTimer 来限制执行的频率 public static class DebounceDispatcherHelper Inheritance object DebounceDispatcherHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Debounce() 如果当前不在防抖状态，启动防抖定时器并返回 true，否则返回 false public static bool Debounce() Returns bool SetInterval(int) 调整防抖时间间隔 public static void SetInterval(int intervalMilliseconds) Parameters intervalMilliseconds int 新的防抖时间间隔（毫秒）"
  },
  "api/MAS.SharedLibrary.Helpers.InstanceKeyHelper.html": {
    "href": "api/MAS.SharedLibrary.Helpers.InstanceKeyHelper.html",
    "title": "Class InstanceKeyHelper | DataMaster",
    "summary": "Class InstanceKeyHelper Namespace MAS.SharedLibrary.Helpers Assembly MAS.SharedLibrary.dll 实例键帮助类 public static class InstanceKeyHelper Inheritance object InstanceKeyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetKey(ICommunicationConfig) 根据配置获取通讯实例键 public static string GetKey(ICommunicationConfig config) Parameters config ICommunicationConfig 协议配置参数 Returns string 指定的实例字符串键 GetKey(IDataExportConfig) 根据配置获取数据导出实例键 public static string GetKey(IDataExportConfig config) Parameters config IDataExportConfig 协议配置参数 Returns string 实例字符串键 GetKey(IDbConfig) 根据配置获取数据库实例键 public static string GetKey(IDbConfig config) Parameters config IDbConfig 数据库配置参数 Returns string 指定的实例字符串键"
  },
  "api/MAS.SharedLibrary.Helpers.MessageBoxHelper.ButtonOption.html": {
    "href": "api/MAS.SharedLibrary.Helpers.MessageBoxHelper.ButtonOption.html",
    "title": "Enum MessageBoxHelper.ButtonOption | DataMaster",
    "summary": "Enum MessageBoxHelper.ButtonOption Namespace MAS.SharedLibrary.Helpers Assembly MAS.SharedLibrary.dll 按钮选择枚举 public enum MessageBoxHelper.ButtonOption Fields Cancel = 2 取消 No = 1 否 Refuse = 3 拒绝 Yes = 0 确认"
  },
  "api/MAS.SharedLibrary.Helpers.MessageBoxHelper.html": {
    "href": "api/MAS.SharedLibrary.Helpers.MessageBoxHelper.html",
    "title": "Class MessageBoxHelper | DataMaster",
    "summary": "Class MessageBoxHelper Namespace MAS.SharedLibrary.Helpers Assembly MAS.SharedLibrary.dll Wpf.Ui MessageBox 工具类 public static class MessageBoxHelper Inheritance object MessageBoxHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ShowDialogAsync(string, string, params ButtonOption[]) 显示一个模态对话框 public static Task<MessageBoxResult> ShowDialogAsync(string titleKey, string contentKey, params MessageBoxHelper.ButtonOption[] buttons) Parameters titleKey string 标题的键值，用于从语言文化中获取对应的字符串 contentKey string 内容的键值，用于从语言文化中获取对应的字符串 buttons ButtonOption[] 按钮选项，可以是多个按钮 Returns Task<MessageBoxResult> 异步操作任务结果，选择的 MessageBoxResult： 当点击 Yes 返回的结果是 Primary 当点击 No 返回的结果是 Secondary 其余总是返回 None Remarks 优先通过键值从语言文化中尝试获取指定的标题和内容，如果未找到则使用原文本 Exceptions ArgumentOutOfRangeException 当传入的按钮选项超出定义范围时抛出该异常 ShowDialogAsync(string, string[], params ButtonOption[]) 显示一个模态对话框 public static Task<MessageBoxResult> ShowDialogAsync(string titleKey, string[] contentKeys, params MessageBoxHelper.ButtonOption[] buttons) Parameters titleKey string 标题的键值，用于从语言文化中获取对应的字符串 contentKeys string[] 内容的键值数组，用于从语言文化中获取对应的字符串数组 buttons ButtonOption[] 按钮选项，可以是多个按钮 Returns Task<MessageBoxResult> 异步操作任务结果，选择的 MessageBoxResult： 当点击 Yes 返回的结果是 Primary 当点击 No 返回的结果是 Secondary 其余总是返回 None Remarks 优先通过键值从语言文化中尝试获取指定的标题和多个内容，如果未找到则使用原文本 Exceptions ArgumentOutOfRangeException 当传入的按钮选项超出定义范围时抛出该异常"
  },
  "api/MAS.SharedLibrary.Helpers.NetworkHelper.InterfaceType.html": {
    "href": "api/MAS.SharedLibrary.Helpers.NetworkHelper.InterfaceType.html",
    "title": "Enum NetworkHelper.InterfaceType | DataMaster",
    "summary": "Enum NetworkHelper.InterfaceType Namespace MAS.SharedLibrary.Helpers Assembly MAS.SharedLibrary.dll 表示网络接口类型 public enum NetworkHelper.InterfaceType Fields Ethernet = 0 以太网 Other = 2 其它 Wireless = 1 无线网"
  },
  "api/MAS.SharedLibrary.Helpers.NetworkHelper.html": {
    "href": "api/MAS.SharedLibrary.Helpers.NetworkHelper.html",
    "title": "Class NetworkHelper | DataMaster",
    "summary": "Class NetworkHelper Namespace MAS.SharedLibrary.Helpers Assembly MAS.SharedLibrary.dll 承载网络相关的功能以及工具 public static class NetworkHelper Inheritance object NetworkHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanPingAsync(string, int) 检查是否可以连接到互联网，通过ping host public static Task<bool> CanPingAsync(string host, int outtime) Parameters host string 要ping的网址 outtime int 超时时间 单位：ms Returns Task<bool> 成功返回true，否则false CheckPingAsync(string, int) 异步检查指定主机的网络连接状态 public static Task<PingReply> CheckPingAsync(string host, int timeout) Parameters host string 要检查的主机地址 timeout int 超时时间 Returns Task<PingReply> 返回Ping的响应结果 CreateHttpClientWithProxy(string, int) 配置代理并返回配置了代理的 HttpClient public static HttpClient CreateHttpClientWithProxy(string proxyAddress, int proxyPort) Parameters proxyAddress string 代理服务器的地址 proxyPort int 代理服务器的端口 Returns HttpClient 配置了代理的 HttpClient 实例 GetActiveNetworkInterfaces() 获取所有活跃的网络接口 public static IEnumerable<NetworkInterface> GetActiveNetworkInterfaces() Returns IEnumerable<NetworkInterface> 活跃的网络接口列表 GetActiveTcpConnections() 获取所有活跃的 TCP 连接 public static IEnumerable<(string LocalEndPoint, string RemoteEndPoint, TcpState State)> GetActiveTcpConnections() Returns IEnumerable<(string LocalEndPoint, string RemoteEndPoint, TcpState State)> 一个包含本地端点和远程端点的元组列表 GetAllLocalIPAddresses() 获取所有活跃网络接口的本地IP地址 public static Dictionary<NetworkHelper.InterfaceType, List<string>> GetAllLocalIPAddresses() Returns Dictionary<NetworkHelper.InterfaceType, List<string>> 字典，键为接口类型，值为该类型的所有活跃IPv4地址列表 GetAllNetworkInterfacesNamesAndDescriptions() 获取所有网络接口的名称和描述 public static Dictionary<string, string> GetAllNetworkInterfacesNamesAndDescriptions() Returns Dictionary<string, string> 包含网络接口名称和描述的字典 GetCurrentWifiSSID() 获取当前连接的无线网络的 SSID public static string GetCurrentWifiSSID() Returns string 当前无线网络的 SSID，如果不是无线网络则返回空字符串 GetHostName() 获取当前设备的主机名 public static string GetHostName() Returns string 设备的主机名字符串 GetIPv4Addresses(NetworkInterface) 获取指定网络接口的IPv4地址列表 public static IEnumerable<string> GetIPv4Addresses(NetworkInterface networkInterface) Parameters networkInterface NetworkInterface 网络接口 Returns IEnumerable<string> IPv4地址列表 GetIPv6Addresses(NetworkInterface) 获取指定网络接口的IPv6地址列表 public static IEnumerable<string> GetIPv6Addresses(NetworkInterface networkInterface) Parameters networkInterface NetworkInterface 网络接口 Returns IEnumerable<string> IPv6地址列表 GetNetworkInterfaceSpeed(NetworkInterface) 获取指定网络接口的最大传输速率。 public static long GetNetworkInterfaceSpeed(NetworkInterface ni) Parameters ni NetworkInterface 网络接口 Returns long 网络接口的最大速率，以 Mbps 为单位 GetNetworkInterfaceStatistics(NetworkInterface) 获取指定网络接口的流量统计信息 public static (long BytesSent, long BytesReceived) GetNetworkInterfaceStatistics(NetworkInterface ni) Parameters ni NetworkInterface 要获取统计信息的网络接口 Returns (long BytesSent, long BytesReceived) 包含发送和接收的字节数的元组 GetPublicIPAddressAsync() 异步获取公共IP地址 public static Task<string> GetPublicIPAddressAsync() Returns Task<string> 公共IP地址，即设备在外部网络中的IPv4地址字符串 Remarks 使用 https://api.ipify.org 服务，此方法会返回当前设备在互联网上的公共IPv4地址 IsGoogleMapsAccessibleAsync() 检测谷歌地图是否可访问 public static Task<bool> IsGoogleMapsAccessibleAsync() Returns Task<bool> 谷歌地图是否可访问 ListenToNetworkChanges(Action) 监听网络状态变化事件 public static void ListenToNetworkChanges(Action onNetworkChanged) Parameters onNetworkChanged Action 当网络状态发生变化时调用的回调函数 MeasureDnsResolveTimeAsync(string) 异步测量解析指定域名所需的时间 public static Task<long> MeasureDnsResolveTimeAsync(string hostname) Parameters hostname string 要解析的域名 Returns Task<long> DNS 解析所需的时间，以毫秒为单位 MonitorNetworkInterfaceAsync(NetworkInterface, Action<long, long>) 监控指定网络接口的流量统计信息，并定时更新 public static Task MonitorNetworkInterfaceAsync(NetworkInterface ni, Action<long, long> onUpdate) Parameters ni NetworkInterface 要监控的网络接口 onUpdate Action<long, long> 每次更新时调用的回调函数，传递发送和接收的字节数 Returns Task OpenUrl(string) 使用默认浏览器打开指定URL public static void OpenUrl(string url) Parameters url string 要打开的URL PingHostAsync(string) 异步测试到指定主机名或地址的网络延迟 public static Task<long> PingHostAsync(string hostNameOrAddress) Parameters hostNameOrAddress string 要ping的主机名或IP地址 Returns Task<long> 来回通信的时间，以毫秒为单位 SendEmail(string) 发送邮件 public static void SendEmail(string recipient) Parameters recipient string 接收人的电子邮件地址 SendEmail(string, string, string?) 发送邮件 public static void SendEmail(string recipient, string body, string? subject) Parameters recipient string 接收人的电子邮件地址 body string 邮件内容 subject string 邮件主题"
  },
  "api/MAS.SharedLibrary.Helpers.PasswordBoxHelper.html": {
    "href": "api/MAS.SharedLibrary.Helpers.PasswordBoxHelper.html",
    "title": "Class PasswordBoxHelper | DataMaster",
    "summary": "Class PasswordBoxHelper Namespace MAS.SharedLibrary.Helpers Assembly MAS.SharedLibrary.dll 提供一个辅助工具，用于使PasswordBox的Password属性能够进行数据绑定。 public static class PasswordBoxHelper Inheritance object PasswordBoxHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AttachProperty 注册附加依赖属性\"Attach\"，表示是否需要启用密码绑定功能，当其值改变时触发Attach方法 public static readonly DependencyProperty AttachProperty Field Value DependencyProperty PasswordProperty 注册附加依赖属性\"Password\"，类型为string，当其值改变时触发OnPasswordPropertyChanged方法 public static readonly DependencyProperty PasswordProperty Field Value DependencyProperty Methods GetAttach(DependencyObject) 取附加属性\"Attach\"的值 public static bool GetAttach(DependencyObject dp) Parameters dp DependencyObject Returns bool GetPassword(DependencyObject) 获取附加属性\"Password\"的值 public static string GetPassword(DependencyObject dp) Parameters dp DependencyObject Returns string SetAttach(DependencyObject, bool) 设置附加属性\"Attach\"的值 public static void SetAttach(DependencyObject dp, bool hasValue) Parameters dp DependencyObject hasValue bool SetPassword(DependencyObject, string) 置附加属性\"Password\"的值 public static void SetPassword(DependencyObject dp, string value) Parameters dp DependencyObject value string"
  },
  "api/MAS.SharedLibrary.Helpers.html": {
    "href": "api/MAS.SharedLibrary.Helpers.html",
    "title": "Namespace MAS.SharedLibrary.Helpers | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Helpers Classes DebounceDispatcherHelper 防抖机制的帮助类，使用 DispatcherTimer 来限制执行的频率 InstanceKeyHelper 实例键帮助类 MessageBoxHelper Wpf.Ui MessageBox 工具类 NetworkHelper 承载网络相关的功能以及工具 PasswordBoxHelper 提供一个辅助工具，用于使PasswordBox的Password属性能够进行数据绑定。 Enums MessageBoxHelper.ButtonOption 按钮选择枚举 NetworkHelper.InterfaceType 表示网络接口类型"
  },
  "api/MAS.SharedLibrary.IPersistenceService.html": {
    "href": "api/MAS.SharedLibrary.IPersistenceService.html",
    "title": "Interface IPersistenceService | DataMaster",
    "summary": "Interface IPersistenceService Namespace MAS.SharedLibrary Assembly MAS.SharedLibrary.dll 数据持久化服务接口 public interface IPersistenceService : IDisposable Inherited Members IDisposable.Dispose() Methods CreationProject(string) 创建项目并重置工程数据模型 void CreationProject(string filePath) Parameters filePath string 新的文件路径 Exceptions ProjectCreationException GetCurrentFileStream() 获取当前工程文件流 FileStream? GetCurrentFileStream() Returns FileStream FileStream 对象或 null Exceptions ProjectNullException GetCurrentProject() 获取当前工程数据模型 ProjectModel GetCurrentProject() Returns ProjectModel ProjectModel 对象 Exceptions ProjectNullException LoadProjectAsync(string) 异步加载工程 Task LoadProjectAsync(string filePath) Parameters filePath string 要加载的文件 Returns Task 表示异步操作任务 Remarks 加载完成后 CurrentProject 可用 Exceptions ProjectLoadException ReloadCurrentProjectAsync() 异步重新加载当前项目 Task ReloadCurrentProjectAsync() Returns Task 表示异步操作任务 Remarks 在修改工程源文件后调用加载更新 Exceptions ProjectLoadException SaveProjectAsync() 异步保存工程 Task SaveProjectAsync() Returns Task 表示异步操作任务 Exceptions ProjectSaveException SaveProjectAsync(string) 异步保存工程 Task SaveProjectAsync(string content) Parameters content string Returns Task 表示异步操作任务 Remarks 编辑的内容 Exceptions ProjectSaveException Events ProjectCreated 当新项目创建完成时触发 event EventHandler<ProjectEventArgs> ProjectCreated Event Type EventHandler<ProjectEventArgs> ProjectLoaded 当项目加载完成时触发 event EventHandler<ProjectEventArgs> ProjectLoaded Event Type EventHandler<ProjectEventArgs> ProjectSaved 当项目保存完成时触发 event EventHandler<ProjectEventArgs> ProjectSaved Event Type EventHandler<ProjectEventArgs> ProjectSaving 当项目即将保存时触发 event EventHandler<ProjectEventArgs> ProjectSaving Event Type EventHandler<ProjectEventArgs>"
  },
  "api/MAS.SharedLibrary.InstantMessage.IInstantPublishMessageService.html": {
    "href": "api/MAS.SharedLibrary.InstantMessage.IInstantPublishMessageService.html",
    "title": "Interface IInstantPublishMessageService | DataMaster",
    "summary": "Interface IInstantPublishMessageService Namespace MAS.SharedLibrary.InstantMessage Assembly MAS.SharedLibrary.dll 即时信息发布服务接口 public interface IInstantPublishMessageService Methods Publish(MessageType, InfoLevel, params string[]) 发布即时信息事件 void Publish(MessageType messageType, InfoLevel level = InfoLevel.Info, params string[] messages) Parameters messageType MessageType 信息类型 level InfoLevel 信息等级 messages string[] 信息内容 Remarks 优先使用键从语言文化中获取文本，未找到时使用原文本 Publish(MessageType, string, InfoLevel) 发布一条即时信息事件 void Publish(MessageType messageType, string message, InfoLevel level = InfoLevel.Info) Parameters messageType MessageType 信息类型 message string 信息内容 level InfoLevel 信息等级 Remarks 优先通过键值从语言文化中尝试获取指定的文本，如果未找到则使用原文本 PublishInstantMessage(MessageType, string, InfoLevel) 发布一条即时信息事件，用于发送动态内容，不是本地化文本的内容 void PublishInstantMessage(MessageType messageType, string message, InfoLevel level = InfoLevel.Info) Parameters messageType MessageType 信息类型 message string 信息内容 level InfoLevel 信息等级 PublishInstantMessage(MessageType, string, string, InfoLevel) 发布一条即时信息事件，包括本地化的静态文本和动态内容 void PublishInstantMessage(MessageType messageType, string localizedKey, string dynamicContent, InfoLevel level = InfoLevel.Info) Parameters messageType MessageType 信息类型 localizedKey string 本地化文本的键 dynamicContent string 动态内容，错误信息等 level InfoLevel 信息等级 PublishLocalizedInstantMessage(MessageType, string, InfoLevel) 发布一条本地化的即时信息事件，用于发送需要从资源文件中获取本地化文本的消息 void PublishLocalizedInstantMessage(MessageType messageType, string messageKey, InfoLevel level = InfoLevel.Info) Parameters messageType MessageType 信息类型 messageKey string 信息内容对应的资源键名 level InfoLevel 信息等级"
  },
  "api/MAS.SharedLibrary.InstantMessage.InfoLevel.html": {
    "href": "api/MAS.SharedLibrary.InstantMessage.InfoLevel.html",
    "title": "Enum InfoLevel | DataMaster",
    "summary": "Enum InfoLevel Namespace MAS.SharedLibrary.InstantMessage Assembly MAS.SharedLibrary.dll 信息等级 public enum InfoLevel Fields Error = 3 错误 Info = 0 信息 Succeed = 1 成功 Warning = 2 警告"
  },
  "api/MAS.SharedLibrary.InstantMessage.InstantMessageEvent.html": {
    "href": "api/MAS.SharedLibrary.InstantMessage.InstantMessageEvent.html",
    "title": "Class InstantMessageEvent | DataMaster",
    "summary": "Class InstantMessageEvent Namespace MAS.SharedLibrary.InstantMessage Assembly MAS.SharedLibrary.dll 即时信息事件事件 public class InstantMessageEvent : EventArgs Inheritance object EventArgs InstantMessageEvent Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstantMessageEvent(MessageType, string, InfoLevel) 即时信息事件事件 public InstantMessageEvent(MessageType messageType, string message, InfoLevel level) Parameters messageType MessageType message string level InfoLevel Properties Level 信息等级 public InfoLevel Level { get; set; } Property Value InfoLevel Message 信息内容 public string Message { get; set; } Property Value string MessageType 信息分类 public MessageType MessageType { get; set; } Property Value MessageType"
  },
  "api/MAS.SharedLibrary.InstantMessage.InstantMessageHelper.html": {
    "href": "api/MAS.SharedLibrary.InstantMessage.InstantMessageHelper.html",
    "title": "Class InstantMessageHelper | DataMaster",
    "summary": "Class InstantMessageHelper Namespace MAS.SharedLibrary.InstantMessage Assembly MAS.SharedLibrary.dll 即时信息帮助类 public static class InstantMessageHelper Inheritance object InstantMessageHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(InfoLevel, params string[]) 创建一条即时信息 public static InstantMessageModel Create(InfoLevel level = InfoLevel.Info, params string[] messages) Parameters level InfoLevel 信息等级 messages string[] 信息内容 Returns InstantMessageModel InstantMessageModel 对象 Remarks 优先通过键值从语言文化中尝试获取指定的文本，如果未找到则使用原文本 Create(string, InfoLevel) 创建一条即时信息 public static InstantMessageModel Create(string localizedKey, InfoLevel level = InfoLevel.Info) Parameters localizedKey string 信息内容 level InfoLevel 信息等级 Returns InstantMessageModel InstantMessageModel 对象 Remarks 优先通过键值从语言文化中尝试获取指定的文本，如果未找到则使用原文本 Create(params string[]) 创建一条即时信息 public static InstantMessageModel Create(params string[] messages) Parameters messages string[] 一个或多个消息内容字符串 Returns InstantMessageModel 包含合并后的消息和默认信息等级（InfoLevel.Info）的 InstantMessageModel 对象 Remarks 优先通过键值从语言文化中尝试获取指定的文本，如果未找到则使用原文本"
  },
  "api/MAS.SharedLibrary.InstantMessage.InstantMessageModel.html": {
    "href": "api/MAS.SharedLibrary.InstantMessage.InstantMessageModel.html",
    "title": "Class InstantMessageModel | DataMaster",
    "summary": "Class InstantMessageModel Namespace MAS.SharedLibrary.InstantMessage Assembly MAS.SharedLibrary.dll 即时信息数据模型 public class InstantMessageModel Inheritance object InstantMessageModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Level 获取或设置信息等级，仅在初始化时可设置 public InfoLevel Level { get; init; } Property Value InfoLevel Message 获取或设置信息内容，仅在初始化时可设置 public string Message { get; init; } Property Value string Timestamp 获取或设置时间戳 public DateTime Timestamp { get; set; } Property Value DateTime"
  },
  "api/MAS.SharedLibrary.InstantMessage.MessageType.html": {
    "href": "api/MAS.SharedLibrary.InstantMessage.MessageType.html",
    "title": "Enum MessageType | DataMaster",
    "summary": "Enum MessageType Namespace MAS.SharedLibrary.InstantMessage Assembly MAS.SharedLibrary.dll 即时信息类型 public enum MessageType Fields Communication = 1 通讯 Database = 2 数据库 ImageProceFlow = 6 图像处理 MatchTemplate = 5 模板匹配 ObjectDetection = 4 对象检测 Statistics = 3 统计 System = 0 系统 VisionWorkbench = 7 视觉工作台"
  },
  "api/MAS.SharedLibrary.InstantMessage.html": {
    "href": "api/MAS.SharedLibrary.InstantMessage.html",
    "title": "Namespace MAS.SharedLibrary.InstantMessage | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.InstantMessage Classes InstantMessageEvent 即时信息事件事件 InstantMessageHelper 即时信息帮助类 InstantMessageModel 即时信息数据模型 Interfaces IInstantPublishMessageService 即时信息发布服务接口 Enums InfoLevel 信息等级 MessageType 即时信息类型"
  },
  "api/MAS.SharedLibrary.Interfaces.IInstanceCreateEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Interfaces.IInstanceCreateEventArgs.html",
    "title": "Interface IInstanceCreateEventArgs | DataMaster",
    "summary": "Interface IInstanceCreateEventArgs Namespace MAS.SharedLibrary.Interfaces Assembly MAS.SharedLibrary.dll 实例创建事件参数接口 public interface IInstanceCreateEventArgs Properties Config 获取配置对象 JObject Config { get; } Property Value JObject Key 获取标识键 string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Interfaces.IInstanceExpiredRemovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Interfaces.IInstanceExpiredRemovedEventArgs.html",
    "title": "Interface IInstanceExpiredRemovedEventArgs | DataMaster",
    "summary": "Interface IInstanceExpiredRemovedEventArgs Namespace MAS.SharedLibrary.Interfaces Assembly MAS.SharedLibrary.dll 实例过期移除事件参数接口 public interface IInstanceExpiredRemovedEventArgs Properties Key 获取标识键 string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Interfaces.IInstanceRemovedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Interfaces.IInstanceRemovedEventArgs.html",
    "title": "Interface IInstanceRemovedEventArgs | DataMaster",
    "summary": "Interface IInstanceRemovedEventArgs Namespace MAS.SharedLibrary.Interfaces Assembly MAS.SharedLibrary.dll 实例移除事件参数接口 public interface IInstanceRemovedEventArgs Properties Key 获取标识键 string Key { get; } Property Value string"
  },
  "api/MAS.SharedLibrary.Interfaces.html": {
    "href": "api/MAS.SharedLibrary.Interfaces.html",
    "title": "Namespace MAS.SharedLibrary.Interfaces | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Interfaces Interfaces IInstanceCreateEventArgs 实例创建事件参数接口 IInstanceExpiredRemovedEventArgs 实例过期移除事件参数接口 IInstanceRemovedEventArgs 实例移除事件参数接口"
  },
  "api/MAS.SharedLibrary.Models.ProjectModel.html": {
    "href": "api/MAS.SharedLibrary.Models.ProjectModel.html",
    "title": "Class ProjectModel | DataMaster",
    "summary": "Class ProjectModel Namespace MAS.SharedLibrary.Models Assembly MAS.SharedLibrary.dll 项目文件的数据模型，包含元信息和控件数据列表 public class ProjectModel : ICloneable Inheritance object ProjectModel Implements ICloneable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AdditionalProperties 获取或设置额外的元数据属性 public Dictionary<string, object> AdditionalProperties { get; set; } Property Value Dictionary<string, object> Remarks 用于存储动态扩展的键值对属性 Author 获取或设置项目创建者 public string Author { get; set; } Property Value string ControlModels 获取或设置控件数据列表 public List<object> ControlModels { get; set; } Property Value List<object> Remarks 用于存储同类型控制模型元素的集合 CreatedAt 获取或设置创建时间 public DateTime CreatedAt { get; set; } Property Value DateTime Id 获取或设置项目的唯一标识符 public required Guid Id { get; set; } Property Value Guid ModificationCount 获取或设置项目的修改次数 public int ModificationCount { get; set; } Property Value int Name 获取或设置项目名称或描述 public string? Name { get; set; } Property Value string OSVersion 获取或设置创建该项目的操作系统版本 public required string OSVersion { get; set; } Property Value string OperatingSystem 获取或设置创建该项目的操作系统 public required string OperatingSystem { get; set; } Property Value string ServiceData 获取或设置服务数据 public Dictionary<string, object> ServiceData { get; set; } Property Value Dictionary<string, object> Remarks 用于存储服务相关的结构化数据 Type 获取或设置项目类型 public required string Type { get; set; } Property Value string UpdatedAt 获取或设置更新时间 public DateTime UpdatedAt { get; set; } Property Value DateTime Version 获取或设置创建时的版本号 public required string Version { get; set; } Property Value string Methods Clone() Creates a new object that is a copy of the current instance. public object Clone() Returns object A new object that is a copy of this instance."
  },
  "api/MAS.SharedLibrary.Models.RunState.html": {
    "href": "api/MAS.SharedLibrary.Models.RunState.html",
    "title": "Enum RunState | DataMaster",
    "summary": "Enum RunState Namespace MAS.SharedLibrary.Models Assembly MAS.SharedLibrary.dll 表示状态的枚举 public enum RunState Fields Running = 2 正在运行 Starting = 1 启动中 Stopped = 0 未启动 Stopping = 3 停止中"
  },
  "api/MAS.SharedLibrary.Models.html": {
    "href": "api/MAS.SharedLibrary.Models.html",
    "title": "Namespace MAS.SharedLibrary.Models | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Models Classes ProjectModel 项目文件的数据模型，包含元信息和控件数据列表 Enums RunState 表示状态的枚举"
  },
  "api/MAS.SharedLibrary.PrismaTalk.ChatMessage.html": {
    "href": "api/MAS.SharedLibrary.PrismaTalk.ChatMessage.html",
    "title": "Class ChatMessage | DataMaster",
    "summary": "Class ChatMessage Namespace MAS.SharedLibrary.PrismaTalk Assembly MAS.SharedLibrary.dll 聊天消息数据模型 public class ChatMessage Inheritance object ChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatMessage(ChatRole, string) 聊天消息数据模型 public ChatMessage(ChatRole role, string content) Parameters role ChatRole content string Properties Content 获取或设置内容 public string Content { get; set; } Property Value string Role 获取或设置角色 public ChatRole Role { get; set; } Property Value ChatRole"
  },
  "api/MAS.SharedLibrary.PrismaTalk.ChatRole.html": {
    "href": "api/MAS.SharedLibrary.PrismaTalk.ChatRole.html",
    "title": "Enum ChatRole | DataMaster",
    "summary": "Enum ChatRole Namespace MAS.SharedLibrary.PrismaTalk Assembly MAS.SharedLibrary.dll 角色枚举 public enum ChatRole Fields Assistant = 2 助理 Developer = 3 开发者 System = 0 系统 User = 1 用户"
  },
  "api/MAS.SharedLibrary.PrismaTalk.FinishReason.html": {
    "href": "api/MAS.SharedLibrary.PrismaTalk.FinishReason.html",
    "title": "Enum FinishReason | DataMaster",
    "summary": "Enum FinishReason Namespace MAS.SharedLibrary.PrismaTalk Assembly MAS.SharedLibrary.dll 表示聊天或文本生成任务完成的原因 public enum FinishReason Fields ContentFilter = 2 由于内容过滤器触发而停止 通常表示模型检测到可能违反内容政策的内容 如果用户输入包含敏感词汇，模型可能会触发内容过滤器并停止生成 Length = 1 由于达到最大生成长度限制而停止 通常由 MaxTokens 参数控制 Stop = 0 模型自然停止生成文本 通常表示模型认为已经输出了完整的回答"
  },
  "api/MAS.SharedLibrary.PrismaTalk.IPrismaTalkClient.html": {
    "href": "api/MAS.SharedLibrary.PrismaTalk.IPrismaTalkClient.html",
    "title": "Interface IPrismaTalkClient | DataMaster",
    "summary": "Interface IPrismaTalkClient Namespace MAS.SharedLibrary.PrismaTalk Assembly MAS.SharedLibrary.dll 棱镜对话客户端接口 public interface IPrismaTalkClient : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Methods CheckServiceAvailabilityAsync(CancellationToken) 异步检查服务是否可用。该方法在发送消息前调用，用于确保后续对话能够正常进行 Task<bool> CheckServiceAvailabilityAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken 取消令牌 Returns Task<bool> 异步操作任务，返回服务是否可用 SendMessageAsync(IEnumerable<ChatMessage>, Action<string>, CancellationToken) 异步发送消息并通过回调接收流式响应 Task SendMessageAsync(IEnumerable<ChatMessage> messages, Action<string> onResponseChunk, CancellationToken cancellationToken = default) Parameters messages IEnumerable<ChatMessage> 信息数据模型列表，包含历史上下文 onResponseChunk Action<string> 接收响应的回调，每次接收到一部分数据时调用 cancellationToken CancellationToken 取消令牌 Returns Task 异步操作任务，文本完成的流式响应数据 SendMessageAsync(IEnumerable<ChatMessage>, CancellationToken) 异步发送消息并通过异步枚举逐步接收流式响应 IAsyncEnumerable<StreamingChunk> SendMessageAsync(IEnumerable<ChatMessage> messages, CancellationToken cancellationToken = default) Parameters messages IEnumerable<ChatMessage> 信息数据模型列表，包含历史上下文 cancellationToken CancellationToken 取消令牌 Returns IAsyncEnumerable<StreamingChunk> 异步枚举，逐步返回响应的每一部分数据"
  },
  "api/MAS.SharedLibrary.PrismaTalk.IPrismaTalkConfig.html": {
    "href": "api/MAS.SharedLibrary.PrismaTalk.IPrismaTalkConfig.html",
    "title": "Interface IPrismaTalkConfig | DataMaster",
    "summary": "Interface IPrismaTalkConfig Namespace MAS.SharedLibrary.PrismaTalk Assembly MAS.SharedLibrary.dll 用于设置 PrismaTalk 客户端的配置接口 public interface IPrismaTalkConfig Properties DefaultModel 获取或设置默认 AI 模型 string DefaultModel { get; set; } Property Value string EnableProxy 获取或设置是否启用 HTTP/HTTPS 代理（默认 false） bool EnableProxy { get; set; } Property Value bool MaxTokens 获取或设置生成文本的最大令牌数 int MaxTokens { get; set; } Property Value int ProxyUrl 获取或设置代理服务器地址 string? ProxyUrl { get; set; } Property Value string Remarks 示例：\"http://proxy.example.com:8080\" ProxyUsername 获取或设置代理用户名（可选） string? ProxyUsername { get; set; } Property Value string ServiceUrl 获取或设置服务的基础 URL string ServiceUrl { get; set; } Property Value string Temperature 获取或设置生成文本的温度，控制随机性 double Temperature { get; set; } Property Value double Timeout 获取或设置请求超时时间 TimeSpan Timeout { get; set; } Property Value TimeSpan Methods GetApiKey() 获取 API 密钥或认证令牌 string GetApiKey() Returns string API 密钥或认证令牌 GetProxyPassword() 获取代理密码（可选） string GetProxyPassword() Returns string 代理密码"
  },
  "api/MAS.SharedLibrary.PrismaTalk.StreamingChunk.html": {
    "href": "api/MAS.SharedLibrary.PrismaTalk.StreamingChunk.html",
    "title": "Class StreamingChunk | DataMaster",
    "summary": "Class StreamingChunk Namespace MAS.SharedLibrary.PrismaTalk Assembly MAS.SharedLibrary.dll 流式响应中的一个数据模型 public class StreamingChunk Inheritance object StreamingChunk Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChunkIndex 获取或设置当前数据块的索引 public int ChunkIndex { get; set; } Property Value int FinishReason 获取或设置完成原因 public FinishReason? FinishReason { get; set; } Property Value FinishReason? Remarks 仅在 IsFinalChunk 为 true 时设置 IsFinalChunk 获取或设置一个值，指示当前数据块是否为流式响应的最后一个数据块 public bool IsFinalChunk { get; set; } Property Value bool 如果当前数据块是最后一个数据块，则为 true；否则为 false Remarks 此属性可用于确定流式响应是否已结束 IsThinking 获取或设置一个值，指示当前数据块是否包含“思考”部分 public bool IsThinking { get; set; } Property Value bool 如果当前数据块是“思考”部分，则为 true；否则为 false PartialContent 获取或设置当前数据块的部分内容 public string PartialContent { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.PrismaTalk.html": {
    "href": "api/MAS.SharedLibrary.PrismaTalk.html",
    "title": "Namespace MAS.SharedLibrary.PrismaTalk | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.PrismaTalk Classes ChatMessage 聊天消息数据模型 StreamingChunk 流式响应中的一个数据模型 Interfaces IPrismaTalkConfig 用于设置 PrismaTalk 客户端的配置接口 Enums ChatRole 角色枚举 FinishReason 表示聊天或文本生成任务完成的原因"
  },
  "api/MAS.SharedLibrary.ProjectEventArgs.html": {
    "href": "api/MAS.SharedLibrary.ProjectEventArgs.html",
    "title": "Class ProjectEventArgs | DataMaster",
    "summary": "Class ProjectEventArgs Namespace MAS.SharedLibrary Assembly MAS.SharedLibrary.dll 项目相关事件的参数类 public class ProjectEventArgs : EventArgs Inheritance object EventArgs ProjectEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectEventArgs(ProjectModel) 项目相关事件的参数类 public ProjectEventArgs(ProjectModel project) Parameters project ProjectModel Properties Project 获取项目模型 public ProjectModel Project { get; } Property Value ProjectModel"
  },
  "api/MAS.SharedLibrary.PropertyChangedExtendedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.PropertyChangedExtendedEventArgs.html",
    "title": "Class PropertyChangedExtendedEventArgs | DataMaster",
    "summary": "Class PropertyChangedExtendedEventArgs Namespace MAS.SharedLibrary Assembly MAS.SharedLibrary.dll 用于携带属性更改事件数据的类 public class PropertyChangedExtendedEventArgs : PropertyChangedEventArgs Inheritance object EventArgs PropertyChangedEventArgs PropertyChangedExtendedEventArgs Inherited Members PropertyChangedEventArgs.PropertyName EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyChangedExtendedEventArgs(string, object?, object?, string) 用于携带属性更改事件数据的类 public PropertyChangedExtendedEventArgs(string propertyName, object? oldValue, object? newValue, string modifiedBy) Parameters propertyName string oldValue object newValue object modifiedBy string Properties ModifiedBy 获取修改者的标识符 public string ModifiedBy { get; } Property Value string NewValue 获取更改后的值 public object? NewValue { get; } Property Value object OldValue 获取更改前的值 public object? OldValue { get; } Property Value object"
  },
  "api/MAS.SharedLibrary.Security.IAuthenticationService.html": {
    "href": "api/MAS.SharedLibrary.Security.IAuthenticationService.html",
    "title": "Interface IAuthenticationService | DataMaster",
    "summary": "Interface IAuthenticationService Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 认证服务接口 public interface IAuthenticationService Properties CurrentUser 获取当前用户信息 UserInfo CurrentUser { get; } Property Value UserInfo Methods ChangePasswordAsync(string, string, string) 异步更改用户密码 Task<Response> ChangePasswordAsync(string username, string oldPassword, string newPassword) Parameters username string 用户名 oldPassword string 旧密码 newPassword string 新密码 Returns Task<Response> 异步操作任务结果，响应数据Response LoginAsync(string, string, bool) 异步执行登录 Task<Response> LoginAsync(string username, string password, bool isRememberMe = false) Parameters username string 用户名 password string 密码 isRememberMe bool 是否记住密码 Returns Task<Response> 异步操作任务结果，响应数据Response LogoutAsync(string) 异步执行登出 Task<Response> LogoutAsync(string username) Parameters username string 用户名 Returns Task<Response> 异步操作任务结果，响应数据Response RegisterAsync(string, string, string?) 异步执行用户注册 Task<Response> RegisterAsync(string username, string password, string? email = null) Parameters username string 用户名 password string 密码 email string 邮箱 Returns Task<Response> 异步操作任务结果，响应数据Response Events UserLoggedIn 用户登录事件 event EventHandler<UserEventArgs> UserLoggedIn Event Type EventHandler<UserEventArgs> UserLoggedOut 用户登出事件 event EventHandler<UserEventArgs> UserLoggedOut Event Type EventHandler<UserEventArgs>"
  },
  "api/MAS.SharedLibrary.Security.IEncryptionService.html": {
    "href": "api/MAS.SharedLibrary.Security.IEncryptionService.html",
    "title": "Interface IEncryptionService | DataMaster",
    "summary": "Interface IEncryptionService Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 提供加密服务的接口 public interface IEncryptionService Methods Decrypt(byte[]) 解密加密后的字节数组并返回明文字符串 string Decrypt(byte[] cipherText) Parameters cipherText byte[] 要解密的字节数组 Returns string 解密后的明文 Encrypt(string) 加密明文字符串并返回加密后的字节数组 byte[] Encrypt(string plainText) Parameters plainText string 要加密的明文 Returns byte[] 加密后的字节数组 LoadEncryptedContentAsync(FileStream) 异步从加密文件流中读取并解密内容，返回原始字符串 Task<string> LoadEncryptedContentAsync(FileStream fileStream) Parameters fileStream FileStream 文件流 Returns Task<string> 解密后的原始字符串 Exceptions InvalidOperationException LoadEncryptedContentAsync(string) 异步从加密文件中读取并解密内容，返回原始字符串 Task<string> LoadEncryptedContentAsync(string filePath) Parameters filePath string 文件路径 Returns Task<string> 解密后的原始字符串 LoadEncryptedJsonAsync<T>(FileStream) 异步从加密文件流中读取并解密JSON，然后反序列化为对象 Task<T> LoadEncryptedJsonAsync<T>(FileStream fileStream) where T : class Parameters fileStream FileStream 包含加密数据的文件流 Returns Task<T> 包含反序列化对象的Task Type Parameters T 目标对象类型，必须是引用类型 Exceptions InvalidOperationException LoadEncryptedJsonAsync<T>(string) 异步从加密文件中读取并解密JSON，然后反序列化为对象 Task<T> LoadEncryptedJsonAsync<T>(string filePath) where T : class Parameters filePath string 文件路径 Returns Task<T> 反序列化的对象 Type Parameters T 对象的类型 Exceptions InvalidOperationException SaveEncryptedJsonAsync(object, FileStream) 异步序列化对象为JSON，并加密后保存到文件流 Task SaveEncryptedJsonAsync(object objectToSave, FileStream fileStream) Parameters objectToSave object 要序列化和加密的对象 fileStream FileStream 目标文件流，方法执行后不会自动关闭该流 Returns Task 表示异步操作的任务 SaveEncryptedJsonAsync(object, string) 异步序列化对象为JSON，并加密后保存到文件 Task SaveEncryptedJsonAsync(object objectToSave, string filePath) Parameters objectToSave object 要保存的对象 filePath string 文件保存路径 Returns Task SignData(string) 使用私钥对数据进行签名 string SignData(string data) Parameters data string 要签名的数据 Returns string 签名字符串（Base64编码） ValidateCipherText(byte[]) 验证加密数据的完整性 bool ValidateCipherText(byte[] cipherText) Parameters cipherText byte[] 要验证的加密数据 Returns bool 如果数据完整且未被篡改，则返回 true；否则返回 false VerifySignature(string, string) 使用公钥验证数据的签名 bool VerifySignature(string data, string signature) Parameters data string 原始数据 signature string 签名字符串（Base64编码） Returns bool 如果签名有效，则返回 true；否则返回 false"
  },
  "api/MAS.SharedLibrary.Security.IHardwareInfoProvider.html": {
    "href": "api/MAS.SharedLibrary.Security.IHardwareInfoProvider.html",
    "title": "Interface IHardwareInfoProvider | DataMaster",
    "summary": "Interface IHardwareInfoProvider Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 硬件信息提供者接口 public interface IHardwareInfoProvider Methods GenerateMachineCode() 生成机器码（基于硬件信息的哈希值） string GenerateMachineCode() Returns string 机器码字符串 GetHardwareInfo() 获取系统硬件信息 string GetHardwareInfo() Returns string 包含处理器、主板、磁盘驱动器、MAC地址、显卡等信息的字符串"
  },
  "api/MAS.SharedLibrary.Security.ILicensingService.html": {
    "href": "api/MAS.SharedLibrary.Security.ILicensingService.html",
    "title": "Interface ILicensingService | DataMaster",
    "summary": "Interface ILicensingService Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 许可服务接口 public interface ILicensingService Methods SavingLicenseKeyAsync(string) 异步保存许可密钥 Task<bool> SavingLicenseKeyAsync(string licenseKey) Parameters licenseKey string 要保存的许可证密钥 Returns Task<bool> 异步操作任务结果，是否保存成功 ValidateLicenseKey() 验证许可证密钥 ValidationResult ValidateLicenseKey() Returns ValidationResult 验证结果 ValidateLicenseKey(string?) 验证许可证密钥 ValidationResult ValidateLicenseKey(string? licenseKey) Parameters licenseKey string 要验证的许可证密钥 Returns ValidationResult 验证结果"
  },
  "api/MAS.SharedLibrary.Security.IOperationLogService.html": {
    "href": "api/MAS.SharedLibrary.Security.IOperationLogService.html",
    "title": "Interface IOperationLogService | DataMaster",
    "summary": "Interface IOperationLogService Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 操作日志服务接口 public interface IOperationLogService : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Remarks 保存和查看用户操作记录接口 Methods EnqueueLog(OperationLog) 将操作日志添加到队列 void EnqueueLog(OperationLog log) Parameters log OperationLog 要添加到队列的日志数据 GetLogsAsync(int) 异步获取指定操作者的操作日志列表 Task<IEnumerable<OperationLog>> GetLogsAsync(int userId) Parameters userId int 操作者的用户ID Returns Task<IEnumerable<OperationLog>> 异步操作任务结果，操作日志数据列表> GetLogsAsync(string) 异步获取指定操作者的操作日志列表 Task<IEnumerable<OperationLog>> GetLogsAsync(string userName) Parameters userName string 操作者的用户名 Returns Task<IEnumerable<OperationLog>> 异步操作任务结果，操作日志数据列表> SaveAsync(OperationLog) 异步保存操作日志 Task<bool> SaveAsync(OperationLog log) Parameters log OperationLog 要保存的日志数据 Returns Task<bool> 异步操作任务结果，成功返回true，否则false SaveAsync(IEnumerable<OperationLog>) 异步保存操作日志列表 Task<bool> SaveAsync(IEnumerable<OperationLog> logs) Parameters logs IEnumerable<OperationLog> 要保存的日志数据列表 Returns Task<bool> 异步操作任务结果，成功返回true，否则false"
  },
  "api/MAS.SharedLibrary.Security.IRbacService.html": {
    "href": "api/MAS.SharedLibrary.Security.IRbacService.html",
    "title": "Interface IRbacService | DataMaster",
    "summary": "Interface IRbacService Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 基于角色的访问控制服务接口 public interface IRbacService Methods AssignRoleAsync(string, UserRoles) 异步分配角色给指定用户 Task<Response> AssignRoleAsync(string username, UserRoles userRoles) Parameters username string 用户名 userRoles UserRoles 角色枚举 Returns Task<Response> 异步操作任务结果，响应数据Response AssignRolesAsync(string, UserRoles) 异步分配角色给指定用户 Task<Response> AssignRolesAsync(string username, UserRoles roles) Parameters username string 用户名 roles UserRoles 角色名称 Returns Task<Response> 异步操作任务结果，响应数据Response DeleteUserAsync(string) 异步删除用户 Task<Response> DeleteUserAsync(string username) Parameters username string 用户名 Returns Task<Response> 异步操作任务结果，响应数据Response GetAllUsersAsync() 异步获取所有用户的信息 Task<IEnumerable<UserInfo>> GetAllUsersAsync() Returns Task<IEnumerable<UserInfo>> 用户信息列表 IEnumerable<T> GetHistoricalUserCredentialsAsync() 获取历史登录用户名及密码列表（根据是否记住密码） Task<IEnumerable<UserCredential>> GetHistoricalUserCredentialsAsync() Returns Task<IEnumerable<UserCredential>> 异步操作任务，用户名及密码列表 IEnumerable<T> GetRolePermissionsAsync(UserRoles) 获取指定角色的权限列表 Task<IEnumerable<UserPermission>> GetRolePermissionsAsync(UserRoles userRoles) Parameters userRoles UserRoles 角色 Returns Task<IEnumerable<UserPermission>> 异步操作任务结果，权限枚举列表 GetUserPermissionsAsync(string) 异步获取用户的权限 Task<IEnumerable<UserPermission>> GetUserPermissionsAsync(string userName) Parameters userName string 用户名称 Returns Task<IEnumerable<UserPermission>> 用户的权限列表 GetUserRolesAsync(string) 异步获取用户的角色 Task<IEnumerable<UserRoles>> GetUserRolesAsync(string userName) Parameters userName string 用户名称 Returns Task<IEnumerable<UserRoles>> 用户的角色列表 UpdateUserAsync(UserInfo) 异步更新用户信息 Task<Response> UpdateUserAsync(UserInfo user) Parameters user UserInfo 用户信息 Returns Task<Response> 异步操作任务结果，响应数据Response"
  },
  "api/MAS.SharedLibrary.Security.OperationLog.html": {
    "href": "api/MAS.SharedLibrary.Security.OperationLog.html",
    "title": "Class OperationLog | DataMaster",
    "summary": "Class OperationLog Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 操作日志数据模型 public class OperationLog Inheritance object OperationLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action 获取或设置操作名称 public string Action { get; set; } Property Value string CreatedAt 获取或设置创建时间 public DateTime CreatedAt { get; set; } Property Value DateTime Description 获取或设置操作描述或详细信息 public string? Description { get; set; } Property Value string IPAddress 获取或设置操作地址 public string? IPAddress { get; set; } Property Value string ResourceID 获取或设置操作资源的Id public string? ResourceID { get; set; } Property Value string UserAgent 获取或设置操作时的代理信息 public string? UserAgent { get; set; } Property Value string UserID 获取或设置操作者的用户ID public int UserID { get; set; } Property Value int"
  },
  "api/MAS.SharedLibrary.Security.Response.html": {
    "href": "api/MAS.SharedLibrary.Security.Response.html",
    "title": "Class Response | DataMaster",
    "summary": "Class Response Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 响应数据模型 public class Response Inheritance object Response Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message 获取或设置返回的信息 public string Message { get; set; } Property Value string Success 获取或设置操作是否成功 public bool Success { get; set; } Property Value bool Timestamp 获取或设置时间戳 public DateTime Timestamp { get; set; } Property Value DateTime"
  },
  "api/MAS.SharedLibrary.Security.UserCredential.html": {
    "href": "api/MAS.SharedLibrary.Security.UserCredential.html",
    "title": "Class UserCredential | DataMaster",
    "summary": "Class UserCredential Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 用户凭据信息 public class UserCredential Inheritance object UserCredential Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password 获取或设置密码 public string? Password { get; set; } Property Value string Username 获取或设置用户名 public string Username { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Security.UserEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Security.UserEventArgs.html",
    "title": "Class UserEventArgs | DataMaster",
    "summary": "Class UserEventArgs Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 提供用户相关事件的数据 public class UserEventArgs : EventArgs Inheritance object EventArgs UserEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserEventArgs(UserInfo) 提供用户相关事件的数据 public UserEventArgs(UserInfo user) Parameters user UserInfo 用户信息对象 Properties User 获取触发事件的用户信息 public UserInfo User { get; } Property Value UserInfo"
  },
  "api/MAS.SharedLibrary.Security.UserInfo.html": {
    "href": "api/MAS.SharedLibrary.Security.UserInfo.html",
    "title": "Class UserInfo | DataMaster",
    "summary": "Class UserInfo Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 用户信息 public class UserInfo Inheritance object UserInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserInfo() 用户信息 public UserInfo() Properties Email 获取或设置邮箱 public string? Email { get; set; } Property Value string IsRememberMe 获取或设置是否记住密码 public bool IsRememberMe { get; set; } Property Value bool LastLoginTime 获取或设置最后登录时间 public DateTime LastLoginTime { get; set; } Property Value DateTime LoginCount 获取或设置登录次数 public int LoginCount { get; set; } Property Value int Message 获取或设置信息 public string Message { get; set; } Property Value string Password 获取或设置密码 public string Password { get; set; } Property Value string RegistrationDate 获取或设置注册时间 public DateTime RegistrationDate { get; set; } Property Value DateTime Roles 获取或设置用户角色 public UserRoles Roles { get; set; } Property Value UserRoles Success 获取或设置是否登录状态 public bool Success { get; set; } Property Value bool Username 获取或设置用户名 public string Username { get; set; } Property Value string"
  },
  "api/MAS.SharedLibrary.Security.UserPermission.html": {
    "href": "api/MAS.SharedLibrary.Security.UserPermission.html",
    "title": "Enum UserPermission | DataMaster",
    "summary": "Enum UserPermission Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 用户权限枚举 [JsonConverter(typeof(StringEnumConverter))] public enum UserPermission Fields APIAccess = 39 访问API APIDebugAccess = 40 调用内部调试接口 AuditView = 31 查看审计信息 BusinessDataCreate = 16 创建业务数据 BusinessDataDelete = 18 删除业务数据 BusinessDataEdit = 17 编辑业务数据 BusinessDataView = 15 查看业务数据 BusinessProcessAssign = 22 派单业务流程 BusinessProcessAudit = 19 审核业务流程 BusinessProcessDispatch = 23 调度业务流程 BusinessProcessRevoke = 21 撤回业务流程 BusinessProcessSubmit = 20 提交业务流程 CodeDebug = 41 代码级调试权限 FileDelete = 37 删除文件 FileDownload = 36 下载文件 FileShare = 38 共享文件 FileUpload = 35 上传文件 LogArchive = 30 归档日志 LogClear = 28 清理日志 LogExport = 29 导出日志 LogView = 27 查看日志 NotificationDelete = 34 删除通知 NotificationPublish = 33 发布通知 NotificationView = 32 查看通知 PermissionCreate = 9 创建权限 PermissionDelete = 11 删除权限 PermissionEdit = 10 编辑权限 ProductionControlEdit = 43 修改生产控制 ProductionControlView = 42 查看生产控制 ReportsAnalyze = 26 统计分析 ReportsExport = 25 导出报表 ReportsView = 24 查看报表 RoleAssignPermission = 8 分配权限给角色 RoleCreate = 5 创建角色 RoleDelete = 7 删除角色 RoleEdit = 6 编辑角色 SystemConfigure = 12 修改系统配置 SystemExportConfiguration = 14 导出系统配置 SystemImportConfiguration = 13 导入系统配置 UserAssignRole = 4 分配角色给用户 UserCreate = 0 创建用户 UserDelete = 2 删除用户 UserEdit = 1 编辑用户 UserResetPassword = 3 重置用户密码"
  },
  "api/MAS.SharedLibrary.Security.UserRoles.html": {
    "href": "api/MAS.SharedLibrary.Security.UserRoles.html",
    "title": "Enum UserRoles | DataMaster",
    "summary": "Enum UserRoles Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 用户角色枚举 public enum UserRoles Fields Admin = 8 管理员 01000 Engineer = 4 工程师 00100 MAS = 16 最高权限 10000 Operator = 2 操作员 00010 Visitor = 1 游客 00001"
  },
  "api/MAS.SharedLibrary.Security.ValidationResult.html": {
    "href": "api/MAS.SharedLibrary.Security.ValidationResult.html",
    "title": "Class ValidationResult | DataMaster",
    "summary": "Class ValidationResult Namespace MAS.SharedLibrary.Security Assembly MAS.SharedLibrary.dll 许可证验证结果 public class ValidationResult Inheritance object ValidationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorMessage 获取或设置如果验证失败，返回错误信息 public string? ErrorMessage { get; set; } Property Value string IsValid 获取或设置验证是否通过 public bool IsValid { get; set; } Property Value bool"
  },
  "api/MAS.SharedLibrary.Security.html": {
    "href": "api/MAS.SharedLibrary.Security.html",
    "title": "Namespace MAS.SharedLibrary.Security | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Security Classes OperationLog 操作日志数据模型 Response 响应数据模型 UserCredential 用户凭据信息 UserEventArgs 提供用户相关事件的数据 UserInfo 用户信息 ValidationResult 许可证验证结果 Interfaces IAuthenticationService 认证服务接口 IEncryptionService 提供加密服务的接口 IHardwareInfoProvider 硬件信息提供者接口 ILicensingService 许可服务接口 IOperationLogService 操作日志服务接口 IRbacService 基于角色的访问控制服务接口 Enums UserPermission 用户权限枚举 UserRoles 用户角色枚举"
  },
  "api/MAS.SharedLibrary.Vision.FrameRateUpdatedEventArgs.html": {
    "href": "api/MAS.SharedLibrary.Vision.FrameRateUpdatedEventArgs.html",
    "title": "Class FrameRateUpdatedEventArgs | DataMaster",
    "summary": "Class FrameRateUpdatedEventArgs Namespace MAS.SharedLibrary.Vision Assembly MAS.SharedLibrary.dll 帧率更新事件 public class FrameRateUpdatedEventArgs : EventArgs Inheritance object EventArgs FrameRateUpdatedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FrameRateUpdatedEventArgs(double) 帧率更新事件 public FrameRateUpdatedEventArgs(double fps) Parameters fps double Properties Fps 获取帧率 public double Fps { get; } Property Value double"
  },
  "api/MAS.SharedLibrary.Vision.ICamera.html": {
    "href": "api/MAS.SharedLibrary.Vision.ICamera.html",
    "title": "Interface ICamera | DataMaster",
    "summary": "Interface ICamera Namespace MAS.SharedLibrary.Vision Assembly MAS.SharedLibrary.dll 相机接口 public interface ICamera : IDisposable Inherited Members IDisposable.Dispose() Properties Fps 获取当前相机的帧率 double Fps { get; } Property Value double IsOpen 获取相机是否已打开 bool IsOpen { get; } Property Value bool Methods GetBrightness() 获取相机的亮度值 double GetBrightness() Returns double 当前亮度值，若不可用则返回 double.NaN GetContrast() 获取相机的对比度值 double GetContrast() Returns double 当前对比度值，若不可用则返回 double.NaN GetDeviceList() 获取所有可用的相机设备列表 List<(string Name, short Index)> GetDeviceList() Returns List<(string Name, short Index)> 一个包含设备名称和索引的元组列表 GetFrame() 获取视频帧作为图像显示 WriteableBitmap? GetFrame() Returns WriteableBitmap 如果无法获取帧，则为null GetSaturation() 获取相机的饱和度值 double GetSaturation() Returns double 当前饱和度值，若不可用则返回 double.NaN GetSharpness() 获取相机的锐度值 double GetSharpness() Returns double 当前锐度值，若不可用则返回 double.NaN OpenAsync(short) 异步打开摄像头 Task<bool> OpenAsync(short index = 0) Parameters index short 摄像头索引 Returns Task<bool> 异步操作任务结果，成功返回true，失败false SetBrightness(double) 设置相机的亮度 bool SetBrightness(double value) Parameters value double 亮度值 Returns bool 成功返回 true，否则返回 false Remarks 亮度范围和支持情况取决于相机硬件，通常为 0 到 100 的归一化值 SetContrast(double) 设置相机的对比度 bool SetContrast(double value) Parameters value double 对比度值 Returns bool 成功返回 true，否则返回 false Remarks 对比度范围和支持情况取决于相机硬件，通常为 0 到 100 的归一化值 SetExposure(double) 设置相机的曝光时间 bool SetExposure(double value) Parameters value double 曝光值 Returns bool 成功返回 true，否则返回 false Remarks 曝光范围和支持情况取决于相机硬件，可能为归一化值或实际时间单位（需查阅相机文档） SetFps(double) 设置 Fps 帧率 bool SetFps(double fps) Parameters fps double 要设置的帧率 Returns bool 成功返回 true，否则 false Remarks 并非所有相机支持帧率调整 SetGain(double) 设置相机的增益 bool SetGain(double value) Parameters value double 增益值 Returns bool 成功返回 true，否则返回 false Remarks 增益范围和支持情况取决于相机硬件，通常为 0 到 100 的归一化值或 dB 值 SetRotation(int) 设置相机的旋转角度 bool SetRotation(int value) Parameters value int 旋转角度（单位：度） Returns bool 成功返回 true，否则返回 false Remarks 旋转角度通常为 0（无旋转）、90（右旋）、-90（左旋）或 180（翻转） SetSaturation(double) 设置相机的饱和度 bool SetSaturation(double value) Parameters value double 饱和度值 Returns bool 成功返回 true，否则返回 false Remarks 饱和度范围和支持情况取决于相机硬件，通常为 0 到 100 的归一化值 SetSharpness(double) 设置相机的锐度 bool SetSharpness(double value) Parameters value double 锐度值 Returns bool 成功返回 true，否则返回 false Remarks 锐度范围和支持情况取决于相机硬件，通常为 0 到 100 的归一化值 StartStream() 启动视频流捕获 void StartStream() Exceptions InvalidOperationException StopStream() 停止视频流捕获 void StopStream() Events CaptureStopped 捕获停止事件，当视频流停止时触发 event EventHandler CaptureStopped Event Type EventHandler FrameCaptured 帧捕获事件，当有新视频帧可用时触发 event EventHandler FrameCaptured Event Type EventHandler FrameRateUpdated 帧率更新事件，每秒捕获的帧数 event EventHandler<FrameRateUpdatedEventArgs> FrameRateUpdated Event Type EventHandler<FrameRateUpdatedEventArgs>"
  },
  "api/MAS.SharedLibrary.Vision.IImageSaverService.html": {
    "href": "api/MAS.SharedLibrary.Vision.IImageSaverService.html",
    "title": "Interface IImageSaverService | DataMaster",
    "summary": "Interface IImageSaverService Namespace MAS.SharedLibrary.Vision Assembly MAS.SharedLibrary.dll 图像保存服务接口 public interface IImageSaverService Methods SaveImage(ImageSource, string, ImageSaveFormat, string?) 保存图像 void SaveImage(ImageSource image, string path, ImageSaveFormat format, string? prefix = null) Parameters image ImageSource 图像对象 path string 保存路径 format ImageSaveFormat 保存格式 prefix string 文件名前缀，可选 SaveImageAsync(ImageSource, string, ImageSaveFormat, string?) 异步保存图像 Task SaveImageAsync(ImageSource image, string path, ImageSaveFormat format, string? prefix = null) Parameters image ImageSource 图像对象 path string 保存路径 format ImageSaveFormat 保存格式 prefix string 文件名前缀，可选 Returns Task"
  },
  "api/MAS.SharedLibrary.Vision.ImageSaveFormat.html": {
    "href": "api/MAS.SharedLibrary.Vision.ImageSaveFormat.html",
    "title": "Enum ImageSaveFormat | DataMaster",
    "summary": "Enum ImageSaveFormat Namespace MAS.SharedLibrary.Vision Assembly MAS.SharedLibrary.dll 图像的保存格式 public enum ImageSaveFormat Fields Bmp = 2 以 BMP（位图）格式保存图像，不使用压缩，文件较大，但可保证图像质量，适用于需要无损存储的场景 Jpeg = 1 以 JPEG（联合图像专家组）格式保存图像，支持有损压缩，可减少文件大小，但可能会影响图像质量，适用于照片或连续色调图像 Png = 0 以 PNG（便携式网络图形）格式保存图像，支持无损压缩，适用于高质量图像存储"
  },
  "api/MAS.SharedLibrary.Vision.TreeViewCategory.html": {
    "href": "api/MAS.SharedLibrary.Vision.TreeViewCategory.html",
    "title": "Class TreeViewCategory | DataMaster",
    "summary": "Class TreeViewCategory Namespace MAS.SharedLibrary.Vision Assembly MAS.SharedLibrary.dll 代表树视图中的一个分类，用于组织多个控件项 public class TreeViewCategory : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase TreeViewCategory Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ControlItems 获取或设置该分类下的子项列表 public ObservableCollection<TreeViewControlItem> ControlItems { get; set; } Property Value ObservableCollection<TreeViewControlItem> HeaderKey 获取或设置分类的显示文本键，用于 LanguageManager 获取本地化文本 public required string HeaderKey { get; set; } Property Value string IsExpanded public bool IsExpanded { get; set; } Property Value bool IsVisible public bool IsVisible { get; set; } Property Value bool Symbol 获取或设置图标名称 public required SymbolRegular Symbol { get; set; } Property Value SymbolRegular Methods NotifyHeaderKeyChanged() 通知 HeaderKey 属性已更改 public void NotifyHeaderKeyChanged()"
  },
  "api/MAS.SharedLibrary.Vision.TreeViewControlItem.html": {
    "href": "api/MAS.SharedLibrary.Vision.TreeViewControlItem.html",
    "title": "Class TreeViewControlItem | DataMaster",
    "summary": "Class TreeViewControlItem Namespace MAS.SharedLibrary.Vision Assembly MAS.SharedLibrary.dll 代表一个树视图控件的子项，每个子项对应一个具体的控件 public class TreeViewControlItem : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase TreeViewControlItem Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderKey 获取或设置控件的显示文本键，用于 LanguageManager 获取本地化文本 public required string HeaderKey { get; set; } Property Value string IsVisible public bool IsVisible { get; set; } Property Value bool Symbol 获取或设置图标名称 public SymbolRegular Symbol { get; set; } Property Value SymbolRegular Tag 获取或设置用于标识控件类型的 Tag public required Type Tag { get; set; } Property Value Type Methods NotifyHeaderKeyChanged() 通知 HeaderKey 属性已更改 public void NotifyHeaderKeyChanged()"
  },
  "api/MAS.SharedLibrary.Vision.html": {
    "href": "api/MAS.SharedLibrary.Vision.html",
    "title": "Namespace MAS.SharedLibrary.Vision | DataMaster",
    "summary": "Namespace MAS.SharedLibrary.Vision Classes FrameRateUpdatedEventArgs 帧率更新事件 TreeViewCategory 代表树视图中的一个分类，用于组织多个控件项 TreeViewControlItem 代表一个树视图控件的子项，每个子项对应一个具体的控件 Interfaces ICamera 相机接口 IImageSaverService 图像保存服务接口 Enums ImageSaveFormat 图像的保存格式"
  },
  "api/MAS.SharedLibrary.html": {
    "href": "api/MAS.SharedLibrary.html",
    "title": "Namespace MAS.SharedLibrary | DataMaster",
    "summary": "Namespace MAS.SharedLibrary Classes GlobalDefaultPath 全局默认存储位置 GlobalEnvironment 全局环境信息 GlobalLanguageManager 全局语言文化管理 GlobalRuntime 全局累计运行时间 ProjectEventArgs 项目相关事件的参数类 PropertyChangedExtendedEventArgs 用于携带属性更改事件数据的类 Interfaces IPersistenceService 数据持久化服务接口"
  },
  "api/MAS.Vision.ImageInfoModel.html": {
    "href": "api/MAS.Vision.ImageInfoModel.html",
    "title": "Class ImageInfoModel | DataMaster",
    "summary": "Class ImageInfoModel Namespace MAS.Vision Assembly MAS.Vision.dll 图像信息数据模型 public class ImageInfoModel Inheritance object ImageInfoModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelCount 获取图像的通道数 public int ChannelCount { get; init; } Property Value int DataType 获取图像的数据类型描述，例如 \"8位无符号整数\" public string DataType { get; init; } Property Value string Depth 获取图像深度 public int Depth { get; init; } Property Value int HMax 获取或设置图像在 HSV 颜色空间中 Hue 的最高值 public double HMax { get; set; } Property Value double HMin 获取或设置图像在 HSV 颜色空间中 Hue 的最低值 public double HMin { get; set; } Property Value double HasAlpha 获取图像是否包含透明通道 public string HasAlpha { get; init; } Property Value string Height 获取图像的高度 public int Height { get; init; } Property Value int ImageArea 获取图像的几何矩 M00，通常表示图像的面积 public string ImageArea { get; init; } Property Value string IsContinuous 获取数据是否连续 public string IsContinuous { get; init; } Property Value string MeanColor 获取图像的平均颜色，格式为 \"B: 123.45, G: 67.89, R: 10.11\" public string MeanColor { get; init; } Property Value string Properties 获取图像的属性集合 public IEnumerable<KeyValuePair<string, string>> Properties { get; } Property Value IEnumerable<KeyValuePair<string, string>> SMax 获取或设置图像在 HSV 颜色空间中 Saturation 的最高值 public double SMax { get; set; } Property Value double SMin 获取或设置图像在 HSV 颜色空间中 Saturation 的最低值 public double SMin { get; set; } Property Value double StdDevColor 获取图像的标准差，格式为 \"B: 12.34, G: 56.78, R: 90.12\" public string StdDevColor { get; init; } Property Value string Step 获取每行的字节数 public long Step { get; init; } Property Value long Total 获取总像素数 public long Total { get; init; } Property Value long VMax 获取或设置图像在 HSV 颜色空间中 Value 的最高值 public double VMax { get; set; } Property Value double VMin 获取或设置图像在 HSV 颜色空间中 Value 的最低值 public double VMin { get; set; } Property Value double Width 获取图像的宽度 public int Width { get; init; } Property Value int"
  },
  "api/MAS.Vision.Models.ColorOption.html": {
    "href": "api/MAS.Vision.Models.ColorOption.html",
    "title": "Class ColorOption | DataMaster",
    "summary": "Class ColorOption Namespace MAS.Vision.Models Assembly MAS.Vision.dll 表示单个颜色选项的类 public class ColorOption Inheritance object ColorOption Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColorOption(string, Brush, Scalar) 表示单个颜色选项的类 public ColorOption(string name, Brush brush, Scalar scalar) Parameters name string brush Brush scalar Scalar Properties ColorBrush 获取或设置颜色画刷 public Brush ColorBrush { get; } Property Value Brush ColorName 获取或设置颜色名称 public string ColorName { get; } Property Value string ScalarColor 获取颜色标量 public Scalar ScalarColor { get; } Property Value Scalar Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/MAS.Vision.Models.ColorPresetModel.html": {
    "href": "api/MAS.Vision.Models.ColorPresetModel.html",
    "title": "Class ColorPresetModel | DataMaster",
    "summary": "Class ColorPresetModel Namespace MAS.Vision.Models Assembly MAS.Vision.dll 表示特定 HSV 范围的颜色预设数据模型 public class ColorPresetModel : INotifyPropertyChanged Inheritance object ColorPresetModel Implements INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColorPresetModel(string, short, Scalar, Scalar) 构造函数，初始化 ColorPresetModel 新实例 public ColorPresetModel(string name, short tag, Scalar lowerHsv, Scalar upperHsv) Parameters name string 颜色名称，用于标识颜色预设 tag short 颜色标签，可以用于进一步分类或标识颜色 lowerHsv Scalar HSV颜色空间中的下限标量，确定颜色范围的最低阈值 upperHsv Scalar HSV颜色空间中的上限标量，确定颜色范围的最高阈值 Properties LowerHsv 获取或设置HSV颜色空间中的下限标量 public Scalar LowerHsv { get; set; } Property Value Scalar LowerHue 获取或设置HSV颜色空间中的下限色调 public int LowerHue { get; set; } Property Value int LowerSat 获取或设置HSV颜色空间中的下限饱和度 public int LowerSat { get; set; } Property Value int LowerVal 获取或设置HSV颜色空间中的下限亮度值 public int LowerVal { get; set; } Property Value int Name 获取或设置颜色名称 public string Name { get; set; } Property Value string Tag 获取或设置颜色标签，可用于标识或分类颜色 public short Tag { get; set; } Property Value short UpperHsv 获取或设置HSV颜色空间中的上限标量 public Scalar UpperHsv { get; set; } Property Value Scalar UpperHue 获取或设置HSV颜色空间中的上限色调 public int UpperHue { get; set; } Property Value int UpperSat 获取或设置HSV颜色空间中的上限饱和度 public int UpperSat { get; set; } Property Value int UpperVal 获取或设置HSV颜色空间中的上限亮度值 public int UpperVal { get; set; } Property Value int Methods OnPropertyChanged(string) 触发属性更改通知 protected virtual void OnPropertyChanged(string propertyName) Parameters propertyName string 更改的属性名称 Events PropertyChanged 触发属性更改通知的事件 public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MAS.Vision.Models.FontOption.html": {
    "href": "api/MAS.Vision.Models.FontOption.html",
    "title": "Class FontOption | DataMaster",
    "summary": "Class FontOption Namespace MAS.Vision.Models Assembly MAS.Vision.dll 表示单个字体选项的类 public class FontOption Inheritance object FontOption Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FontOption(HersheyFonts, string) 表示单个字体选项的类 public FontOption(HersheyFonts font, string displayName) Parameters font HersheyFonts displayName string Properties DisplayName 获取字体类型的显示名称 public string DisplayName { get; } Property Value string FontValue 获取字体类型 public HersheyFonts FontValue { get; } Property Value HersheyFonts Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/MAS.Vision.Models.ImageSourceModel.html": {
    "href": "api/MAS.Vision.Models.ImageSourceModel.html",
    "title": "Class ImageSourceModel | DataMaster",
    "summary": "Class ImageSourceModel Namespace MAS.Vision.Models Assembly MAS.Vision.dll 图像源数据模型 public class ImageSourceModel : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase ImageSourceModel Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FilePath public string? FilePath { get; set; } Property Value string NetworkUrl public string? NetworkUrl { get; set; } Property Value string SourceType public ImageSourceType SourceType { get; set; } Property Value ImageSourceType Methods FromFile(string) 从文件创建图像源 public static ImageSourceModel FromFile(string filePath) Parameters filePath string Returns ImageSourceModel FromNetwork(string) 从网络URL创建图像源 public static ImageSourceModel FromNetwork(string url) Parameters url string Returns ImageSourceModel"
  },
  "api/MAS.Vision.Models.ImageSourceType.html": {
    "href": "api/MAS.Vision.Models.ImageSourceType.html",
    "title": "Enum ImageSourceType | DataMaster",
    "summary": "Enum ImageSourceType Namespace MAS.Vision.Models Assembly MAS.Vision.dll 图像源类型 public enum ImageSourceType Fields File = 0 从文件 Network = 1 从网络"
  },
  "api/MAS.Vision.Models.ROICoordinates.html": {
    "href": "api/MAS.Vision.Models.ROICoordinates.html",
    "title": "Class ROICoordinates | DataMaster",
    "summary": "Class ROICoordinates Namespace MAS.Vision.Models Assembly MAS.Vision.dll 表示图像中感兴趣区域（ROI）的坐标数据模型 public class ROICoordinates : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase ROICoordinates Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Angle public float Angle { get; set; } Property Value float CenterX public int CenterX { get; set; } Property Value int CenterY public int CenterY { get; set; } Property Value int CoordinatesText 获取 ROI 格式化显示的坐标文本 public string CoordinatesText { get; } Property Value string Height public int Height { get; set; } Property Value int Radius public int Radius { get; set; } Property Value int ShapeType public ShapeType ShapeType { get; set; } Property Value ShapeType Width public int Width { get; set; } Property Value int X public int X { get; set; } Property Value int Y public int Y { get; set; } Property Value int"
  },
  "api/MAS.Vision.Models.ShapeType.html": {
    "href": "api/MAS.Vision.Models.ShapeType.html",
    "title": "Enum ShapeType | DataMaster",
    "summary": "Enum ShapeType Namespace MAS.Vision.Models Assembly MAS.Vision.dll ROI 的形状类型 public enum ShapeType Fields Circle = 1 圆形 Rectangle = 0 矩形 RotatedRectangle = 2 旋转矩形"
  },
  "api/MAS.Vision.Models.TextRenderConfig.html": {
    "href": "api/MAS.Vision.Models.TextRenderConfig.html",
    "title": "Class TextRenderConfig | DataMaster",
    "summary": "Class TextRenderConfig Namespace MAS.Vision.Models Assembly MAS.Vision.dll 文本渲染配置类 public class TextRenderConfig : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase TextRenderConfig Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ViewModelBase.IsBusy ViewModelBase.BusyCursor ViewModelBase.WorkingCursor ViewModelBase.ResetCursor() ViewModelBase.SetBusyCursor() ViewModelBase.SetWorkingCursor() ViewModelBase.SetField<T>(ref T, T, string) ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextRenderConfig() 构造函数，初始化 TextRenderConfig 新实例 public TextRenderConfig() Properties BorderColor public ColorOption BorderColor { get; set; } Property Value ColorOption BorderThickness public int BorderThickness { get; set; } Property Value int ColorOptions 获取颜色选项集合 [JsonIgnore] public ObservableCollection<ColorOption> ColorOptions { get; } Property Value ObservableCollection<ColorOption> FontScale public double FontScale { get; set; } Property Value double FontType public FontOption FontType { get; set; } Property Value FontOption FontTypeOptions 获取字体选项集合 [JsonIgnore] public ObservableCollection<FontOption> FontTypeOptions { get; } Property Value ObservableCollection<FontOption> IsShowResultText public bool IsShowResultText { get; set; } Property Value bool TextColor public ColorOption TextColor { get; set; } Property Value ColorOption TextHeight public double TextHeight { get; set; } Property Value double Thickness public int Thickness { get; set; } Property Value int XOffset public double XOffset { get; set; } Property Value double YOffset public double YOffset { get; set; } Property Value double"
  },
  "api/MAS.Vision.Models.html": {
    "href": "api/MAS.Vision.Models.html",
    "title": "Namespace MAS.Vision.Models | DataMaster",
    "summary": "Namespace MAS.Vision.Models Classes ColorOption 表示单个颜色选项的类 ColorPresetModel 表示特定 HSV 范围的颜色预设数据模型 FontOption 表示单个字体选项的类 ImageSourceModel 图像源数据模型 ROICoordinates 表示图像中感兴趣区域（ROI）的坐标数据模型 TextRenderConfig 文本渲染配置类 Enums ImageSourceType 图像源类型 ShapeType ROI 的形状类型"
  },
  "api/MAS.Vision.OpenCV.IColorConversions.html": {
    "href": "api/MAS.Vision.OpenCV.IColorConversions.html",
    "title": "Interface IColorConversions | DataMaster",
    "summary": "Interface IColorConversions Namespace MAS.Vision.OpenCV Assembly MAS.Vision.dll 颜色空间转换接口，提供将图像在不同类型之间转换并应用颜色空间转换的功能 public interface IColorConversions Remarks 支持的类型： BitmapImage、WriteableBitmap、OpenCvSharp.Mat Methods ConvertImage(object, Type, ColorConversionCodes) 将输入的图像对象转换为指定的目标类型，并应用颜色空间转换 object? ConvertImage(object input, Type targetType, ColorConversionCodes code) Parameters input object 输入的图像对象 targetType Type 目标图像类型 code ColorConversionCodes 颜色转换代码 Returns object 转换后的图像对象或 null ConvertImage<T>(object, ColorConversionCodes) 将输入的图像对象转换为指定的泛型类型，并应用颜色空间转换 T? ConvertImage<T>(object input, ColorConversionCodes code) where T : class Parameters input object 输入的图像对象 code ColorConversionCodes 颜色转换代码 Returns T 转换后的图像对象或 null Type Parameters T 目标图像类型 ToBitmapImage(object, ColorConversionCodes) 将输入的图像对象转换为 BitmapImage 类型，并应用颜色空间转换 BitmapImage ToBitmapImage(object input, ColorConversionCodes code) Parameters input object 输入的图像对象 code ColorConversionCodes 颜色转换代码 Returns BitmapImage 转换后的 BitmapImage 对象 Exceptions NotSupportedException ToMat(object, ColorConversionCodes) 将输入的图像对象转换为 OpenCvSharp.Mat 类型，并应用颜色空间转换 Mat ToMat(object input, ColorConversionCodes code) Parameters input object 输入的图像对象 code ColorConversionCodes 颜色转换代码 Returns Mat 转换后的 OpenCvSharp.Mat 对象 Exceptions NotSupportedException ToWriteableBitmap(object, ColorConversionCodes) 将输入的图像对象转换为 WriteableBitmap 类型，并应用颜色空间转换 WriteableBitmap ToWriteableBitmap(object input, ColorConversionCodes code) Parameters input object 输入的图像对象 code ColorConversionCodes 颜色转换代码 Returns WriteableBitmap 转换后的 WriteableBitmap 对象 Exceptions NotSupportedException"
  },
  "api/MAS.Vision.OpenCV.IColorRecognizer.html": {
    "href": "api/MAS.Vision.OpenCV.IColorRecognizer.html",
    "title": "Interface IColorRecognizer | DataMaster",
    "summary": "Interface IColorRecognizer Namespace MAS.Vision.OpenCV Assembly MAS.Vision.dll 颜色识别接口 public interface IColorRecognizer Methods ProcessImage(object, Type, Scalar, Scalar, int?, double?, TextRenderConfig?) 对输入图像进行颜色范围检测，并根据像素数量或百分比阈值判断结果 (object Image, bool IsDetected) ProcessImage(object image, Type outputType, Scalar lowerBound, Scalar upperBound, int? pixels = null, double? percentage = null, TextRenderConfig? textRender = null) Parameters image object 输入图像 outputType Type 指定输出图像类型 lowerBound Scalar 颜色范围的下界（HSV空间） upperBound Scalar 颜色范围的上界（HSV空间） pixels int? 设定的像素数量阈值，若提供则按像素数判断 percentage double? 设定的像素百分比阈值，若提供则按百分比判断 textRender TextRenderConfig 文本渲染配置项 Returns (object Image, bool IsDetected) 元组： - Image: 处理后的图像，类型为 outputType 指定的类型 - IsDetected: 若图中符合颜色范围的像素数量或百分比超过指定阈值，则返回 true；否则返回 false Remarks Input and Output:（OpenCvSharp.Mat、WriteableBitmap、BitmapImage） Exceptions ArgumentException 当输入图像类型不支持或输出类型不支持时抛出 ProcessImage(object, Type, Scalar, Scalar, int?, double?, Scalar?, double, double, double, HersheyFonts, double, int, bool) 对输入图像进行颜色范围检测，并根据像素数量或百分比阈值判断结果 (object Image, bool IsDetected) ProcessImage(object image, Type outputType, Scalar lowerBound, Scalar upperBound, int? pixels = null, double? percentage = null, Scalar? textColor = null, double textHeight = 5, double xOffset = 1, double yOffset = 1, HersheyFonts fontType = HersheyFonts.HersheySimplex, double fontScale = 1, int thickness = 2, bool isShowResult = true) Parameters image object 输入图像 outputType Type 指定输出图像类型 lowerBound Scalar 颜色范围的下界（HSV空间） upperBound Scalar 颜色范围的上界（HSV空间） pixels int? 设定的像素数量阈值，若提供则按像素数判断 percentage double? 设定的像素百分比阈值，若提供则按百分比判断 textColor Scalar? 文本颜色，默认为 null（使用白色），使用 Scalar 定义 RGB 值 textHeight double 文本高度，占图像高度的百分比，默认值为 5.0（5%） xOffset double 文本水平偏移量，占图像宽度的百分比，默认值为 1.0（1%） yOffset double 文本垂直偏移量，占图像高度的百分比，默认值为 1.0（1%） fontType HersheyFonts 字体类型，默认值为 HersheyFonts.HersheySimplex fontScale double 字体缩放比例，默认值为 1.0 thickness int 字体粗细，默认值为 2 isShowResult bool 是否显示结果到图像中 Returns (object Image, bool IsDetected) 元组： - Image: 处理后的图像，类型为 outputType 指定的类型 - IsDetected: 若图中符合颜色范围的像素数量或百分比超过指定阈值，则返回 true；否则返回 false Remarks Input and Output:（OpenCvSharp.Mat、WriteableBitmap、BitmapImage） Exceptions ArgumentException 当输入图像类型不支持或输出类型不支持时抛出 ProcessImage<TOutput>(object, Scalar, Scalar, int?, double?, TextRenderConfig?) 对输入图像进行颜色范围检测，并根据像素数量或百分比阈值判断结果 (TOutput Image, bool IsDetected) ProcessImage<TOutput>(object image, Scalar lowerBound, Scalar upperBound, int? pixels = null, double? percentage = null, TextRenderConfig? textRender = null) where TOutput : class Parameters image object 输入图像 lowerBound Scalar 颜色范围的下界（HSV空间） upperBound Scalar 颜色范围的上界（HSV空间） pixels int? 设定的像素数量阈值，若提供则按像素数判断 percentage double? 设定的像素百分比阈值，若提供则按百分比判断 textRender TextRenderConfig 文本渲染配置项 Returns (TOutput Image, bool IsDetected) 元组： - Image: 处理后的图像，类型为 TOutput - IsDetected: 若图中符合颜色范围的像素数量或百分比超过指定阈值，则返回 true；否则返回 false Type Parameters TOutput 输出图像类型 Remarks Input and Output:（OpenCvSharp.Mat、WriteableBitmap、BitmapImage） Exceptions ArgumentException NotSupportedException ProcessImage<TOutput>(object, Scalar, Scalar, int?, double?, Scalar?, double, double, double, HersheyFonts, double, int, bool) 对输入图像进行颜色范围检测，并根据像素数量或百分比阈值判断结果 (TOutput Image, bool IsDetected) ProcessImage<TOutput>(object image, Scalar lowerBound, Scalar upperBound, int? pixels = null, double? percentage = null, Scalar? textColor = null, double textHeight = 5, double xOffset = 1, double yOffset = 1, HersheyFonts fontType = HersheyFonts.HersheySimplex, double fontScale = 1, int thickness = 2, bool isShowResult = true) where TOutput : class Parameters image object 输入图像 lowerBound Scalar 颜色范围的下界（HSV空间） upperBound Scalar 颜色范围的上界（HSV空间） pixels int? 设定的像素数量阈值，若提供则按像素数判断 percentage double? 设定的像素百分比阈值，若提供则按百分比判断 textColor Scalar? 文本颜色，默认为 null（使用白色），使用 Scalar 定义 RGB 值 textHeight double 文本高度，占图像高度的百分比，默认值为 5.0（5%） xOffset double 文本水平偏移量，占图像宽度的百分比，默认值为 1.0（1%） yOffset double 文本垂直偏移量，占图像高度的百分比，默认值为 1.0（1%） fontType HersheyFonts 字体类型，默认值为 HersheyFonts.HersheySimplex fontScale double 字体缩放比例，默认值为 1.0 thickness int 字体粗细，默认值为 2 isShowResult bool 是否显示结果到图像中 Returns (TOutput Image, bool IsDetected) 元组： - Image: 处理后的图像，类型为 TOutput - IsDetected: 若图中符合颜色范围的像素数量或百分比超过指定阈值，则返回 true；否则返回 false Type Parameters TOutput 输出图像类型 Remarks Input and Output:（OpenCvSharp.Mat、WriteableBitmap、BitmapImage） Exceptions ArgumentException NotSupportedException"
  },
  "api/MAS.Vision.OpenCV.IImageConverter.html": {
    "href": "api/MAS.Vision.OpenCV.IImageConverter.html",
    "title": "Interface IImageConverter | DataMaster",
    "summary": "Interface IImageConverter Namespace MAS.Vision.OpenCV Assembly MAS.Vision.dll 图像类型转换接口，提供在不同图像类型之间转换的方法 public interface IImageConverter Remarks 支持的类型： BitmapImage、WriteableBitmap、OpenCvSharp.Mat Methods ConvertImage(object, Type) 将输入的图像对象转换为指定的目标类型 object? ConvertImage(object input, Type targetType) Parameters input object 输入的图像对象 targetType Type 目标图像类型 Returns object 转换后的图像对象或 null ConvertImage<T>(object) 将输入的图像对象转换为指定的泛型类型 T? ConvertImage<T>(object input) where T : class Parameters input object 输入的图像对象 Returns T 转换后的图像对象或 null Type Parameters T 目标图像类型 ToBitmapImage(object) 将输入的图像对象转换为 BitmapImage 类型 BitmapImage ToBitmapImage(object input) Parameters input object 输入的图像对象 Returns BitmapImage 转换后的 BitmapImage 对象 Exceptions NotSupportedException ToMat(object) 将输入的图像对象转换为 OpenCvSharp.Mat 类型 Mat ToMat(object input) Parameters input object 输入的图像对象 Returns Mat 转换后的 OpenCvSharp.Mat 对象 Exceptions NotSupportedException ToWriteableBitmap(object) 将输入的图像对象转换为 WriteableBitmap 类型 WriteableBitmap ToWriteableBitmap(object input) Parameters input object 输入的图像对象 Returns WriteableBitmap 转换后的 WriteableBitmap 对象 Exceptions NotSupportedException"
  },
  "api/MAS.Vision.OpenCV.IImageInfor.html": {
    "href": "api/MAS.Vision.OpenCV.IImageInfor.html",
    "title": "Interface IImageInfor | DataMaster",
    "summary": "Interface IImageInfor Namespace MAS.Vision.OpenCV Assembly MAS.Vision.dll 图像信息接口 public interface IImageInfor Methods GetImageInfo(Mat) 获取图像信息 ImageInfoModel GetImageInfo(Mat image) Parameters image Mat 要获取的图像类型 Returns ImageInfoModel ImageInfoModel 对象 GetImageInfo(object) 获取图像信息 ImageInfoModel GetImageInfo(object image) Parameters image object 要获取的图像类型 Returns ImageInfoModel ImageInfoModel 对象 GetImageInfo(ImageSource) 获取图像信息 ImageInfoModel GetImageInfo(ImageSource image) Parameters image ImageSource 要获取的图像类型 Returns ImageInfoModel ImageInfoModel 对象 GetImageInfo(BitmapSource) 获取图像信息 ImageInfoModel GetImageInfo(BitmapSource image) Parameters image BitmapSource 要获取的图像类型 Returns ImageInfoModel ImageInfoModel 对象 GetImageInfo(WriteableBitmap) 获取图像信息 ImageInfoModel GetImageInfo(WriteableBitmap image) Parameters image WriteableBitmap 要获取的图像类型 Returns ImageInfoModel ImageInfoModel 对象"
  },
  "api/MAS.Vision.OpenCV.IROIAdjuster.html": {
    "href": "api/MAS.Vision.OpenCV.IROIAdjuster.html",
    "title": "Interface IROIAdjuster | DataMaster",
    "summary": "Interface IROIAdjuster Namespace MAS.Vision.OpenCV Assembly MAS.Vision.dll ROI图像处理器接口，提供对图像指定区域的调整操作 public interface IROIAdjuster Methods ProcessROI(object, ROICoordinates, Type) 将输入的图像对象裁剪/处理为ROI区域并转换为指定目标类型 object? ProcessROI(object input, ROICoordinates roi, Type targetType) Parameters input object 输入的图像对象 roi ROICoordinates ROI区域定义 targetType Type 目标图像类型 Returns object 处理后的图像对象或 null ProcessROI<T>(object, ROICoordinates) 将输入的图像对象裁剪/处理为ROI区域并转换为指定类型 T? ProcessROI<T>(object input, ROICoordinates roi) where T : class Parameters input object 输入的图像对象 roi ROICoordinates ROI区域定义 Returns T 处理后的图像对象或 null Type Parameters T 目标图像类型 ToBitmapImageROI(object, ROICoordinates) 将输入的图像对象处理为ROI区域并转换为 BitmapImage 类型 BitmapImage ToBitmapImageROI(object input, ROICoordinates roi) Parameters input object 输入的图像对象 roi ROICoordinates ROI区域定义 Returns BitmapImage 处理后的 BitmapImage 对象 Exceptions NotSupportedException 当输入类型不支持时抛出 ToMatROI(object, ROICoordinates) 将输入的图像对象处理为ROI区域并转换为 OpenCvSharp.Mat 类型 Mat ToMatROI(object input, ROICoordinates roi) Parameters input object 输入的图像对象 roi ROICoordinates ROI区域定义 Returns Mat 处理后的 OpenCvSharp.Mat 对象 Exceptions NotSupportedException 当输入类型不支持时抛出 ToWriteableBitmapROI(object, ROICoordinates) 将输入的图像对象处理为ROI区域并转换为 WriteableBitmap 类型 WriteableBitmap ToWriteableBitmapROI(object input, ROICoordinates roi) Parameters input object 输入的图像对象 roi ROICoordinates ROI区域定义 Returns WriteableBitmap 处理后的 WriteableBitmap 对象 Exceptions NotSupportedException 当输入类型不支持时抛出"
  },
  "api/MAS.Vision.OpenCV.ITemplateMatcher.html": {
    "href": "api/MAS.Vision.OpenCV.ITemplateMatcher.html",
    "title": "Interface ITemplateMatcher | DataMaster",
    "summary": "Interface ITemplateMatcher Namespace MAS.Vision.OpenCV Assembly MAS.Vision.dll 模板匹配接口 public interface ITemplateMatcher Methods Match(object, List<object?>, double, TemplateMatchModes, out ImageSource, TextRenderConfig?) 模板匹配 bool Match(object image, List<object?> templates, double matchingValue, TemplateMatchModes matchMode, out ImageSource resultImage, TextRenderConfig? textRender = null) Parameters image object 图像 templates List<object> 模板列表 matchingValue double 匹配阈值 matchMode TemplateMatchModes 匹配方法 resultImage ImageSource 匹配后的图像结果 textRender TextRenderConfig 文本渲染配置 Returns bool 如果匹配成功返回true，否则返回false Remarks 对模板列表进行匹配，直到成功或遍历结束 Exceptions ImageTypeException Match(object, object, double, TemplateMatchModes, out ImageSource, TextRenderConfig?) 模板匹配 bool Match(object image, object template, double matchingValue, TemplateMatchModes matchMode, out ImageSource resultImage, TextRenderConfig? textRender = null) Parameters image object 图像 template object 模板 matchingValue double 匹配阈值 matchMode TemplateMatchModes 匹配方法 resultImage ImageSource 匹配后的图像结果 textRender TextRenderConfig 文本渲染配置 Returns bool 如果匹配成功返回true，否则返回false Exceptions ImageTypeException"
  },
  "api/MAS.Vision.OpenCV.html": {
    "href": "api/MAS.Vision.OpenCV.html",
    "title": "Namespace MAS.Vision.OpenCV | DataMaster",
    "summary": "Namespace MAS.Vision.OpenCV Interfaces IColorConversions 颜色空间转换接口，提供将图像在不同类型之间转换并应用颜色空间转换的功能 IColorRecognizer 颜色识别接口 IImageConverter 图像类型转换接口，提供在不同图像类型之间转换的方法 IImageInfor 图像信息接口 IROIAdjuster ROI图像处理器接口，提供对图像指定区域的调整操作 ITemplateMatcher 模板匹配接口"
  },
  "api/MAS.Vision.ServiceCollectionExtensions.html": {
    "href": "api/MAS.Vision.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DataMaster",
    "summary": "Class ServiceCollectionExtensions Namespace MAS.Vision Assembly MAS.Vision.dll 提供扩展方法，用于在 IServiceCollection 中注册与 OpenCV 视觉相关的服务 public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOpenCvVisionService(IServiceCollection) 在指定的 IServiceCollection 中注册与 OpenCV 视觉相关的服务 public static IServiceCollection AddOpenCvVisionService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合 AddVisionService(IServiceCollection) 在指定的 IServiceCollection 中注册与视觉相关的服务 public static IServiceCollection AddVisionService(this IServiceCollection services) Parameters services IServiceCollection 要添加服务的 IServiceCollection 实例 Returns IServiceCollection 已注册的服务集合"
  },
  "api/MAS.Vision.html": {
    "href": "api/MAS.Vision.html",
    "title": "Namespace MAS.Vision | DataMaster",
    "summary": "Namespace MAS.Vision Classes ImageInfoModel 图像信息数据模型 ServiceCollectionExtensions 提供扩展方法，用于在 IServiceCollection 中注册与 OpenCV 视觉相关的服务"
  },
  "api/MAS.WebView.IWebViewService.html": {
    "href": "api/MAS.WebView.IWebViewService.html",
    "title": "Interface IWebViewService | DataMaster",
    "summary": "Interface IWebViewService Namespace MAS.WebView Assembly MAS.WebView.dll 与 WebView2 交互的基本服务接口 public interface IWebViewService : IDisposable Inherited Members IDisposable.Dispose() Properties IsInitialized 获取是否已初始化 bool IsInitialized { get; } Property Value bool Methods ExecuteScriptAsync(string) 异步在 WebView2 上下文中执行 JavaScript 代码 Task<string> ExecuteScriptAsync(string script) Parameters script string JavaScript 代码 Returns Task<string> 脚本执行结果的字符串 Initialize(CoreWebView2) 初始化 WebView2 控件 void Initialize(CoreWebView2 webView) Parameters webView CoreWebView2 WebView2 实例 PostMessageAsync(object) 异步向 WebView 发送 JSON 消息 Task PostMessageAsync(object message) Parameters message object 要发送的 JSON 数据 Returns Task Events MessageReceived 当收到来自 WebView2 的消息时触发 event EventHandler<string> MessageReceived Event Type EventHandler<string>"
  },
  "api/MAS.WebView.WebView2ServiceBase.html": {
    "href": "api/MAS.WebView.WebView2ServiceBase.html",
    "title": "Class WebView2ServiceBase | DataMaster",
    "summary": "Class WebView2ServiceBase Namespace MAS.WebView Assembly MAS.WebView.dll WebView2 基本交互抽象类 public abstract class WebView2ServiceBase : IWebViewService, IDisposable Inheritance object WebView2ServiceBase Implements IWebViewService IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInitialized 获取是否已初始化 public bool IsInitialized { get; } Property Value bool Methods AfterInitialize() 进行额外的初始化 protected virtual void AfterInitialize() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool EscapeJavaScriptString(string) 转义 JavaScript 字符串 protected static string EscapeJavaScriptString(string input) Parameters input string 输入 Returns string 转义后的字符 ExecuteScriptAsync(string) 异步在 WebView2 上下文中执行 JavaScript 代码 public Task<string> ExecuteScriptAsync(string script) Parameters script string JavaScript 代码 Returns Task<string> 脚本执行结果的字符串 HandleWebMessage(string) 处理来自 web 的消息 protected abstract void HandleWebMessage(string jsonMessage) Parameters jsonMessage string json 格式内容 Initialize(CoreWebView2) 初始化 WebView2 控件 public void Initialize(CoreWebView2 webView) Parameters webView CoreWebView2 WebView2 实例 PostMessageAsync(object) 异步向 WebView 发送 JSON 消息 public Task PostMessageAsync(object message) Parameters message object 要发送的 JSON 数据 Returns Task Events MessageReceived 当收到来自 WebView2 的消息时触发 public event EventHandler<string>? MessageReceived Event Type EventHandler<string>"
  },
  "api/MAS.WebView.WebViewHelpers.html": {
    "href": "api/MAS.WebView.WebViewHelpers.html",
    "title": "Class WebViewHelpers | DataMaster",
    "summary": "Class WebViewHelpers Namespace MAS.WebView Assembly MAS.WebView.dll 提供与 WebView2 控件相关的辅助功能 public static class WebViewHelpers Inheritance object WebViewHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckWebView2RuntimeInstalledAsync() 异步检查 WebView2 运行时安装状态并获取版本信息 public static Task<(bool isInstalled, string? version)> CheckWebView2RuntimeInstalledAsync() Returns Task<(bool isInstalled, string version)> 已安装返回 (true, 版本号)，否则 (false, null) DisposeWebView(WebView2?) 清理并关闭 WebView2 控件的资源 public static void DisposeWebView(WebView2? webView) Parameters webView WebView2 要清理资源的 WebView2 控件 InitializeAsync(WebView2, string) 异步初始化 WebView2 控件，使用完整的 URL 地址 public static Task InitializeAsync(WebView2 webView, string url) Parameters webView WebView2 要初始化的 WebView2 控件 url string 要加载的 HTML 文件的完整 URL 地址 Returns Task InitializeLocalAsync(WebView2, string, string) 异步初始化 WebView2 控件，使用本地相对路径 public static Task<bool> InitializeLocalAsync(WebView2 webView, string subDirectory, string fileName) Parameters webView WebView2 要初始化的 WebView2 控件 subDirectory string HTML文件所在的子目录 fileName string HTML文件名 Returns Task<bool> 初始化是否成功的布尔值 IsWebView2RuntimeInstalledAsync() 尝试创建 WebView2 环境 [Obsolete(\"请使用 CheckWebView2RuntimeInstalledAsync 方法以获取版本信息\")] public static Task<bool> IsWebView2RuntimeInstalledAsync() Returns Task<bool> 是否成功创建，表示运行时安装"
  },
  "api/MAS.WebView.html": {
    "href": "api/MAS.WebView.html",
    "title": "Namespace MAS.WebView | DataMaster",
    "summary": "Namespace MAS.WebView Classes WebView2ServiceBase WebView2 基本交互抽象类 WebViewHelpers 提供与 WebView2 控件相关的辅助功能 Interfaces IWebViewService 与 WebView2 交互的基本服务接口"
  },
  "content/App-Feature.html": {
    "href": "content/App-Feature.html",
    "title": "App Feature | DataMaster",
    "summary": "App Feature 分类 标题 描述 详细说明 状态 日志记录 系统 记录系统的运行状态和关键事件 包括系统启动、停止、故障、恢复等重要事件的详细日志，帮助系统维护和故障排除 ✅ 通讯 记录设备与外部系统的通信数据 记录设备与外部系统之间的通信数据，包括发送和接收的数据、时间戳、通信结果等，用于调试和故障排除 ✅ 网络 记录网络连接信息 记录网络状态，异常信息和错误信息 ✅ AI API 记录AI API调用信息 记录AI API调用信息的回复信息，包括调用时间、调用参数、调用结果、回复方的信息 ✅ 操作 记录用户的每次操作及其结果 自动记录所有用户界面操作，包括时间、操作人、具体操作内容及操作结果，用于审计和复查 ❌ 性能 监控并记录系统性能相关数据 定期记录系统的CPU使用率、内存使用、网络状态等性能数据，用于性能分析和优化 ❌ 数据记录 生产过程 记录整个生产过程中的关键数据 跟踪并记录生产线上各阶段的操作数据，如生产量、作业时间、材料消耗等 ✅ 参数调整 记录设备参数的调整历史 每当设备参数被调整时，详细记录调整前后的值、调整时间以及操作员信息 ❌ 质量控制 记录生产过程中的质量检查结果 记对每批产品进行质量检查，并记录检查结果数据，用于追踪产品质量和合格率 ❌ 配置更改 记录设备配置的更改历史 记录系统设置或配置文件的任何更改，包括更改前后的详细对比、更改时间和操作员信息，用于系统配置管理 ❌ 设备管理信息 记录设备的相关信息 设备信息、设备产品、设备生产信息、设备状态信息、设备报警信息、设备停机信息等相关数据 ✅ 设备节拍 记录设备节拍数据 记录设备节拍数据，包括节拍时间、节拍频率、产量效率数据，包括产量时间、产量数量 ❌ 用户管理 用户身份验证 管理用户登录与权限 实现用户登录功能，根据用户角色分配权限，包括对操作、配置、监控等功能的访问控制 ✅ 用户操作审计 跟踪用户操作和事件 记录用户操作和事件，包括登录、访问、修改等，以便进行审计和监控 ❌ 用户权限管理 定义和管理不同用户的访问权限和操作权限 精细管理用户权限，确保不同角色和职责的用户访问合适的功能区域，增加系统的安全性 ✅ 数据管理 备份和恢复 管理数据的存储与自动备份 定期存储并备份关键数据，确保数据安全和可恢复性 ❌ 数据表单 创建和修改数据表单 创建和修改数据表单，以定义数据字段和选项 ✅ 数据查询 浏览和查询更改存储的数据 提供一个界面让用户可以查询历史数据和实时数据，支持多条件搜索和数据筛选 ❌ 报表生成 根据数据生成各类报表 生成定制化报表或数据库统计报表，可导出数据库表单格式数据 ✅ 数据同步 不同系统设备同步数据适应不同的数据共享 在多个系统和设备之间同步数据，确保信息的一致性和实时更新 ❌ 数据清理 以优化存储空间利用率和提高系统性能 定期清理无用或过时的数据，保持系统性能和响应速度 ❌ 数据加密 对敏感数据进行加密处理 使用高级加密标准保护存储和传输中的敏感数据，防止数据泄露 ❌ 数据完整性检查 检查数据在存储和传输中的完整性 实现机制确保数据未被非法修改，如通过哈希校验、数字签名等方法保护数据完整性 ❌ 监控与控制 运行 启动系统执行自动化任务过程 启动或停止设备的数据采集， 对数据处理，保存、导出表格等 ✅ 环境监控 实时显示设备状态和传感器数据 实时监控各种传感器和设备状态数据，如温度、压力、流速等，保证系统在最佳状态下运行 ❌ 统计 数据可视化图形统计 通过图表和曲线显示统计数据，帮助理解数据趋势和进行决策 ❌ Takt Time 设备生产节拍统计 统计设备生产节拍，包括节拍时间、节拍频率、产量效率数据，包括产量时间、产量数量 ✅ 设备诊断 对连接的设备进行状态检查和故障诊断 检查并诊断连接的设备状态，包括预防性维护提示和故障分析 ❌ 过程可视化 展示生产过程和设备布局 以图形和动画形式展示整个生产过程和设备布局，帮助操作员和维护人员了解流程 ❌ 趋势分析 分析关键参数的历史数据展示其变化趋势 收集和分析历史运行数据，通过趋势图和预测模型帮助预测未来性能，优化操作决策 ❌ 分析与维护 预测维护 分析预测设备故障和维护需求 利用历史数据和机器学习模型来预测设备的潜在故障点和维护需求，以提前安排维护活动以避免意外停机 ❌ 维护计划 规划和记录设备的维护活动 管理和规划定期维护任务，记录维护历史和计划，确保设备长期运行的可靠性和效率 ❌ 设备健康评估 利用指标和阈值来识别潜在问题 通过监控设备的关键性能指标和对比阈值，评估设备的运行健康状态，及时识别可能的问题点 ❌ 资产管理 管理和跟踪所有设备资产的详细信息 详细记录所有资产的配置、状态和维护记录，提供资产的全面视图以优化资产利用率 ❌ 故障树分析 帮助确定不同故障模式对系统性能的影响 使用故障树分析方法识别和分析潜在的故障来源，以及它们如何影响系统的整体性能 ❌ 备件管理与优化 管理维护过程中所需的备件库存 优化备件库存管理，确保必要的备件可用性，减少因缺少备件而导致的维护延迟 ❌ 配置与自定义 参数配置 配置设备参数或软件设置 提供用户友好的界面来配置和保存设备或软件的操作参数，支持快速修改和加载配置 ✅ 配方管理 管理生产配方和参数设置 允许用户创建、编辑和管理生产线的配方设置，支持不同产品的快速切换和参数调整 ❌ 多语言 满足不同地区用户的需求 支持多种语言选项，确保软件可以在不同国家和地区使用，提升用户体验 ✅ 系统主题与外观 支持自定义主题颜色 允许用户根据个人偏好自定义软件的视觉主题和界面外观 ✅ 视觉系统 图像捕获 多相机配置选择不同的捕获模式 配置并管理多个摄像头系统，以适应不同的监控需求和角度，捕获高质量图像用于进一步分析 ❌ 图像处理 改善图像质量，为后续的图像分析准备 应用图像处理技术改善捕获图像的质量，包括滤镜、对比度调整等，以优化分析效果 ❌ 特征检测 从捕获的图像中检测和提取关键特征 使用先进的图像分析技术从图像中自动检测和标识关键特征，用于质量控制和自动化检测 ❌ 缺陷检测 识别图像中的裂纹、划痕、异物等缺陷 利用图像分析技术识别并报告产品或原料中的缺陷，如裂纹、划痕或其他不规则性，提高生产质量 ❌ 图像补正与校准 图像的自动补正与校准功能 自动校准摄像头捕获的图像，调整图像歪斜、色彩偏差等问题，确保图像分析的准确性 ❌ 图像算法应用 包括但不限于形态学特征提取和模式识别 集成和应用多种图像处理算法，从图像中提取更多信息，支持复杂的模式识别和分析 ❌ 高级图像分析 实现高级图像识别和处理功能 引入机器学习模型对图像进行深入分析，如使用深度学习对产品缺陷进行更精确的识别 ❌ 机器人监控 机器人状态监控 实时显示机器人的状态 监控机器人的状态，包括位置、速度、姿态、负载等，实时显示在机器人上的状态，确保操作的透明度和安全性 ❌ 坐标补正值 与预期目标之间的偏差 显示机器人执行任务过程中与预设目标坐标的偏差值，用于精确控制和调整 ❌ 安全区域监控 定义和监控机器人操作的安全区域 实时监控并确保机器人在预定义的安全区域内操作，防止越界导致的安全事故 ❌ 通讯 Modbus协议 用于PLC与上位机之间的通信 支持Modbus RTU和Modbus TCP两种模式，适用于实时数据和控制指令的传输，广泛应用于工业自动化领域 ✅ S7协议 用于与西门子PLC进行通信 支持与西门子系列PLC（如S7-300/400/1200/1500）进行数据交换，适用于复杂的自动化和控制需求 ✅ MC协议 用于与三菱PLC进行通信 用于三菱PLC系列如Q, L, FX等的数据读取和写入，支持高效率的通讯和控制，广泛应用于三菱自动化设备 ✅ Profibus协议 工业现场总线之间的通信协议 适用于实现自动化设备的分布式控制，特别是在制造和过程控制系统中的应用，支持高速数据交换 ❌ Ethernet/IP协议 以太网基础的工业协议 使用TCP/IP和以太网技术，支持设备信息的交互和控制，适合需要高速通信的应用场景 ❌ OPC UA协议 开放平台通信统一架构 为不同制造设备和控制系统之间提供一种标准化的通信方式，支持跨平台和企业级的信息交换 ❌ CANopen协议 控制器局域网通信协议 用于低速序列通信的设备，如传感器和执行器之间的通信，适用于汽车和其他运输工具的控制系统 ❌ EtherCAT协议 以太网为基础的实时通讯协议 提供快速的系统响应时间和低通信延迟，适合在高性能的机器控制和运动控制应用中使用 ❌ CAN协议 适用于汽车、工业、航空航天、机器人等 CAN协议是通用的，适用于各种应用场景，具有低延时、高可靠性、高通信效率等特点 ❌ CC-Link协议 控制与通信链路 用于机器人和其他自动化设备的快速通信，支持大量设备的数据同步与控制 ❌ 云服务接口 提供云平台数据同步和服务接口 开发云服务接口，使系统能够与云平台进行数据同步和服务集成，支持数据备份、分析和跨平台服务 ❌ 系统维护 系统升级 提供系统软件的在线更新和升级功能 开发一个系统升级机制，支持在线下载和安装更新包，确保系统功能和安全性的持续改进 ❌ 系统自检 在系统启动或运行时进行自检 实现系统自检功能，检查硬件和软件的状态是否正常，确保系统在问题发生前进行预警和修复 ❌ AI模型、聊天 模型训练 模型训练 支持多种机器学习算法的训练，包括深度学习、神经网络等，用于实现自动化控制 ❌ 智能问答 智能问答 网络API调用模型，自然语言处理技术，上下文保持，实现对用户问题进行理解、分析、回答和反馈，项目的疑难解答 ✅ 历史信息 历史信息查询 对历史对话进行查询和查看，保持历史详细的对话记录 ❌ 语音识别和合成 语音识别和合成 语音识别（ASR）将语音转化为文本，语音合成（TTS）将文本转化为语音 ❌ 多模态交互 多模态信息融合 支持多种交互方式，包括文本、语音、图像等，使用户可以通过不同的方式与系统进行交互。 ❌"
  },
  "content/BuildRun.html": {
    "href": "content/BuildRun.html",
    "title": "构建运行 | DataMaster",
    "summary": "构建运行 前言 通讯任务处理流程，系统通过PLC（可编程逻辑控制器）与PC之间的通信，实现数据的读取、增删改查（CRUD）操作以及数据的导出 系统架构概述 事件驱动架构以及分层架构，主要分为以下几个层级： 通信层：负责PLC与PC之间的数据交换 任务处理层：解析通信任务，根据任务标志位执行相应的操作 数据访问层：与数据库进行交互，实现数据的持久化 导出层：处理数据的导出逻辑，将数据导出为Excel文件 日志与错误处理：记录系统运行日志，处理异常情况 接口 未来的所有通讯协议都将遵循这个接口，实现统一的结构体读写功能，通过构建功能的统一契约来支持多态 /// <summary> /// 所有通信协议的统一接口 /// </summary> public interface IProtocol : IDisposable 数据交换 西门子工程结构目录推荐 ├─DataMaster │ ├─DataExchange # 数据交换层 │ │ ├─DataReader # 存放所有数据读取 DB (PC 读取) │ │ └─DataWrite # 存放所有数据写入 DB (PC 写入) │ ├─TaskExecution # 任务执行层 │ │ ├─TaskCompleted # 任务完成写入索引 DB │ │ └─TaskExecution # 任务执行请求读取 DB 数据流逻辑： TaskExecution DB 块： 存放 PLC 向 PC 发出的任务请求 任务索引决定任务状态，索引值变更时触发新的任务 TaskCompleted DB 块： 存放 PC 处理完成后的任务索引 任务完成后 PC 写入与TaskExecution一致的值，仅用于确认读取是否成功 任何请求（PLC -> PC）操作，都应当由 TaskExecution DB 块管理决策 TaskExecution DB 任一索引为 0，PC 将视为无效或复位值，不执行读取操作 操作标志位： 在DataExchange/DataReader读取的数据结构中，往往包含操作标志位 PC 根据读取到的操作标志决定执行对应的增删改查或文件创建等操作 标志位的判断逻辑（CRUD 是指数据库的增删改查操作）： IsCreate(CRUD): 表示是否插入一条新的数据到数据库 IsRead(CRUD): 表示是否通过唯一键或主键从数据库读取数据 IsUpdate(CRUD): 表示是否通过唯一键或主键更新现有数据 IsDelete(CRUD): 表示是否通过唯一键或主键删除指定数据 IsAddOrUpdate(CRUD): 表示是否通过唯一键先判断数据是否存在，如果存在则更新，如果不存在则插入 IsNewFile: 表示是否创建新的Excle文件写入数据，以及追加写入模式 同一时间只能执行一个CRUD操作，例如：如果IsCreate和IsRead同时被置位，则只执行IsCreate"
  },
  "content/Command-line/Docker.html": {
    "href": "content/Command-line/Docker.html",
    "title": "Docker 使用指南 | DataMaster",
    "summary": "Docker 使用指南 前言 Docker 是一款轻量级的容器化平台，提供了高效的应用程序打包、部署和管理解决方案 系统信息查看 # 查看 Docker 版本信息 docker --version docker version # 查看 Docker 环境配置 docker info 镖容器相关操作 列出镖容器 # 列出正在运行的镖容器 docker ps # 列出所有镖容器包括已停止的 docker ps -a 启动和停止镖容器 # 启动镖容器 docker start <container_id|name> # 停止运行中的镖容器 docker stop <container_id|name> # 重命名已存在的容器 docker rename <old_name> <new_name> 限制 CPU 和内存使用 # 限制容器的 CPU 核数 docker run -d --cpus=\"1.5\" <image_name> # 限制容器的内存大小 docker run -d --memory=\"512m\" <image_name> # 限制容器的 CPU 和内存 docker run -d --cpus=\"2\" --memory=\"1g\" <image_name> 删除镖容器 # 删除某个镖容器 docker rm <container_id|name> # 删除所有停止的镖容器 docker container prune 镖容器工作操作 进入镖容器内部 # 使用 bash 进入镖容器 docker exec -it <container_id|name> /bin/bash # 进入 sh 模式 docker exec -it <container_id|name> sh 查看镖容器日志 # 查看镖容器日志 docker logs <container_id|name> # 展示最新的 N 条日志 docker logs --tail N <container_id|name> 镖容镜像相关 列出镜像 # 列出本地存在的镖容镜像 docker images 下载镜像 # 从 Docker Hub 下载镜像 docker pull <image_name:tag> 删除镜像 # 删除某个镜像 docker rmi <image_id> # 删除所有不再使用的镜像 docker image prune 构建镜像 # 通过 Dockerfile 构建镜像 docker build -t <image_name:tag> . 仓库相关 查看空间占用 # 查看 Docker 空间占用情况 docker system df 清理 Docker 无用数据 # 清理无用的镜像，镖容器，缓存等 docker system prune 镖容器网络管理 列出网络 # 查看 Docker 网络列表 docker network ls 创建自定义网络 # 创建桥接网络 docker network create <network_name> 连接和断开网络 # 将容器连接到指定网络 docker network connect <network_name> <container_id|name> # 从网络中断开容器 docker network disconnect <network_name> <container_id|name> 镜像管理进阶 导出与导入镜像 # 将镜像导出到 tar 文件 docker save -o <filename.tar> <image_name:tag> # 导入镜像文件到本地 docker load -i <filename.tar> 镖容器数据管理 数据卷（Volumes）操作 # 创建数据卷 docker volume create <volume_name> # 查看所有数据卷 docker volume ls # 查看指定数据卷详情 docker volume inspect <volume_name> # 删除数据卷 docker volume rm <volume_name> # 清理无用数据卷 docker volume prune 将数据卷挂载到容器 # 挂载数据卷到容器的目录 docker run -d -v <volume_name>:/path/in/container <image_name> 镖容器与宿主机文件共享 绑定宿主机目录 # 将宿主机目录绑定到容器中 docker run -d -v /host/path:/container/path <image_name> 镖容器状态检查 容器的进程和资源监控 # 查看容器内运行的进程 docker top <container_id|name> # 实时监控容器资源使用情况 docker stats 镖容器健康检查 健康状态配置 # 使用健康检查命令启动容器 docker run -d --health-cmd=\"curl --fail http://localhost || exit 1\" --health-interval=10s <image_name> 查看健康状态 # 检查容器健康状态 docker inspect --format='{{.State.Health.Status}}' <container_id|name> 镖容器高级调试 查看容器文件系统 # 导出容器文件系统 docker export -o <container.tar> <container_id|name> # 查看容器的变化文件 docker diff <container_id|name> 镖容器恢复和检查点 容器暂停与恢复 # 暂停容器中的进程 docker pause <container_id|name> # 恢复被暂停的容器 docker unpause <container_id|name> 镖容器命令快捷总结 # 快速启动一个容器 docker run -d --name <container_name> <image_name> # 重启容器 docker restart <container_id|name> # 停止并移除容器 docker stop <container_id|name> && docker rm <container_id|name> # 强制删除所有停止的容器 docker rm $(docker ps -a -q) # 强制删除所有未使用的镜像 docker rmi $(docker images -q) # 查看所有运行的容器资源占用 docker stats"
  },
  "content/Command-line/Git.html": {
    "href": "content/Command-line/Git.html",
    "title": "Git使用指南 | DataMaster",
    "summary": "Git使用指南 前言 Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是为了速度和效率而设计的，具有分支管理系统，容易进行合作开发。 初次安装 下载 Git可以从它的官方网站下载：Git - Downloads。根据你的操作系统（Windows、MacOS、Linux/Unix），选择相应的安装程序下载并安装。 环境变量 安装Git后，确保git命令可以在命令行或终端中全局访问。在大多数情况下，安装程序会自动设置环境变量。你可以通过在命令行或终端中运行以下命令来测试它是否正确安装： git --version 如果看到Git的版本号，表示安装成功，并且环境变量已正确设置。 用户配置 在首次安装Git之后，你需要配置你的用户信息。Git每次提交（commit）都会使用这些信息，它们会被记录在你的提交历史中。 配置用户名： git config --global user.name \"Your Name\" 配置用户邮箱： git config --global user.email \"youremail@example.com\" 这些设置是全局的，会应用到你系统上所有的Git仓库中。如果需要对特定仓库使用不同的用户信息，可以在该仓库目录下运行上述命令，去掉--global标志。 添加SSH密钥到远程仓库 使用SSH密钥可以在不输入用户名和密码的情况下安全地与远程仓库通信。以下是生成SSH密钥并将其添加到远程仓库（以Bitbucket为例）的步骤： 1.生成SSH密钥 生成新的SSH密钥： 使用以下命令生成新的SSH密钥对。当你执行这个命令时，它会创建一个新的SSH密钥对，包括一个私钥和一个公钥。这个命令中的电子邮件地址应该替换为你自己的电子邮件地址，这个电子邮件地址作为一个标签，帮助识别这个密钥。 ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 在执行该命令时，系统会提示输入一个文件保存新生成的SSH密钥对。如果不想使用默认位置（通常是~/.ssh/id_rsa）。如果选择默认位置，以及不需要密码的话，一直按回车键即可。 2.检查是否已存在 cd ~/.ssh ls # 看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key 3.获取ssh key公钥内容（id_rsa.pub） cd ~/.ssh cat id_rsa.pub 复制该内容 4.Bitbucket账号上添加公钥 登录 -> 个人设置（Personal settings）-> 左侧菜单中，安全性（Security）部分，点击“SSH密钥”（SSH keys）-> 点击“添加密钥”（Add key）按钮。 在弹出的对话框中，需要填写两个字段： 标签（Label）：输入一个便于记忆的密钥名称，例如电脑名称或密钥用途。 密钥（Key）：在这个文本框中粘贴之前第三步中复制的公钥内容。 填写完信息后，点击“添加密钥”（Add key）来保存你的SSH公钥到Bitbucket账户 5.验证SSH连接 为了确认SSH设置是否正确，可以通过执行以下命令来测试与Bitbucket的SSH连接： ssh -T git@bitbucket.org 如果一切设置正确，你将看到一条消息，确认已成功通过SSH连接到Bitbucket。 请注意，首次连接到Bitbucket或任何SSH服务器时，可能会看到一个关于主机密钥指纹的确认消息。这是正常的；只需按照提示接受即可继续。 现在，你已经完成了SSH密钥的生成、添加以及验证过程，可以享受无密码安全地与Bitbucket仓库交互的便利了。 常用命令解释 只列出在工作中需要高频次使用的一些命令，其它高级命令请参考Git 官方文档 初始化和克隆仓库 初始化新仓库：在你的项目目录中创建一个新的Git仓库 git init 这个命令会在当前目录下创建一个.git子目录，这个目录包含了仓库的所有元数据 克隆现有仓库：复制一个远程仓库到本地 git clone <repository-url> 例如，要克隆一个GitHub上的仓库，<repository-url>就是该仓库的URL地址。这个命令会在当前目录下创建一个新的目录，名称与仓库同名，其中包含仓库的数据。 查看状态和更改 查看状态：查看当前工作目录和暂存区的状态。 git status 这个命令会告诉你哪些文件被修改了，哪些文件可以提交。 添加文件到暂存区：将工作目录中的更改添加到暂存区，准备下次提交。 git add <file-name> git add . 添加特定文件替换<file-name>为指定的文件名，使用.可以添加当前目录下的所有更改。 提交更改：将暂存区的更改提交到仓库。 git commit -m \"提交信息\" 每次提交都需要一个提交信息，描述你所做的更改。 添加远程仓库 1.添加远程仓库：首先，需要确定远程仓库的URL。然后，使用git remote add命令将远程仓库添加到本地仓库配置中。通常，远程仓库被命名为origin，但这只是一个惯例，可以使用任何名称。 git remote add origin <remote-repository-URL> 例如，如果远程仓库在bitbucket上，<remote-repository-URL>就是该仓库的URL，如git@bitbucket.org:mas-software/communication-protocols-docs.git。 2.验证远程仓库：添加远程仓库后，可以使用git remote -v命令来验证是否正确添加。 git remote -v 这个命令会列出所有配置的远程仓库及其URL，确保origin（或使用的其他名称）指向正确的远程仓库。 3.推送到远程仓库：一旦远程仓库被添加，就可以推送本地分支到远程仓库了。 首次推送并设置上游分支：使用以下命令将您的本地分支推送到远程仓库，并设置远程分支为本地分支的上游（tracking branch）。这样做之后，您就可以在后续的操作中简单地使用git push和git pull。 git push -u origin <branch-name> 这里<branch-name>是想要推送的本地分支名称，通常是main或master，取决于分支命名约定。origin是远程仓库的名称。 推送更改到远程仓库 在提交了本地更改后，下一步是将这些更改推送到远程仓库。这样，团队成员或者你在其他设备上也能看到这些更新。 首次推送本地分支到远程仓库：当首次推送一个本地分支到远程仓库时，需要设置上游分支。这可以通过添加-u选项来完成，它会关联本地分支和远程分支。 git push -u origin <branch-name> 这里<branch-name>是本地分支名称，origin是远程仓库的默认名称。这个命令不仅会推送你的更改，还会设置远程仓库和分支作为默认的上游，以便未来的git pull和git push可以自动同步。 撤销更改 撤销对指定<file-name>文件的修改（未添加到暂存区的修改）： git checkout --<file-name> 将已添加到暂存区指定的<file-name>文件撤回到工作目录： git reset HEAD <file-name> 修改最后一次提交（例如修改提交信息或添加遗漏的更改）： git commit --amend 分支操作 查看本地分支列表： git branch 查看远程分支： git branch -r 从所有远程仓库中获取最新的分支和标签： git fetch --all 获取远程仓库的最新数据的同时删除在远程仓库中已经不存在的本地跟踪的远程分支引用: git fetch --all --prune 定期清理无效的远程引用： git remote prune origin 创建<branch-name>新分支并切换到该分支： git checkout -b <branch-name> 设置远程跟踪： git branch --set-upstream-to=origin/<branch-name> <local-branch-name> 分支创建并设置跟踪： git checkout -b <local-branch-name> origin/<branch-name> 切换到指定<branch-name>分支： git checkout <branch-name> 合并分支 将指定<branch-name>分支合并到当前分支： git merge <branch-name> 处理冲突 在合并发生冲突时，编辑冲突文件，手动解决冲突，然后使用： git add <file-name> git commit -m \"解决冲突\" 来完成合并 拉取与推送 从远程仓库拉取最新更改并合并到当前分支： git pull 将本地分支的更新推送到远程仓库： git push 查看差异 查看工作目录和暂存区的差异： git diff 标签创建 Git标签用于给仓库中某一时刻的状态打上易于记忆的标记，通常用于版本发布。 轻量标签：轻量标签（lightweight）是指向特定提交对象的引用。 git tag v1.0.0 创建一个名为v1.0的轻量标签 附注标签：附注标签是存储在Git数据库中的一个完整对象，它包含标签信息、标签创建者的名字、电子邮件和日期，有一个标签信息，并且可以被签名和验证。 git tag -a v1.0.0 -m \"version 1.0.0 release\" 创建一个名为v1.0.0的附注标签，并附上释放信息version 1.0.0 release。 查看标签 列出所有标签：显示仓库中的所有标签。 git tag 查看标签信息：查看附注标签的详细信息。 git show v1.0.0 推送标签到远程仓库 推送特定标签到远程仓库： git push <remote-name> <tagname> 将本地的特定标签推送到远程仓库。 推送所有本地标签到远程仓库： git push <remote-name> --tags 一次性将所有本地标签推送到远程仓库。 拉取远程仓库的最新信息包括所有分支的信息 这包括所有分支的信息： git fetch origin 本地创建并切换新分支 git checkout -b <branch-name> origin/<branch-name> 这条命令会创建一个名为<branch-name>的新本地分支，并将其设置为跟踪远程的origin/<branch-name>分支。 提交修改 更正提交信息 修改上一次的提交信息, 提交将会被更新 git commit --amend -m \"\uD83D\uDE80 添加Aes加密服务测试\" 这是对历史提交的修改，需要使用强制推送来更新远程仓库 git push --force 分支创建与合并 分支是Git仓库中的一个重要概念，它允许你创建一个独立的开发路径，而不会影响主分支 创建并切换到新分支 git checkout -b test 这个命令会创建一个名为test的新分支，并自动切换到这个分支上 拉取远程main分支的更新 在test分支上，如果你想要拉取远程main分支的最新更改，可以先切换回main分支，然后拉取更新，最后再切换回test分支并合并main分支的更改： git checkout main git pull origin main git checkout test git merge main 创建远程test分支并推送更改 在test分支上完成更改后，如果想要将这些更改推送到远程仓库，并创建远程的test分支，可以使用以下命令: git push -u origin test 这个命令不仅推送更改，还会设置本地的test分支追踪远程的test分支 合并test分支到main分支 当你完成了在test分支上的工作，并且准备将更改合并回main分支时，首先确保main分支是最新的，然后合并test分支： 普通合并： test上的所有提交信息都会被合并到main分支中 git checkout main git pull origin main git merge test git push origin main 精简合并： 这样做的好处是可以保持 main 分支的历史更加干净和整，只会看到一个代表性的提交信息，不会显示test中的历史提交信息 git checkout main git pull origin main git merge --squash test git commit -m \"全新2.0版本....\" git push origin main 如果在合并过程中遇到冲突，Git会提示你解决这些冲突。冲突解决后，你需要手动提交这次合并: git add . git commit -m \"解决了从test分支到main分支的合并冲突\" 如果是在本地解决的冲突，并且已经准备好将这些更改推送到远程仓库，可以使用git push命令将这次合并的结果推送 删除分支 删除本地分支 git branch -d <分支名> 强制删除（确保已经合并且不再需要，操作不可逆） git branch -D <分支名> 删除远程分支 git push origin --delete <分支名> 更改分支名 将当前的分支名改为test-v2： git branch -m test-v2 同步本地仓库与远程主分支 在需要放弃本地所有更改，完全同步远程仓库时使用的操作 1.添加远程仓库： git remote add origin <仓库地址> 2.拉取远程仓库内容并覆盖本地： git fetch origin main # 从远程仓库获取最新的代码，但不自动合并到当前工作目录 git reset --hard origin/main # 强制重置当前分支的头部到远程分支，同时重置工作日录和索引(暂存区)，以匹配远程分支 状态重置 确保处于正确分支 git checkout main 获取远程分支的最新状态 git fetch origin 将本地的main分支重置为远程仓库的main分支当前的状态，同时丢弃所有本地的更改 git reset --hard origin/main 清理未跟踪的文件和目录 git clean -fd 交互式变基 将多个提交合并为一个提交是交互式变基（interactive rebase）非常有用的一个功能，这样做可以帮助保持项目历史的整洁 pick: 保留该提交。选择 pick 表示你希望该提交保持在历史中，不进行任何更改 reword: 保留提交，但修改提交信息。这允许你更新提交的描述，而不更改代码内容 edit: 暂停 rebase，允许你修改该提交。这不仅可以更改提交信息，还可以修改提交中的代码。Git 将在这个提交时停下来，让你做任何必要的修正 squash: 将此提交与前一个提交合并，并允许编辑新提交的消息。这意味着当前提交的更改将被整合到前一个提交中，但你可以编辑一个新的提交信息来反映合并后的更改 fixup: 将此提交与前一个提交合并，但放弃此提交的消息。这与 squash 类似，但不会要求你编辑合并后的提交信息。原本的提交信息将被丢弃 drop: 删除提交。这会从历史中完全移除该提交，包括它的提交信息和所有相关的代码更改。使用这个命令需要特别小心，以免意外删除重要代码 squash 使用 1.确保本地的 main 分支是最新的： git checkout main git pull origin main 2.开始交互式变基： git rebase -i HEAD~10 # 10为需要合并的提交数 这将打开一个文本编辑器，显示最近的提交列表,每个提交前都有一个命令（默认是pick），可以修改这些命令 3.合并提交： 在编辑器中，你会看到一系列的提交，每个提交前都有pick字样。要合并这些提交，只需要将除了第一个提交之外的其他提交前的pick改为squash或s。这样做会将这些提交合并到第一个提交中。例如有10个提交，都是小改动，并且想将它们合并到一个“修复了这个bug”的提交中，可以这样操作： pick f7f3f6d 改动 1 squash 310154e 改动 2 squash a5f4a0d 改动 3 squash 7e4fcbd 改动 4 squash f7f3f6d 改动 5 squash 310154e 改动 6 squash a5f4a0d 改动 7 squash 7e4fcbd 改动 8 squash f7f3f6d 改动 9 squash 310154e 改动 10 在合并过程中，Git将让你有机会编辑新的提交信息，以反映这次大的修改 4.完成变基： 保存并关闭编辑器后，Git将自动开始合并过程。如果有冲突，你需要解决这些冲突 5.强制推送到远程仓库： 合并完成后，需要使用强制推送将这些更改应用到远程仓库 git push origin main --force 结语 这些命令是Git的基础，掌握它们可以让你有效地管理和维护代码版本。Git的命令非常多，具体使用哪些命令取决于你的项目需求和工作流程"
  },
  "content/Command-line/MySQL.html": {
    "href": "content/Command-line/MySQL.html",
    "title": "MySQL 命令行操作 | DataMaster",
    "summary": "MySQL 命令行操作 基本连接与退出 连接MySQL服务器 mysql -u 用户名 -p 指定主机和端口连接 mysql -h 主机地址 -P 端口号 -u 用户名 -p 退出MySQL命令行 exit; -- 或 quit; -- 或 \\q 数据库操作 显示所有数据库 show databases; 创建数据库 CREATE DATABASE 数据库名; 选择数据库 USE 数据库名; 删除数据库 DROP DATABASE 数据库名; 表操作 创建表 CREATE TABLE 表名 ( 列名1 数据类型 [约束], 列名2 数据类型 [约束], ... ); 示例： CREATE TABLE users ( id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); 显示当前数据库中的所有表 show TABLES; 查看表结构 DESCRIBE 表名; -- 或 DESC 表名; 删除表 DROP TABLE 表名; 数据操作 插入数据 INSERT INTO 表名 (列名1, 列名2, ...) VALUES (值1, 值2, ...); 示例： INSERT INTO users (username, email) VALUES ('john', 'john@example.com'); 查询数据 SELECT 列名 FROM 表名 [WHERE 条件]; 示例： SELECT * FROM users; SELECT username, email FROM users WHERE id = 1; 更新数据 UPDATE 表名 SET 列1 = 值1, 列2 = 值2,... WHERE 条件; 示例： UPDATE users SET email='new@example.com' WHERE id = 1; 删除数据 DELETE FROM 表名 WHERE 列名 = 值; 示例： DELETE FROM users WHERE id = 1; 用户与权限管理 创建用户 CREATE USER '用户名'@'主机' IDENTIFIED BY '密码'; 示例： CREATE USER 'new_user'@'localhost' IDENTIFIED BY 'secure_password'; 显示所有用户 SELECT user, host FROM mysql.user; 修改用户密码 ALTER USER '用户名'@'主机' IDENTIFIED BY '新密码'; 示例： ALTER USER 'new_user'@'localhost' IDENTIFIED BY 'new_password'; 删除用户 DROP USER '用户名'@'主机'; 示例： DROP USER 'new_user'@'localhost'; 授予权限 GRANT 权限 ON 数据库名.表名 TO '用户名'@'主机'; 示例： -- 允许查询数据 GRANT SELECT, INSERT ON mydatabase.* TO 'new_user'@'localhost'; -- 授予所有权限 GRANT ALL PRIVILEGES ON mydatabase.* TO 'new_user'@'localhost'; 权限列表 数据库级别权限： 权限名称 描述 ALL PRIVILEGES 授予所有权限（除GRANT OPTION外） CREATE 允许创建数据库和表 DROP 允许删除数据库、表和视图 ALTER 允许修改表结构 SELECT 允许查询数据 INSERT 允许插入数据 UPDATE 允许更新数据 DELETE 允许删除数据 INDEX 允许创建和删除索引 REFERENCES 允许创建外键约束 管理类权限： 权限名称 描述 GRANT OPTION 允许用户将自己的权限授予其他用户 SUPER 允许使用管理员级命令（如CHANGE MASTER, KILL等） PROCESS 允许查看所有正在运行的进程 RELOAD 允许执行FLUSH操作 特殊权限： 权限名称 描述 CREATE USER 允许创建、删除和重命名用户 SHOW DATABASES 允许查看所有数据库列表 LOCK TABLES LOCK TABLES REPLICATION 允许主从复制相关操作 权限作用范围说明： -- 1. 全局权限（*.*） GRANT SELECT ON *.* TO 'user'@'host'; -- 2. 数据库级别权限（database.*） GRANT ALL ON mydb.* TO 'user'@'host'; -- 3. 表级别权限（database.table） GRANT SELECT ON mydb.mytable TO 'user'@'host'; -- 4. 列级别权限 GRANT SELECT(col1,col2) ON mydb.mytable TO 'user'@'host'; -- 5. 存储过程和函数权限 GRANT EXECUTE ON PROCEDURE mydb.myproc TO 'user'@'host'; 查看用户权限 SHOW GRANTS FOR '用户名'@'主机'; 示例： SHOW GRANTS FOR 'new_user'@'localhost'; 撤销权限 REVOKE 权限 ON 数据库名.表名 FROM '用户名'@'主机'; 示例： REVOKE INSERT ON mydatabase.* FROM 'new_user'@'localhost'; 索引操作 创建索引 CREATE INDEX 索引名 ON 表名 (列名); 示例： CREATE INDEX idx_username ON users (username); 创建唯一索引 CREATE UNIQUE INDEX 索引名 ON 表名 (列名); 示例： CREATE UNIQUE INDEX idx_email ON users (email); 查看索引 SHOW INDEX FROM 表名; 删除索引 DROP INDEX 索引名 ON 表名; 示例： DROP INDEX idx_username ON users; 事务管理 事务（Transaction）是数据库中一组操作的集合，这些操作要么全部成功执行，要么全部不执行（回滚）。事务的目的是确保数据的一致性和完整性，特别是在多个操作可能相互依赖的情况下 Atomicity（原子性）：事务中的所有操作要么全部完成，要么全部不完成 Consistency（一致性）：事务执行前后，数据库的状态保持一致 Isolation（隔离性）：事务之间互不干扰 Durability（持久性）：事务一旦提交，数据永久保存 开启事务 START TRANSACTION; 提交事务 COMMIT; 回滚事务 ROLLBACK; 示例 START TRANSACTION; INSERT INTO users (username, email) VALUES ('alice', 'alice@example.com'); UPDATE users SET email = 'alice_new@example.com' WHERE username = 'alice'; -- 如果成功 COMMIT; -- 如果失败 ROLLBACK; 数据备份与恢复 备份数据库 mysqldump -u 用户名 -p 数据库名 > 备份文件.sql 示例： mysqldump -u root -p mydatabase > mydatabase_backup.sql 恢复数据库 mysql -u 用户名 -p 数据库名 < 备份文件名.sql 示例： mysql -u root -p mydatabase < mydatabase_backup.sql 常用查询操作 排序查询 SELECT 列名 FROM 表名 ORDER BY 列名 [ASC|DESC]; 示例： SELECT * FROM users ORDER BY created_at DESC; 分组查询 SELECT 列名, 聚合函数 FROM 表名 GROUP BY 列名; 示例： SELECT COUNT(*) AS user_count, created_at FROM users GROUP BY DATE(created_at); 限制查询结果数量 SELECT 列名 FROM 表名 LIMIT 数量; 示例： SELECT * FROM users LIMIT 5; 分页查询 SELECT 列名 FROM 表名 LIMIT 数量 OFFSET 偏移量; 示例： SELECT * FROM users LIMIT 10 OFFSET 20; -- 跳过前20条，获取10条 其他实用命令 查看当前数据库 SELECT DATABASE(); 查看 MySQL 版本 SELECT VERSION(); 查看当前用户 SELECT USER(); 设置字符集 SET NAMES utf8mb4; 设置客户端、连接和结果的字符集为utf8mb4，确保支持多语言和表情符号 等效于设置character_set_client、character_set_connection和character_set_results 查看表创建语句 SHOW CREATE TABLE 表名; 显示指定表的创建语句，包括字段定义、索引、字符集等 表的完整CREATE TABLE语句，适合备份或迁移表结构 清空表数据（保留结构） TRUNCATE TABLE 表名; 删除表中的所有数据，但保留表结构、索引和约束 比DELETE FROM表名; 更快，但无法回滚，且会重置AUTO_INCREMENT计数器 执行 sql 文件 source 文件名.sql; -- 或 \\. 文件名.sql; 从指定 SQL 文件中执行命令，常用于批量导入数据或运行脚本 查看当前连接数 SHOW STATUS LIKE 'Threads_connected'; 显示当前数据库服务器已打开的连接数 重置自增计数器 ALTER TABLE 表名 AUTO_INCREMENT = 1; 在清空表或调整数据后重新开始自增 ID 性能优化相关 分析查询性能 EXPLAIN SELECT 列名 FROM 表名 WHERE 条件; 示例： EXPLAIN SELECT * FROM users WHERE username = 'john'; 查看运行状态 SHOW STATUS; 优化表 OPTIMIZE TABLE 表名; 配置 MySQL 允许远程访问 在同一局域网内，电脑 B 需要访问电脑 A 上的 MySQL 数据库 MySQL配置文件（my.ini）通常位于安装目录的data文件夹或默认配置路径，找到 [mysqld] 部分 # 允许监听所有IP（危险！仅限内网环境） [mysqld] bind-address = 0.0.0.0 运行services.msc重启 MySql 服务器 检查用户权限 SELECT user, host FROM mysql.user; 授权 IP 允许192.168.1.20的 DBA 客户端完全访问 CREATE USER '用户名'@'192.168.1.20' IDENTIFIED BY '密码'; GRANT ALL PRIVILEGES ON *.* TO '用户名'@'192.168.1.20' WITH GRANT OPTION; 允许192.168.1.%网段的应用服务器只读访问 CREATE USER '用户名'@'192.168.1.%' IDENTIFIED BY '密码'; GRANT SELECT ON 数据库名.* TO '用户名'@'192.168.1.%'; 将 root 账户的 Host 字段从 localhost 修改为 %，从而允许 root 账户从任意 IP 连接 MySQL UPDATE mysql.user SET Host = '%' WHERE User = 'root'; 权限生效 FLUSH PRIVILEGES; -- 刷新权限缓存"
  },
  "content/DataBase/HowUse.html": {
    "href": "content/DataBase/HowUse.html",
    "title": "食用方法 | DataMaster",
    "summary": "食用方法 数据库安装 MySQL 1.为了支持项目的数据管理需求，需要安装 MySQL 数据库，一般的，数据库默认端口是3306 访问MySQL安装选择 8.4.2 LTS安装程序，安装提示安装即可 2.配置环境变量以方便从命令行访问 MySQL 找到MySQL的安装目录，MySQL的二进制文件通常位于bin子目录下，如C:\\Program Files\\MySQL\\MySQL Server 8.4\\bin 在Windows中，打开控制面板 -> 系统 -> 高级系统设置 -> 环境变量 在系统变量区域中找到并编辑Path变量 添加MySQL的bin目录路径到列表中（例如：C:\\Program Files\\MySQL\\MySQL Server 8.4\\bin）点击“确定”保存更改 启动命令提示符键入mysql -u root -p验证 3.配置数据库 在MySQL中创建所需的数据库和表，可选择下载可视化应用程序MySQL Workbench或直接使用命令行，参见MySQL 4.更新应用配置 确保应用程序配置中的数据库连接字符串以及通讯配置正确 确保创建名为EquipmentManagement的默认数据库 CREATE DATABASE EquipmentManagement; 5.构建和运行项目 使用Visual Studio或你的IDE打开项目 检查并恢复所有NuGet包依赖 F5或Ctrl + F5运行，如果不出意外的话 数据库的环境变量密码 使用环境变量： 安全性：避免在源代码中硬编码敏感信息，降低数据泄露的风险 灵活性：便于在不同的部署环境中使用不同的凭证，无需修改代码 可维护性：集中管理敏感配置，方便跟踪和更新 设置环境变量 1.永久设置：使用setx命令在系统级别设置环境变量 setx DB_PASSWORD \"数据库密码\" 这将全局设置环境变量，对所有新开启的命令行窗口有效 必须以管理员身份运行命令行工具来设置系统级环境变量 2.会话设置：使用 set 命令仅在当前命令行会话中设置环境变量 set DB_PASSWORD=\"数据库密码\" 这种设置在当前命令行窗口关闭后失效 更新环境变量密码 setx DB_PASSWORD \"新的数据库密码\" 当需要更改密码时，只需要再次使用 setx 命令对原有的 DB_PASSWORD 变量修改 验证设置 echo $env:DB_PASSWORD 成功设置环境变量后，这应该输出设置的数据库密码 使用环境变量 string dbPassword = Environment.GetEnvironmentVariable(\"DB_PASSWORD\") ?? \"MAS63626189\"; 注意事项：第一次创建时，这些变量可能不会自动地传递到调试环境中，重启IDE即可 注意事项 不建议在类的生命周期内保持一个长期打开的数据库连接 在每次操作时创建新的连接，连接池会管理底层的物理连接，所以频繁创建和销毁连接对象不会带来性能问题 使用using块以确保连接被正确处置，避免长时间保持连接 正确的连接管理对于资源优化、防止连接泄漏和确保应用程序中的线程安全 尽可能晚地打开数据库连接并在完成后立即关闭它 MySQL的连接可以被视为相对轻量级，尤其是在使用了连接池之后，连接池能有效减少因为频繁创建和销毁连接带来的开销 确保在处理可能更改数据的操作时正确使用事务，事务应该保证操作的原子性、一致性、隔离性和持久性 使用合适的隔离级别来防止读取异常、脏读、不可重复读和幻读 使用参数化查询以防止SQL注入攻击 禁止使用触发器、函数、存储过程 制定备份计划，并定期备份数据库，以防止数据丢失 MySQL 中的 DDL 语句与事务 在 MySQL 中，大多数DDL(用于定义和修改数据库的结构而不是操作具体的数据内容)语句（如CREATE TABLE、ALTER TABLE、DROP TABLE等）会导致隐式提交（Implicit Commit）。这意味着： 隐式提交：执行 DDL 语句时，当前事务会自动提交，即使您在事务内执行这些语句，事务也无法回滚这些操作 事务无效：由于 DDL 语句会自动提交，包裹这些语句的事务无法确保原子性（即要么全部成功，要么全部失败）"
  },
  "content/DataBase/Trigger.html": {
    "href": "content/DataBase/Trigger.html",
    "title": "触发器 | DataMaster",
    "summary": "触发器 前言 触发器（Trigger）是数据库中的一种特殊类型的存储过程，它与特定的表相关联，并在某些预定义的事件（如插入、更新或删除数据）发生时自动执行。触发器通常用于实现复杂的业务逻辑、确保数据完整性或记录操作历史 触发器的类型 触发器可以根据触发时机和事件类型进行分类： 按触发时机分类 BEFORE 触发器：在数据操作（INSERT、UPDATE、DELETE）执行之前触发，常用于数据验证或修改 AFTER 触发器：在数据操作执行之后触发，常用于记录日志或更新相关数据 按触发事件分类 INSERT：在向表中插入新记录时触发 UPDATE：在表中记录更新时触发 DELETE：在表中记录删除时触发 触发器的应用场景 数据验证：在插入或更新数据前，检查是否满足特定条件 数据一致性：自动更新相关表的数据，保持数据库的一致性 日志记录：记录数据的变更历史，用于审计或追踪 业务逻辑：在数据操作时执行特定任务，例如发送通知或更新统计信息 创建触发器的语法 CREATE TRIGGER trigger_name {BEFORE | AFTER} {INSERT | UPDATE | DELETE} ON table_name FOR EACH ROW BEGIN -- 触发器执行的 SQL 语句 END; 语法说明： trigger_name：触发器的名称，需唯一 BEFORE | AFTER：触发时机，决定是在操作前还是操作后执行 INSERT | UPDATE | DELETE：触发的事件类型 table_name：触发器关联的表名 FOR EACH ROW：表示触发器为行级触发器，每操作一行触发一次 BEGIN ... END：触发器的逻辑代码块 示例：更新计数触发器 以下是一个在productinfo表中创建触发器，用于在更新UpdatedDate字段时自动增加UpdateCount字段的值： ALTER TABLE productinfo ADD COLUMN IF NOT EXISTS UpdateCount INT DEFAULT 0 COMMENT '更新次数'; DELIMITER // CREATE TRIGGER update_count_trigger_productinfo BEFORE UPDATE ON productinfo FOR EACH ROW BEGIN IF NEW.UpdatedDate != OLD.UpdatedDate THEN SET NEW.UpdateCount = OLD.UpdateCount + 1; END IF; END; // DELIMITER ; 示例解释 创建字段：如果 UpdateCount 字段不存在，则创建该字段 触发时机：BEFORE UPDATE，在更新操作前执行 逻辑：如果 UpdatedDate 发生变化，则将 UpdateCount 加 1 NEW 和 OLD：NEW 表示更新后的数据，OLD 表示更新前的数据 触发器的优缺点 优点 自动化：无需应用程序干预，自动执行逻辑 一致性：帮助维护数据的完整性和一致性 透明性：对应用程序透明，无需修改现有代码 缺点 性能影响：每次操作都会执行触发器，可能降低性能 复杂性：触发器逻辑难以调试和维护 隐蔽性：触发器的行为可能不明显，易引发意外问题 管理触发器 查看触发器 SHOW TRIGGERS; 删除触发器 DROP TRIGGER trigger_name; 最佳实践 明确目的：使用触发器时要有明确的目标，避免滥用 性能优化：评估触发器对性能的影响，尤其在高并发场景下 文档记录：在数据库文档中注明触发器的功能和作用 充分测试：部署前测试触发器逻辑，确保其正常运行 结语 触发器是数据库中一项强大的功能，可以在特定事件发生时自动执行预定义的逻辑。它在数据验证、一致性维护和日志记录等方面表现出色。然而，由于其可能带来的性能开销和维护复杂性，使用时需谨慎设计并遵循最佳实践"
  },
  "content/DevelopDoc/Timers.html": {
    "href": "content/DevelopDoc/Timers.html",
    "title": ".NET 定时器详解与使用 | DataMaster",
    "summary": ".NET 定时器详解与使用 本文档详细介绍 .NET 框架中提供的定时器（Timer），包括其用途、特点、使用场景、注意事项以及示例代码。开发者可根据需求选择合适的定时器 概述 .NET 提供了以下包括但不限于三种定时器，每种针对特定场景设计： System.Timers.Timer：基于事件的定时器，适合多线程后台任务 System.Threading.Timer：基于线程池的轻量级定时器，适合高性能任务 System.Windows.Threading.DispatcherTimer：专为 WPF 应用程序设计的 UI 线程定时器 System.Timers.Timer 用途 System.Timers.Timer是一个基于服务器的、通用的事件驱动定时器，设计用于多线程环境。它适合在后台执行周期性任务，常用于服务端应用程序、Windows 服务、控制台程序或任何需要独立于 UI 线程执行定时逻辑的场景 特点 线程安全：设计为多线程安全，适合并发场景 事件驱动：通过 Elapsed 事件触发定时任务 自动重置：支持 AutoReset 属性，控制定时器是单次触发还是循环触发 灵活性：支持设置间隔（Interval）、启用/禁用（Enabled）等 使用场景 定期检查系统状态（如监控服务） 定时执行后台任务（如日志清理、数据同步） 需要线程安全的高可靠性任务 注意事项 Elapsed 事件可能在不同线程上触发，需注意线程同步（如更新 UI 时需使用 Invoke） 如果 AutoReset 为 false，定时器在触发一次后停止 确保在程序退出时调用Dispose释放资源 示例代码 using System; using System.Timers; public class Program { public static void Main() { // 间隔 2000 毫秒 using Timer timer = new(2000) { AutoReset = true, // 循环触发 SynchronizingObject = null // 线程池线程 }; timer.Elapsed += (s, e) => Console.WriteLine($\"触发：{e.SignalTime}\"); timer.Start(); Console.WriteLine(\"按任意键退出...\"); Console.ReadKey(); } } System.Threading.Timer 用途 System.Threading.Timer是一个轻量级的、基于线程池的定时器，设计用于高性能场景。它通过回调函数执行定时任务，适合需要高效、低开销的后台任务，不依赖于事件模型 特点 轻量级：基于线程池，无需额外线程管理 回调驱动：通过用户提供的回调函数执行任务 灵活调度：支持初始延迟和周期性间隔 非事件模型：相比System.Timers.Timer，没有事件订阅机制 使用场景 高性能的后台任务（如定时清理缓存） 不需要复杂事件处理的简单定时任务 嵌入式或资源受限环境中需要高效定时器 注意事项 回调在线程池线程上执行，需确保线程安全 不支持像System.Timers.Timer那样的自动重置属性，需通过回调逻辑控制 必须手动调用Dispose或Change方法停止定时器 不适合 UI 相关的任务，因为回调不在 UI 线程上 示例代码 using System; using System.Threading; public class Program { public static void Main() { // 首次延迟1秒，之后每2秒执行一次 using Timer timer = new Timer(state => { Console.WriteLine($\"触发：{DateTime.Now}\"); }, null, 1000, 2000); Console.WriteLine(\"按任意键退出...\"); Console.ReadKey(); } } System.Windows.Threading.DispatcherTimer 用途 System.Windows.Threading.DispatcherTimer是为 WPF 应用程序设计的定时器，用于在 UI 线程上执行定时任务。它通过 WPF 的调度器（Dispatcher）运行，适合需要更新 WPF UI 元素的场景 特点 UI 线程执行：所有回调在 WPF 的 Dispatcher 线程上运行 调度器集成：与 WPF 的 Dispatcher 体系紧密集成 优先级支持：可设置 Dispatcher 优先级，控制任务执行顺序 简单易用：通过 Tick 事件处理定时逻辑 使用场景 定时更新 WPF 界面元素（如实时数据显示） 实现 WPF 动画或动态效果 需要与 WPF 控件交互的定时任务 主要事项 仅适用于 WPF 应用程序，不适合其他场景 如果 Dispatcher 线程繁忙，可能导致定时器延迟 确保在窗口关闭时停止定时器以避免资源泄漏 定时器精度受限于 Dispatcher 的调度机制 最小间隔约10-15ms（取决于系统） 示例代码 using System; using System.Windows; using System.Windows.Threading; public partial class MainWindow : Window { private DispatcherTimer timer; public MainWindow() { InitializeComponent(); timer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(1) // 间隔 1 秒 }; timer.Tick += (s, e) => Console.WriteLine($\"触发：{DateTime.Now}\"); timer.Start(); } }"
  },
  "content/MAS-Communication/McCommunication.html": {
    "href": "content/MAS-Communication/McCommunication.html",
    "title": "三菱通讯构建设计 | DataMaster",
    "summary": "三菱通讯构建设计 MC协议简介 三菱 PLC 的开放通信协议，支持以太网、串口通信 3E帧格式：3E帧格式是最常用的通讯格式，由三个字节的帧头、一个字节的设备地址、一个字节的功能码、一个字节的数据长度、若干字节的数据和两个字节的CRC校验码组成 3C帧格式：3C帧格式与3E帧格式相似，不同之处在于帧头由两个字节组成，其余部分与3E帧格式一致 4C帧格式：4C帧格式与3C帧格式类似，但加入了一个扩展位，表示数据是否需要加密 4E帧格式：4E帧格式是一种高速通讯格式，由四个字节的帧头、一个字节的设备地址、一个字节的功能码、一个字节的数据长度、若干字节的数据和两个字节的CRC校验码组成 数据类型映射表 .NET类型 大小 PLC存储方式 备注 bool 1 bit M寄存器单个位 每个 bool 值对应一个 M 寄存器中的单个位 short 2 字节 D寄存器1个字 使用 D 寄存器来存储 16 位整数 int 4 字节 D寄存器连续2个字 使用 D 寄存器的连续两个字存储 32 位整数 float 4 字节 D寄存器连续2个字 将浮点数映射为两个 D 寄存器，表示 32 位浮点数 double 8 字节 D寄存器连续4个字 使用 4 个 D 寄存器表示 64 位浮点数 byte 1 字节 D寄存器低8位 字节映射到 D 寄存器的低8位 结构体定义规范 使用紧凑内存布局，映射到 PLC 寄存器中的 D： [StructLayout(LayoutKind.Sequential, Pack = 1)] public struct SampleStruct { public short AxisSpeed; // 占 2 字节 -> 1 个 D 寄存器 -> D1000 public int Position; // 占 4 字节 -> 2 个 D 寄存器 -> D1001, D1002 public bool IsEnabled; // 占 1 位 -> D1003 的第一个位（0 ~ 15 位） 即 D1003.0 public double SpeedFactor; // 占 8 字节 -> 4 个 D 寄存器 -> D1004, D1005, D1006, D1007 [MitsubishiString(20)] public string ProductId; // 占用 10 个字节，映射到 D1008 ~ D1012 } 字节处理规则 使用小端字节序：低位字节存储在低地址，高位字节存储在高地址 位字段处理： 多个 bool 打包到连续字节 一个 bool 类型需要占 0.125 字节 bool 考虑字节对齐的问题，即不足 2 字节将补齐 ASCII 编码中，每个字符占用 1 个字节，一个 D 寄存器可以存 2 个字节 附加说明： MitsubishiString特性可以指定字符串的长度和对应的D寄存器映射 字符串长度与D寄存器数量的映射关系：每个D寄存器保存2个字节（即两个字符） 构建示例 任务执行请求结构体 读取起始地址为 D1000： public struct TaskHandlerStruct { [TaskField(0, \"EquipmentDataStruct\")] public short ReadEquipmentData; // 读取设备信息 -> D1000 [TaskField(1, \"ProductInfoStruct\")] public short ReadProductInfo; // 读取产品信息 -> D1001 [TaskField(2, \"MixedDataStruct\")] public short ReadMixedData; // 包含各种数据类型的示例 -> D1002 // 依葫芦画瓢 ... } 任务完成写入结构体 写入起始地址为 D2000： // 结构体复用 TaskHandlerStruct public struct TaskHandlerStruct { [TaskField(0, \"EquipmentDataStruct\")] public short ReadEquipmentData; // 读取设备信息完成 -> D2000 [TaskField(1, \"ProductInfoStruct\")] public short ReadProductInfo; // 读取产品信息完成 -> D2001 [TaskField(2, \"MixedDataStruct\")] public short ReadMixedData; // 包含各种数据类型的示例完成 -> D2002 // 依葫芦画瓢 ... } 数据读取结构体 读取起始地址为 D3000： /// <summary> /// 设备信息 /// </summary> public struct EquipmentDataStruct { public bool IsCreate; // 是否创建(CRUD) -> D3000.0 public bool IsRead; // 是否读取(CRUD) -> D3000.1 public bool IsUpdate; // 是否更新(CRUD) -> D3000.2 public bool IsDelete; // 是否删除(CRUD) -> D3000.3 public bool IsAddOrUpdate; // 是否添加或更新(CRUD) -> D3000.4 public bool IsNewFile; // 是否新建文件 -> D3000.5 [MitsubishiString(20)] public string EquipmentName; // 设备的名称 -> D3001 ~ D3010 [MitsubishiString(20)] public string EquipmentType; // 设备类型 -> D3011 ~ D3020 [MitsubishiString(50)] public string SerialNumber; // 设备的序列号，唯一 -> D3021 ~ D3045 [MitsubishiString(10)] public string Status; // 设备当前的操作状态 -> D3046 ~ D3050 [MitsubishiString(20)] public string Manufacturer; // 设备的制造商 -> D3051 ~ D3060 [MitsubishiString(50)] public string Model; // 设备型号 -> D3061 ~ D3085 [MitsubishiString(50)] public string Location; // 设备的安装位置 -> D3086 ~ D3110 [MitsubishiString(50)] public string Notes; // 关于设备的额外注释或详细信息 -> D3111 ~ D3135 } /// <summary> /// 产品信息 /// </summary> public struct ProductInfoStruct { public bool IsCreate; // 是否创建(CRUD) -> D3146.0 public bool IsRead; // 是否读取(CRUD) -> D3146.1 public bool IsUpdate; // 是否更新(CRUD) -> D3146.2 public bool IsDelete; // 是否删除(CRUD) -> D3146.3 public bool IsAddOrUpdate; // 是否添加或更新(CRUD) -> D3146.4 public bool IsNewFile; // 是否新建文件 -> D3146.5 public short EquipmentId; // 设备唯一标识符，外键，关联到 EquipmentData 表 -> D3147 [MitsubishiString(20)] public string ProductId; // 产品Id，唯一 -> D3148 ~ D3157 [MitsubishiString(20)] public string ProductCode; // 产品编码 -> D3158 ~ D3167 [MitsubishiString(20)] public string RecipeId; // 产品配方ID -> D3168 ~ D3177 [MitsubishiString(20)] public string ProductName; // 产品名称 -> D3178 ~ D3187 [MitsubishiString(20)] public string Category; // 产品类别 -> D3188 ~ D3197 [MitsubishiString(50)] public string Notes; // 额外注释或详细信息 -> D3198 ~ D3222 } /// <summary> /// 包含各种数据类型的示例 /// </summary> public struct MixedDataStruct { public bool IsCreate; // 是否创建(CRUD) -> D3233.0 public bool IsRead; // 是否读取(CRUD) -> D3233.1 public bool IsUpdate; // 是否更新(CRUD) -> D3233.2 public bool IsDelete; // 是否删除(CRUD) -> D3233.3 public bool IsAddOrUpdate; // 是否添加或更新(CRUD) -> D3233.4 public bool IsNewFile; // 是否新建文件 -> D3233.5 public short Id; // 2 字节 -> D3234, D3235 public float Temperature; // 4 字节 -> D3236 ~ D3239 public double Pressure; // 8 字节 -> D3240 ~ D3247 public int Volume; // 4 字节 -> D3248 ~ D3251 public bool IsActive; // 1 位 -> D3233.6，注：根据字节处理规则 public bool IsAlarm; // 1 位 -> D3233.7，注：根据字节处理规则 public bool IsOperational; // 1 位 -> D3233.8，注：根据字节处理规则 public bool IsError; // 1 位 -> D3233.9，注：根据字节处理规则 [MitsubishiString(20)] public string DeviceName; // 20 字节 -> D3252 ~ D3271 [MitsubishiString(50)] public string ManufacturerName; // 50 字节 -> D3272 ~ D3321 } 附加说明： ProductInfoStruct从D3146开始，这是因为EquipmentDataStruct结束在D3135，并且根据为未来的扩展字段预留了10个D寄存器的空间（即 D3136 到 D3145） TaskField 的顺序决定了数据读取结构体在 PLC 中的分配先后 [TaskField(0, \"EquipmentDataStruct\")] 表示索引为 0 的EquipmentDataStruct是第一个要分配的结构体，起始地址设定为 D3000 [TaskField(1, \"ProductInfoStruct\")] 表示索引为 1 的ProductInfoStruct是第二个要分配的结构体，顺次排在EquipmentDataStruct之后，起始地址为 D3146 [TaskField(2, \"MixedDataStruct\")] 表示索引为 2 的MixedDataStruct是第三个要分配的结构体，顺次排在ProductInfoStruct之后，起始地址为 D3233 因此，在修改或扩展任务字段时，应特别注意保持已有字段的顺序，以免造成地址映射混乱 构建生成的索引 设 ReadDataAdr 是 3000： 结构体名称 大小(bytes) 计算后的索引（偏移） 计算方式 最终地址 EquipmentDataStruct 272 0 第一个结构体，偏移 = 0 D3000 ~ D3135 ProductInfoStruct 154 146 (272(上一个结构体大小) / 2) + 10(固定预留) D3146 ~ D3222 TaskIndex: 0, Size: 272 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.EquipmentDataStruct, Offset: 0, Size: 136, Range: D3000 ~ D3135 TaskIndex: 1, Size: 154 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.ProductInfoStruct, Offset: 146, Size: 77, Range: D3146 ~ D3222 TaskIndex: 2, Size: 732 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.ProductRouteStruct, Offset: 233, Size: 366, Range: D3233 ~ D3598 TaskIndex: 3, Size: 152 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.ProductXRFMesureStruct, Offset: 609, Size: 76, Range: D3609 ~ D3684 TaskIndex: 4, Size: 86 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.PowerAnalyzerStruct, Offset: 695, Size: 43, Range: D3695 ~ D3737 TaskIndex: 5, Size: 88 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.HipotStruct, Offset: 748, Size: 44, Range: D3748 ~ D3791 TaskIndex: 6, Size: 92 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.IVTestDataStruct, Offset: 802, Size: 46, Range: D3802 ~ D3847 TaskIndex: 7, Size: 184 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.ProductGlueMeasureStruct, Offset: 858, Size: 92, Range: D3858 ~ D3949 TaskIndex: 8, Size: 78 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.StationHourlyProductRecordStruct, Offset: 960, Size: 39, Range: D3960 ~ D3998 TaskIndex: 9, Size: 84 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.StationHourlyStatusRecordStruct, Offset: 1009, Size: 42, Range: D4009 ~ D4050 TaskIndex: 10, Size: 94 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.PackingHourlyProductRecordStruct, Offset: 1061, Size: 47, Range: D4061 ~ D4107 TaskIndex: 11, Size: 114 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.ProductionRecordStruct, Offset: 1118, Size: 57, Range: D4118 ~ D4174 TaskIndex: 12, Size: 258 bytes, Type: Mitsubishi.CommTaskHandle.DataRead.Structs.ThickFilmInspectionStruct, Offset: 1185, Size: 129, Range: D4185 ~ D4313 写入布尔数据 数据块对齐：每个数据块必须是 16 位对齐的。这意味着即使传输的数据位数（例如 9 位、17 位等）没有完全填满 16 位，也必须为其分配 2 字节 16 位数据块为 2 字节：协议要求每 16 位数据为 1 个数据块，且该数据块必须占用 2 字节。因此，如果数据总长度是 16 位或 32 位，应该根据具体的位数，动态计算字节数和块数 字节存储：PLC 中的数据存储是按字节进行的，每个字节可以存储 8 位数据。写入时将布尔值按位填充到字节中，并传递给 PLC 块的大小：根据数据位数的大小（如 16 位、32 位等），计算数据块的长度。例如： 16 位布尔值需要 1 个数据块（2 字节） 32 位布尔值需要 2 个数据块（4 字节） 若数据位数不足 16 位但仍需要传输，要求为其分配 2 字节 public async Task WriteBitsAsync(string deviceType, int startAddress, bool[] values, CancellationToken cts = default) { try { int numBits = values.Length; // 计算所需字节数： // 每 16 位数据块需要 2 字节，因此需要根据位数计算字节长度 // 例如：16 位 -> 2 字节，32 位 -> 4 字节，且不足 16 位时仍需要分配 2 字节 int byteLength = (numBits / 16 + ((numBits % 16 > 0) ? 1 : 0)) * 2; byte[] bytes = new byte[byteLength]; // 遍历布尔值数组，将布尔值按位填充到字节数组中 for (int i = 0; i < numBits; i++) { int wordIndex = i / 16; // 每 16 位为一个块 int bitInWord = i % 16; // 在当前 16 位块中的位置 int byteIndex = wordIndex * 2 + (bitInWord / 8); // 字节的索引 int bitInByte = bitInWord % 8; // 字节内的具体位 if (values[i]) { bytes[byteIndex] |= (byte)(1 << bitInByte); } else { bytes[byteIndex] &= (byte)~(1 << bitInByte); } } cts.ThrowIfCancellationRequested(); _ = await _plc.WriteDeviceBlock( MitsubishiHelper.ParsePlcDeviceType(deviceType), startAddress, byteLength / 2, // 16 位为 1 块，32 位为 2 块... bytes ).ConfigureAwait(false); } catch (OperationCanceledException) { throw; } catch (Exception ex) { throw new PlcWriteErrorException( $\"Error writing bits to PLC. Device: {deviceType}, StartAddress: {startAddress}, Length: {values.Length}.\", ex); } } 写入字数据 数据块对齐：每个数据块必须是 16 位对齐的。这意味着，即使传输的数据位数（例如 9 位、17 位等）没有完全填满 16 位，也必须为其分配 2 字节 字数据块：16 位数据为 1 个字数据块（2 字节），即每个 short 类型的值占用 2 字节，如果传输的数据位数不足 16 位，但仍需要传输，要求为其分配 2 字节 字节存储：PLC 中的数据存储是按字节进行的，每个字（16 位）将占用 2 字节 块的大小：根据数据位数的大小（如 16 位、32 位等），计算数据块的长度 16 位 short 类型需要 1 个数据块（2 字节） 32 位 short[] 数组总共占用 2 个数据块（4 字节） public async Task WriteWordsAsync(string deviceType, int startAddress, short[] values, CancellationToken cts = default) { try { int byteLength = values.Length * 2; // 每个 short 占 2 字节 byte[] bytes = new byte[byteLength]; // 将 short 数组中的每个值转换为字节，并复制到目标字节数组 for (int i = 0; i < values.Length; i++) { byte[] shortBytes = BitConverter.GetBytes(values[i]); Array.Copy(shortBytes, 0, bytes, i * 2, 2); // 将字节复制到目标字节数组 } cts.ThrowIfCancellationRequested(); _ = await _plc.WriteDeviceBlock( MitsubishiHelper.ParsePlcDeviceType(deviceType), startAddress, byteLength / 2, // 这里传递的块数是按 16 位对齐计算的，所以 byteLength / 2 bytes ).ConfigureAwait(false); } catch (OperationCanceledException) { throw; } catch (Exception ex) { throw new PlcWriteErrorException( $\"Error writing words to PLC. Device: {deviceType}, StartAddress: {startAddress}, Length: {values.Length}.\", ex); } } 测试"
  },
  "content/MAS-Communication/MultiNICStaticRoute.html": {
    "href": "content/MAS-Communication/MultiNICStaticRoute.html",
    "title": "多网卡与静态路由 | DataMaster",
    "summary": "多网卡与静态路由 1. 静态路由的作用与命令 静态路由用于解决多网卡或多网段环境下，数据包走错路径的问题，确保数据流向正确的网关或网络 基本语法: route add 目标网段 mask 子网掩码 网关IP -p 参数解释： 目标网段：目标网络地址，例如 192.168.2.0 mask 子网掩码：例如 255.255.255.0 网关IP：指定流量通过的网关 IP，例如 192.168.5.1 -p：表示永久生效，重启后仍有效 示例： 目标 PLC 网段 192.168.2.0/24，有线网卡的网关 IP 为 192.168.5.1： route add 192.168.2.0 mask 255.255.255.0 192.168.5.1 -p 验证当前路由表： route print 删除静态路由： route delete 192.168.2.0 2. 多网卡优先级设置 当系统有多个网卡时，默认会走优先级高的网卡（通常是 Wi-Fi） 调整网卡优先级确保有线网卡优先于 Wi-Fi： 手动调整网卡优先级： 打开 网络和共享中心 > 更改适配器设置 按下 Alt 键，进入 高级 > 高级设置 在连接列表中，将 有线网卡 移到 Wi-Fi 之上 3. 常见问题与解决方案总结 问题 原因 解决方案 连接 Wi-Fi 后无法访问 PLC 系统路由导致流量走 Wi-Fi 网卡 添加静态路由，确保走有线网卡 多网卡优先级导致路径不一致 系统默认网关切换 手动调整网卡优先级 4. 最终静态路由添加步骤 添加静态路由： route add 192.168.2.0 mask 255.255.255.0 192.168.5.1 -p 验证路由是否生效： route print 如果需要删除路由： route delete 192.168.2.0"
  },
  "content/MAS-Communication/OPC.UA.html": {
    "href": "content/MAS-Communication/OPC.UA.html",
    "title": "OPC.UA | DataMaster",
    "summary": "OPC.UA 相关资料： OPC UA 规范文档，包括概述、概念和服务等各个方面的详细解释。这些资源是理解 OPC UA 标准的官方和权威来源：官方文档和规范 | 统一架构技术示例 Unified Automation 提供了一系列关于其 OPC UA软件开发工具包的API参考文档，从服务器到客户端的广泛功能：开发工具包和API文档 基金会官网： OPC 基金会官网 | OPC基金会中国官网 开源的 OPC UA (Open Platform Communications Unified Architecture) 协议的C语言实现：open62541 OPC UA协议的 .NET Standard 库实现，由OPC基金会官方提供：UA-.NETStandard Simulation Server 模拟 OPC UA 服务器工具：Simulation Server Browser 浏览和交互真实或模拟的 OPC UA 服务器工具：Browser 发布订阅 在软件架构中，发布/订阅是一种消息传递模式，其中发送者不直接与特定接收者通信。相反，发送者（称为发布者）将消息分类为类别，而不知道有哪些接收者（如果有）。同样，接收者（称为订阅者）对一个或多个类别表示兴趣，并且只接收感兴趣的消息，而不知道有哪些发送者（如果有） OPC UA 通信中的订阅&发布： 目的：OPC UA订阅与发布机制主要用于实时监控和控制服务器端的数据变化。客户端通过订阅服务器上的特定节点，不仅可以接收到这些节点值的更新通知，还可以发布控制指令或数据更新到服务器 实现：该机制是通过OPC UA协议直接实现的。服务器负责追踪订阅节点的状态变化，并在变化发生时，通过网络向客户端推送更新。同时，客户端也可以发布数据到服务器，服务器根据收到的数据更新或执行相应的操作 用途：这种机制广泛应用于工业自动化和监控系统，允许客户端不仅实时响应服务器端传感器或设备状态的变化，还可以对这些设备或过程进行控制和调整 EventAggregator 订阅&发布： 目的：事件聚合器用于在应用程序内部管理和传递事件。它允许不同组件之间的松耦合通信，组件可以发布事件或订阅事件，而不需要直接引用彼此 实现：事件聚合器通常是一个在应用程序架构内部实现的模式，不依赖于外部的网络或协议 用途：事件聚合器适用于任何需要组件之间进行通信的场景，特别是在复杂的应用程序中，它帮助减少组件之间的依赖性，提高了代码的可维护性和扩展性 证书 应用程序证书存储的位置默认在C:\\ProgramData下，证书会在应用程序首次启动时创建 证书创建： 1.加载 DataMasterOpcUaClient.Config.xml 配置文件 _configuration = await application.LoadApplicationConfiguration(false); 2.检查证书或创建一个新的证书 bool haveAppCertificate = await application.CheckApplicationInstanceCertificate(true, 0); 连接到 PLC OPC UA 服务器 TIA Portal V14 及 S7-1500 V2.0 以上 步骤： Step 1: 开启OPC UA服务器功能 Step 2: 如果此端口未被占用将不会输出任何信息，可以将其作为客户端连接端口 netstat -an | Select-String \"<端口号>\" Step 3: 确保客户端和服务器之间的网络连接正常 ping <PLC地址>"
  },
  "content/MAS-Communication/S7Communication.html": {
    "href": "content/MAS-Communication/S7Communication.html",
    "title": "西门子通讯执行流程 | DataMaster",
    "summary": "西门子通讯执行流程 测试信息 通讯反射性能测试，每100次执行耗时任务取其中平均值 不执行数据读取任务，仅反射 + 决策测试 测试平台 处理器：11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz (2.42 GHz) 内存：16.0 GB (15.7 GB 可用) 系统类型：64 位操作系统，基于 x64 的处理器 操作系统： 名称：Windows 11 家庭中文版 版本号：23H2 安装日期：2023年7月14日 操作系统构建版本：22631.3880 体验包：Windows Feature Experience Pack 1000.22700.1020.0 其他信息 单次反射性能瓶颈限制不超过 1 us ECharts option = { title: { text: '反射性能测试结果', subtext: '仅反射 + 决策，不执行读取任务', left: 'center' }, legend: { data: ['Task Count: 1', 'Task Count: 10'], left: 'right' }, xAxis: { type: 'category', name: 'Task Count', data: [1, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000] }, yAxis: { type: 'value', name: 'ms' }, series: [ { name: 'Task Count: 1', data: [ 0.0010109999999999974, 0.46797000000000005, 0.7852510000000003, 1.323048, 1.6766819999999998, 1.9396650000000002, 2.0156569999999996, 2.61425, 2.893754, 3.247703000000001, 3.8252100000000007], type: 'line', smooth: true }, { name: 'Task Count: 10', data: [ 0.005737000000000009, 2.265415, 4.899089999999998, 6.240781999999999, 8.807637999999997, 10.332812999999996, 11.400258000000006, 13.489982000000008, 14.991412, 17.927968, 19.38777099999999], type: 'line', smooth: true, }, ] };"
  },
  "content/MAS-Controls/MAS.Controls.ImageProceFlow.html": {
    "href": "content/MAS-Controls/MAS.Controls.ImageProceFlow.html",
    "title": "视觉处理流程低代码开发 | DataMaster",
    "summary": "视觉处理流程低代码开发 模块在管理和执行一组相互依赖的模块（Module），通过拓扑排序（Topological Sort）确定模块的执行顺序，确保所有依赖关系在模块执行前得到满足 模块样式 边框颜色定义 灰色（Gray）：默认 绿色（Green）：初始化成功或正常状态 红色（Red）：执行过程中发生了异常 橙色（Orange）：输入数据存在问题 紫色（Purple）：初始化失败 黄色（Yellow）：警告或非致命错误 private Brush _borderBrush = Brushes.Gray; /// <summary> /// 获取或设置控件边框颜色 /// </summary> public Brush BorderBrush { get => _borderBrush; set => SetField(ref _borderBrush, value, nameof(BorderBrush)); }"
  },
  "content/MAS-Controls/MAS.Controls.InteractiveDataFlow.html": {
    "href": "content/MAS-Controls/MAS.Controls.InteractiveDataFlow.html",
    "title": "交互式数据流 | DataMaster",
    "summary": "交互式数据流 通讯实例统一接口 PlcCommServiceBase : IPlcCommunicationService, IDisposable"
  },
  "content/MAS-Controls/MAS.Controls.html": {
    "href": "content/MAS-Controls/MAS.Controls.html",
    "title": "MAS.Controls 通用控件 | DataMaster",
    "summary": "MAS.Controls 通用控件 MAS.Controls 通用控件 ITipsNotificationService TipsNotificationService INotificationService NotificationService NumberAnimation ChartsNumberAnimationControl ILoadingService LoadingCircleService ProjectCardControl ITipsNotificationService Tips 通知 TipsNotificationService 行为： Step 1: 每个需要显示Tips通知的窗口必须在其XAML中包含一个名为TipsNotificationHost的容器 <!-- Tips 通知宿主容器 --> <Grid x:Name=\"TipsNotificationHost\"> <!-- Tips 通知控件将动态添加到这里 --> </Grid> Step 2: 服务初始化和方法实现 在显示通知时自动识别当前活动窗口并找到其TipsNotificationHost容器，如果窗口当前活动窗口尺寸小于800*600，则使用主窗口的TipsNotificationHost容器 private readonly ITipsNotificationService _tipsNotificationService; INotificationService 普通通知 NotificationService 行为： Step 1: 定义 Host Control: 通知内容控件作为面包通知的指定容器 <ContentControl x:Name=\"NotificationHost\"/> Step 2: 服务初始化和方法实现 private readonly INotificationService _notificationService; private void ShowNotification(string message) { _notificationService.Show(message, NotificationHost); } 信息： Nothing NumberAnimation 数字动画 ChartsNumberAnimationControl 行为： Step 1: 引入命名空间 xmlns:naControl =\"clr-namespace:MAS.Controls.NumberAnimation\" Step 2: 实例化ChartsNumberAnimationControl并绑定至ViewModel属性 <naControl:ChartsNumberAnimationControl Number=\"{Binding CurrentNumber}\"/> Step 3: 实现ViewMode private int _currentNumber; public int CurrentNumber { get => _currentNumber; set => SetField(ref _currentNumber, value, nameof(CurrentNumber)); } 信息： Nothing ILoadingService 加载动画 LoadingCircleService 行为： Step 1: 定义 Host Control: 添加控件作为加载动画的指定容器 <ContentControl x:Name=\"Loading\"/> Step 2: 服务初始化和方法实现 // View private readonly ILoadingService _loadingService; // 显示 _loadingService.ShowLoadingAnimation(Loading); // 销毁 _loadingService.DestroyLoadingAnimation(); 信息： Nothing ProjectCardControl 工程实例卡片，用于展示和操作工程项目实例的详细信息 示例代码： <Grid> <ScrollViewer VerticalScrollBarVisibility=\"Auto\" Margin=\"10\"> <hc:TransitioningContentControl TransitionMode=\"Top2BottomWithFade\"> <ItemsControl ItemsSource=\"{Binding Projects}\"> <ItemsControl.ItemTemplate> <DataTemplate> <mas:ProjectCardControl ProjectName=\"{Binding ProjectName}\" ProjectPath=\"{Binding ProjectPath}\" DiskSpace=\"{Binding DiskSpace}\" CreationTime=\"{Binding CreationTime}\" ModificationTime=\"{Binding ModificationTime}\" BuildTime=\"{Binding BuildTime}\" RunStatus=\"{Binding RunStatus}\" OpenCommand=\"{Binding OpenCommand}\" RunCommand=\"{Binding RunCommand}\" DeleteCommand=\"{Binding DeleteCommand}\"/> </DataTemplate> </ItemsControl.ItemTemplate> </ItemsControl> </hc:TransitioningContentControl> </ScrollViewer> </Grid>"
  },
  "content/MAS-Security/ProductKey.html": {
    "href": "content/MAS-Security/ProductKey.html",
    "title": "许可密钥 | DataMaster",
    "summary": "许可密钥 本应用程序使用基于机器码的许可证密钥验证机制。首次启动应用程序时，需要验证许可证密钥 public void ValidateLicenseKey_WithCorrectKey_ReturnsValid() { Console.WriteLine(@\"Tile--验证许可密钥功能\"); string machineCode = _hardwareInfoProvider.GenerateMachineCode(); Console.WriteLine($@\"NO.1--获取本机机器码：{machineCode}\"); byte[] encryptMachineCodes = _encryptionService.Encrypt(machineCode); Console.WriteLine($@\"NO.2--加密后的机器码（Hex）：{BitConverter.ToString(encryptMachineCodes).Replace(\"-\", \"\")}\"); string licenseKey = Convert.ToBase64String(encryptMachineCodes); Console.WriteLine($@\"NO.3--得到许可证密钥（Base64）：{licenseKey}\"); ValidationResult result = _licensingService.ValidateLicenseKey(licenseKey); Console.WriteLine(@\"NO.4--断言：密钥是否验证成功\"); Assert.IsTrue(result.IsValid, \"密钥验证失败\"); } 密钥生成 运行单元测试中的MAS.SecurityUnitTest所有测试 找到许可服务测试中的ValidateLicenseKey_WithCorrectKey_ReturnsValid方法 查看输出结果NO.3--得到许可证密钥（Base64）这就是你的本机密钥"
  },
  "content/MAS-Security/Role-Based Access Control.html": {
    "href": "content/MAS-Security/Role-Based Access Control.html",
    "title": "RBAC（基于角色的访问控制）模型 | DataMaster",
    "summary": "RBAC（基于角色的访问控制）模型 摘要 基于角色的访问控制（Role-Based Access Control, RBAC）是一种访问控制机制，通过用户角色和权限的映射关系，来限制和管理对系统资源的访问。将权限分配给角色，再将角色分配给用户，实现灵活的权限控制。本模型包含用户、角色、权限、角色权限关联表、用户角色关联表以及操作日志表 概念 用户（User）： 系统中的操作主体，每个用户拥有一个唯一标识符 角色（Role）： 角色是权限的集合，通过分配的角色获得对应的权限 权限（Permission）： 权限是对系统资源操作的具体定义，例如查看、修改或删除资源 关联表： 通过关联表（如角色权限表、用户角色表）实现用户、角色和权限之间的映射关系 操作日志（OperationLog）： 用于记录用户对系统的操作行为，提供审计和追踪功能 接口 // 认证服务接口 public interface IAuthenticationService() { } // 基于角色的访问控制服务接口 public interface IRbacService() { } 规划 角色 MAS（开发者） Admin（管理员） Engineer（工程师） Operator（操作员） Visitor（未登录） 权限 角色权限关联表 角色 权限 MAS UserCreate, UserEdit, UserDelete, UserResetPassword, UserAssignRole, RoleCreate, RoleEdit, RoleDelete, RoleAssignPermission Admin Engineer Operator Visitor SystemView, BuildView, BusinessDataView, ReportsView, LogView, NotificationView, FileDownload 系统管理类权限 用户管理 UserCreate: 创建用户 UserEdit: 编辑用户 UserDelete: 删除用户 UserResetPassword: 重置用户密码 UserAssignRole: 分配角色给用户 角色管理 RoleCreate: 创建角色 RoleEdit: 编辑角色 RoleDelete: 删除角色 RoleAssignPermission: 分配权限给角色 权限管理 PermissionCreate: 创建权限 PermissionEdit: 编辑权限 PermissionDelete: 删除权限 系统配置 SystemView: 查看系统配置 SystemEdit: 修改系统配置 构建系统类权限 构建运行 BuildView: 查看构建 BuildEdit: 编辑构建 BuildDelete: 删除构建 BuildStatus: 构建状态 业务管理类权限 业务数据管理 BusinessDataView: 查看业务数据 BusinessDataCreate: 创建业务数据 BusinessDataEdit: 编辑业务数据 BusinessDataDelete: 删除业务数据 报表管理 ReportsView: 查看报表 ReportsExport: 导出报表 ReportsAnalyze: 统计分析 日志与审计类权限 日志管理 LogView: 查看日志 审计管理 AuditView: 查看审计信息 其他辅助类权限 通知管理 NotificationView: 查看通知 NotificationPublish: 发布通知 NotificationDelete: 删除通知 文件管理 FileUpload: 上传文件 FileDownload: 下载文件 FileDelete: 删除文件 FileShare: 共享文件 API 访问 APIAccess: 访问API APIDebugAccess: 调用内部调试接口 调试权限 CodeDebug: 代码级调试权限 扩展权限 生产控制 ProductionControlView: 查看生产控制 ProductionControlEdit: 修改生产控制 数据表 用户（User） 字段 数据类型 说明 Id INT 用户的唯一标识符，主键，自增 UserName VARCHAR(20) 用户名，唯一且不可为空 Email VARCHAR(50) 邮箱，可为空 PasswordHash VARBINARY(64) 用户密码的哈希值，不可为空 PasswordSalt VARBINARY(64) 密码盐，用于加密用户密码，不可为空 LoginCount INT 用户登录次数 LastLoginTime DATETIME 最后一次登录时间 CreatedAt DATETIME 创建时间，不可为空 UpdatedAt DATETIME 最后更新时间，不可为空 角色（Role） 字段 数据类型 说明 Id INT 角色唯一标识，主键，自增 RoleName VARCHAR(50) 角色名称，唯一且不可为空 Description VARCHAR(255) 角色描述 CreatedAt DATETIME 创建时间，不可为空 UpdatedAt DATETIME 最后更新时间，不可为空 权限（Permission） 字段 数据类型 说明 Id INT 权限唯一标识符，主键，自增 PermissionName VARCHAR(50) 权限名称，唯一且不可为空 Description VARCHAR(255) 权限描述 CreatedAt DATETIME 创建时间，不可为空 UpdatedAt DATETIME 最后更新时间，不可为空 角色权限关联表（RolePermission） 字段 数据类型 说明 Id INT 角色权限关联表唯一标识符，主键，自增 RoleID INT 角色ID，外键，唯一，关联到Roles表 PermissionID INT 权限ID，外键，唯一，关联到Permissions表 CreatedAt DATETIME 创建时间，不可为空 UpdatedAt DATETIME 最后更新时间，可为空 用户角色关联表（UserRole） 字段 数据类型 说明 Id INT 用户角色关联表唯一标识符，主键，自增 UserID INT 用户ID，外键，唯一，关联到Users表 RoleID INT 角色ID，外键，唯一，关联到Roles表 CreatedAt DATETIME 创建时间，不可为空 UpdatedAt DATETIME 最后更新时间，不可为空 操作日志表（OperationLog） 字段 数据类型 说明 Id INT 操作日志的唯一标识符，主键，自增 UserID INT 操作者的用户ID，外键，唯一，关联到Users表 Action VARCHAR(100) 操作名称，不可为空 Description VARCHAR(255) 操作描述或详细信息，可为空 ResourceID VARCHAR(100) 操作资源的Id，可为空 IPAddress VARCHAR(50) 操作地址，可为空 UserAgent VARCHAR(255) 操作时的代理信息，可为空 CreatedAt DATETIME 创建时间，不可为空"
  },
  "content/MAS-Vision/ObjectDetection.html": {
    "href": "content/MAS-Vision/ObjectDetection.html",
    "title": "MAS.Vision - Object Detection | DataMaster",
    "summary": "MAS.Vision - Object Detection OpenCV 相关资料： OpenCV 官方文档，提供了详尽的API文档和教程，是学习和应用OpenCV的重要资源： OpenCV Documentation OpenCV 项目地址：OpenCV，官网：OpenCV Org OpenCvSharp4 在.NET环境下使用的 OpenCV 库的封装。项目地址：OpenCvSharp 标注工具：CVAT 部署容器：Docker Desktop 目标检测算法模型：yolov5 检查模型的输入和输出工具：Netron Microsoft Azure Global Edition 技术文档：ONNX 关于 fbgemm.dll\" or one of its dependencies 的问题：Stackoverflow 以下因商业版弃用： Emgu CV .NET的 OpenCV 封装，C#和.NET环境下的应用程序使用 OpenCV 功能文档：Emgu CV Wiki Emgu CV 项目地址：Emgu CV，官网：Emgu CV Org 应用场景区分 功能/场景 目标检测算法模型 + OpenCV 仅 OpenCV 算法复杂度 高，需要深度学习 高，传统图像处理 数据集 大量标注数据 可能不需要或数据量较少 对象检测 高精度检测多种对象，实时分析视频流 传统方法，如模板匹配、特征检测等 特征提取 可用于目标检测的特征提取 SIFT、SURF等传统特征提取 运动追踪 追踪视频中多个动态对象，高效识别对象变化 可进行简单运动追踪，如背景消除和光流法 人脸识别 精确识别并分析人脸特征，支持复杂场景 基本人脸检测，不含深度学习增强 物体分类 实时识别和分类多种对象类型，支持大规模数据集 不支持深度学习的分类，限于预定义或简单模式的识别 图像处理基础 完全支持 完全支持 动态场景分析 分析并理解视频内容中的复杂动态场景 有限的动态场景分析能力 处理速度与资源消耗 对硬件要求较高，需要更强的计算能力 较低的资源消耗，适用于资源受限环境 开发与集成复杂度 更高的开发难度，需要更多的调试和优化 相对简单，易于快速开发和部署 复杂场景 鲁棒性强，适用于复杂场景 对于复杂场景可能效果较差 训练基本流程 样本准备 需要收集到足够多的有关特定物体的图像数据 确保在不同的光照、角度和背景条件下拍摄，以提高模型的泛化能力 数据预处理 使用标注工具 CVAT 对图像中的物体进行标注，标出物体的边界框和类别 完成后导出格式 YOLO 选择模型 YOLOv5 转到 Releases 选择模型下载 模型训练 打开命令行（已安装python） 安装 PyTorch pip install torch torchvision 克隆 YOLOv5 仓库 git clone https://github.com/ultralytics/yolov5 进入项目根目录 cd yolov5 安装 YOLOv5 所需的其他依赖 pip install -r requirements.txt 创建图像和标注目录 mkdir -p data/images/train/分类/ mkdir -p data/images/val/分类/ mkdir -p data/labels/train/分类/ mkdir -p data/labels/val/分类/ 移动训练数据（完成步骤 3，将文件移动到 yolov5 根目录执行以下命令） mv obj_Train_data/*.jpg data/images/train/分类/ mv obj_Train_data/*.txt data/labels/train/分类/ 移动验证数据 mv obj_Validation_data/*.jpg data/images/val/分类/ mv obj_Validation_data/*.txt data/labels/val/分类/ 在 yolov5/data 目录下，创建一个名为 custom_data.yaml 的文件，并填写以下内容 train: data/images/train/分类/ val: data/images/val/分类/ nc: 2 # 类别数，根据obj.names中定义的类别数量 names: ['类别1', '类别2'] # 根据obj.names文件中的类别名称修改 开始训练 --img 640 图像大小；--batch 批次；--epochs 训练周期；--weights 预训练权重；--single-cls 单类别检测，有助于优化训练过程 python train.py --img 640 --batch 16 --epochs 50 --data data/custom_data.yaml --weights yolov5m.pt --single-cls 训练过程中，可以新建命令行，导航到 yolov5 根目录，执行以下命令 安装 tensorboard pip install tensorboard 可视化训练过程中的各种指标，然后启动，在浏览器中访问这个地址来查看训练进度 tensorboard --logdir runs/train 损失值: box_loss: 定位损失，用于衡量模型预测的边界框与实际边界框的偏差 obj_loss: 目标损失，用于衡量模型识别目标的能力 cls_loss: 分类损失，用于分类任务 指标： precision: 精确率，用于衡量模型预测的正样本中实际为正样本的比例 recall: 召回率，用于衡量模型对所有正样本的检测能力 mAP: 平均精度，用于综合衡量模型的检测性能 等待训练完成后，将模型导出为 ONNX（Open Neural Network Exchange） 用于优化和简化ONNX模型 pip install onnx-simplifier 执行导出 python export.py --weights runs/train/exp2/weights/best.pt --img 640 --batch 1 --dynamic --simplify --include onnx 模型测试与优化 使用导出的 ONNX 模型在一些测试数据上运行检测，以评估模型的性能和准确性，通过 YOLOv5 的 detect.py 脚本进行，指定 ONNX 模型作为权重参数 用于在不同设备上运行 ONNX 模型 pip install onnxruntime 运行检测脚本 python detect.py --weights runs/train/exp2/weights/best.onnx --img 640 --conf 0.25 --source data/images/val 视频流进行实时对象检测测试 如 opencv-python 如果未安装 pip install opencv-python 启动 YOLOv5 使用摄像头进行实时检测 python detect.py --weights runs/train/exp2/weights/best.onnx --conf 0.25 --source 0 对训练好的模型进行剪枝、量化等优化，减小模型大小，稍微~提高推理速度 模型部署 加载训练好的 ONNX（Open Neural Network Exchange） 模型，集成到.NET应用程序中，使其能够对新的图像进行实时或离线预测 设计需求 v2024-08-15 任务识别及技术实现： 1.对于物体方向的确定 边缘检测 为后续的轮廓分析和模板匹配提供基础，强调物体的结构边界 轮廓分析 通过找到物体的最小外接矩形，可以通过矩形的长宽比和角度来判断物体是否处于正确的方向 几何形状匹配 物体有特定的预期形状，通过匹配来确定其方向、分析图像的几何属性比较轮廓与预设模板之间的相似度 方向梯度直方图 更复杂的物体识别和方向判断，可以提取特征向量来描述物体在各个方向上的边缘强度和方向 模板匹配 基于整个图像的像素强度进行匹配，比较当前图像与模板的相似度 v2024-07-31 概述 主要任务识别： 1.在传送带上经过的物体 物体类型 物体方向 计数递增 物体数量 例如：手机、鸡蛋、电池 预期效果： 相机参数 分辨率： 二选一 1080p(1920x1080（Full HD）) 可以确保足够的图像细节，但会增加计算量 720p(1280x720（HD）) 可以保证图像的清晰度，又能加快图像处理速度 帧率： 不低于 30 fps，每秒至少可以处理 30 张图片，满足一般生产线的速度要求 感光元件： 一般1/2.8英寸或1/3英寸的 CMOS 感光元件已经足够用于上述任务，能够在保证成本的同时提供良好的图像质量 接口类型： USB 3.0 提供高数据传输速率，适合高分辨率和高帧率的图像传输，且普遍兼容性好 镜头焦距： 根据拍摄距离选择，35mm 或 50mm 适用于 1-2 米的距离，16mm 至 25mm 适用于近距离（30cm至1m）拍摄 光圈： 随意或者默认，如果场景的照明条件变化莫测就要考虑 触发模式： 非必需，可按需选择 无触发模式，开启相机即实时捕获检测 有触发模式，软硬件触发拍摄，可以进一步提高图像捕捉的精确性 软件兼容性： Windows 平台"
  },
  "content/MAS-Vision/TemplateMatcher.html": {
    "href": "content/MAS-Vision/TemplateMatcher.html",
    "title": "模板匹配 | DataMaster",
    "summary": "模板匹配 概述 使用 OpenCV 的模板匹配功能在源图像中查找模板图像的位置。在待检测图像上，从左到右，从上向下计算模板图像与重叠子图像的匹配度，匹配程度越大，两者相同的可能性越大 类结构 namespace MAS.Vision.OpenCV; internal class TemplateMatcher(IImageConverter imageConverter) : ITemplateMatcher 图像要求 模板匹配要求输入图像和模板图像必须是灰度图（CV_8UC1，即 8 位无符号单通道图像）： 计算效率: 单通道图像的计算量远小于多通道图像（如 RGB 的 3 通道） 对于大小为 ( W x H ) 的图像和模板，单通道匹配的复杂度为 ( O(W x H) )，如果是多通道图像（如 RGB 有 3 个通道），计算量会乘以通道数 C，复杂度变为 O(C x W x H)，显著增加计算负担 算法本质: 模板匹配基于像素强度的统计计算（如差值平方或相关性） 颜色信息（RGB 三通道）会引入额外变量，干扰形状和纹理的匹配精度 OpenCV 实现限制: Cv2.MatchTemplate 函数要求输入图像和模板的通道数一致 如果输入多通道图像，OpenCV 会将每个通道独立处理并合并结果，导致匹配结果不可控且难以解释 注意：模板应从源图像中截取，确保其代表目标区域的特征。直接使用外部模板可能因背景、光照差异导致匹配失败 核心实现 Cv2.MatchTemplate(srcMat, templateMat, result, matchMode); Cv2.MinMaxLoc(result, out double minVal, out double maxVal, out Point minLoc, out Point maxLoc); 匹配模式 在所有匹配方法中，公式均涉及以下核心符号： I(x + x', y + y') 源图像中与模板对比的子窗口在位置 (x + x', y + y') 的像素值 物理意义: 以当前检测点 (x, y) 为左上角，截取与模板大小相同的区域 示例: 若模板大小 w × h = 3 × 3，则遍历 x' ∈ [0, 2], y' ∈ [0, 2] T(x', y') 模板图像在局部坐标 (x', y') 的像素值 注意: (x', y') 是模板自身的坐标，范围为 [0, w-1] 和 [0, h-1] R(x, y) 结果矩阵（响应图）在位置 (x, y) 的匹配得分 关键特性: SqDiff 和 SqDiffNormed: 值越小匹配度越高 CCorr 和 CCoeff 系列: 值越大匹配度越高 平方差 (SqDiff) \\[ R(x, y) = \\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} \\left[ T(x', y') - I(x + x', y + y') \\right]^2 \\] 原理: 计算模板与源图像子区域像素值差异的平方和 值越小表示差异越小，匹配度越高。最佳匹配位置对应结果矩阵的最小值（minVal） 特点: 计算简单，逐像素差值平方后累加 未归一化，对亮度和对比度变化敏感，结果范围 [0, ∞)，取决于像素强度 适合噪声低、模板与目标亮度一致的场景，如精确图案匹配 计算步骤: 遍历模板所有像素 (x', y')。 计算模板值 T(x', y') 与对应源图像值 I(x + x', y + y') 的差。 对差值平方并累加，得到 R(x, y)。 归一化平方差 (SqDiffNormed) \\[ R(x, y) = \\frac{\\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} \\left[ T(x', y') - I(x + x', y + y') \\right]^2}{\\sqrt{\\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} T(x', y')^2 \\cdot \\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} I(x + x', y + y')^2}} \\] 原理: 在 SqDiff 基础上归一化，除以模板和源图像子区域的能量（像素平方和的平方根）。 值范围 [0, 1]，0 表示完美匹配，最佳匹配对应最小值（minVal）。 特点: 消除了亮度和对比度影响，鲁棒性强。 计算复杂度略高，需额外计算能量项。 适合光照变化或对比度不一致的场景，如自然光下目标检测。 计算步骤: 计算 SqDiff 的平方和。 计算模板和源图像子区域的能量（分别平方后求和）。 用平方和除以能量平方根，得到归一化结果。 相关 (CCorr) \\[ R(x, y) = \\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} T(x', y') \\cdot I(x + x', y + y') \\] 原理: 计算模板与源图像子区域像素值的点积（乘积和） 值越大表示相似度越高，最佳匹配对应最大值（maxVal） 特点: 计算简单，未归一化，结果范围 (-∞, ∞)，受亮度和模板大小影响 对噪声和亮度变化敏感，值可能因像素强度放大 适合亮度一致的简单场景，如图标匹配 计算步骤: 遍历模板所有像素 (x', y') 将模板值 T(x', y') 与对应源图像值 I(x + x', y + y') 相乘 累加所有乘积，得到 R(x, y) 归一化相关 (CCorrNormed) \\[ R(x, y) = \\frac{\\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} T(x', y') \\cdot I(x + x', y + y')}{\\sqrt{\\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} T(x', y')^2 \\cdot \\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} I(x + x', y + y')^2}} \\] 原理: 在 CCorr 基础上归一化，除以模板和源图像子区域的能量 值范围 [-1, 1]，1 表示完美匹配，最佳匹配对应最大值（maxVal） 特点: 对亮度和对比度不敏感，结果稳定 计算复杂度高于 CCorr，需计算能量项 适合亮度或对比度变化的场景，如室外图像匹配 计算步骤: 计算 CCorr 的点积和 计算模板和源图像子区域的能量 用点积除以能量平方根，得到归一化结果 相关系数 (CCoeff) \\[ R(x, y) = \\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} \\left[ T'(x', y') \\cdot I'(x + x', y + y') \\right] \\] \\[ \\begin{array}{l} T'(x', y') = T(x', y') - \\frac{1}{w \\cdot h} \\sum_{x''=0}^{w-1} \\sum_{y''=0}^{h-1} T(x'', y'') \\\\ I'(x + x', y + y') = I(x + x', y + y') - \\frac{1}{w \\cdot h} \\sum_{x''=0}^{w-1} \\sum_{y''=0}^{h-1} I(x + x'', y + y'') \\end{array} \\] 原理: 计算零均值后的点积，去除平均亮度影响 值越大表示相似度越高，最佳匹配对应最大值（maxVal） 特点: 对平均亮度不敏感，但未归一化，结果范围 (-∞, ∞) 计算复杂度较高，需计算均值和零均值点积 适合目标与模板平均亮度不同的场景，如阴影区域匹配 计算步骤: 计算模板和源图像子区域的平均值 分别减去均值，得到 T' 和 I' 计算零均值后的点积，得到 R(x, y) 归一化相关系数 (CCoeffNormed) \\[ R(x, y) = \\frac{\\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} \\left[ T'(x', y') \\cdot I'(x + x', y + y') \\right]}{\\sqrt{\\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} T'(x', y')^2 \\cdot \\sum_{x'=0}^{w-1} \\sum_{y'=0}^{h-1} I'(x + x', y + y')^2}} \\] \\[ \\begin{array}{l} T'(x', y') = T(x', y') - \\frac{1}{w \\cdot h} \\sum_{x''=0}^{w-1} \\sum_{y''=0}^{h-1} T(x'', y'') \\\\ I'(x + x', y + y') = I(x + x', y + y') - \\frac{1}{w \\cdot h} \\sum_{x''=0}^{w-1} \\sum_{y''=0}^{h-1} I(x + x'', y + y'') \\end{array} \\] 原理: 在 CCoeff 基础上归一化，除以零均值后的能量 值范围 [-1, 1]，1 表示完美匹配，最佳匹配对应最大值（maxVal） 特点: 对亮度、对比度和噪声均不敏感，最鲁棒 计算复杂度最高，涉及均值和能量计算 适合复杂场景，如光照变化大或有噪声的图像匹配 计算步骤: 计算模板和源图像子区域的平均值，得到 T' 和 I' 计算零均值后的点积 计算零均值后的能量，用点积除以能量平方根 模式比较 模式 值范围 最佳匹配 对亮度敏感 对对比度敏感 计算复杂度 适用场景 SqDiff (0, ∞) 最小值 是 是 低 精确匹配 SqDiffNormed [0, 1] 最小值 否 否 中 光照变化 CCorr (-∞, ∞) 最大值 是 是 低 简单亮度一致场景 CCorrNormed [-1, 1] 最大值 否 否 中 亮度对比度变化 CCoeff (-∞, ∞) 最大值 否 是 中 平均亮度不同 CCoeffNormed [-1, 1] 最大值 否 否 高 复杂多变场景"
  },
  "content/MAS-Vision/VisionWorkbench.html": {
    "href": "content/MAS-Vision/VisionWorkbench.html",
    "title": "MAS.Vision - Vision Workbench | DataMaster",
    "summary": "MAS.Vision - Vision Workbench 拓扑或构建流程图 基本服务 模块连接服务，建立、移除模块间的连接关系： services.AddSingleton<IModuleConnectionService, ModuleConnectionService>(); 模块连接线管理，更新、创建、移除表示UI元素的线条： services.AddSingleton<IConnectionLineManager, ConnectionLineManager>(); 模块流程执行管理服务，拓扑排序逻辑依赖关系处理： services.AddTransient<IExecutionFlowManager, ExecutionFlowManagerService>(); 模块生命周期管理，在主画布中统一管理所有的模块的添加、删除；同时支持无画布的实例创建： services.AddTransient<IModuleControlManager, ModuleControlManager>(); 工程实例运行管理，在后台运行工作台中的实例列表： services.AddTransient<IVisionProjectManager, VisionProjectManagerService>(); 基本事件 连接线管理 连接事件 拓扑排序 队列 1. 拓扑排序中的队列： 初始化阶段 入度计数 (inDegrees): 记录每个模块的入度（即依赖于该模块的模块数量） 邻接表 (adjacencyList): 记录模块之间的依赖关系，表示哪些模块依赖于当前模块 模块连接信息 (modulesWithConnections): 存储每个模块及其连接信息，便于后续处理 构建依赖关系 遍历所有连接，更新目标模块的入度，并在邻接表中记录源模块到目标模块的依赖关系 初始化队列 找出所有入度为0的模块，这些模块没有任何依赖，可以作为执行的起点，将它们加入到zeroInDegreeQueue队列中 拓扑排序过程 从队列中取出一个模块 (Dequeue) 将其加入排序后的模块列表 (sortedModules) 遍历该模块的所有依赖模块，减少它们的入度 如果某个依赖模块的入度减为0，表示其所有依赖都已被处理，将其加入队列等待处理 循环依赖检测 最后检查排序后的模块数量是否与原模块数量相同，若不同，则存在循环依赖，抛出异常 2. 执行过程中的队列： 初始化阶段 确保已排序的模块列表不为空且模块已成功编译 筛选出所有没有输入依赖的模块（入度为0），这些模块可以立即执行，将它们加入_readyModules队列 清空之前可能存在的任务和输出数据，确保执行过程的独立性和正确性 执行过程 从队列中取出一个准备执行的模块Dequeue 检查模块是否有下游连接（即是否有依赖它的模块）。若无，则跳过执行 异步执行当前模块的逻辑ExecuteAsync，并等待执行完成 存储模块的输出结果，以便后续依赖模块使用 更新依赖模块 遍历当前模块的所有连接，找到目标模块并设置其输入数据 检查目标模块的所有输入是否已准备好（即所有依赖模块都已执行并提供输出） 若目标模块的所有输入均已就绪，将其加入_readyModules队列，等待执行 概述 通过拓扑排序算法，确定模块之间的任务执行顺序，作为本项目的视觉处理流程主要算法： 有向无环图（Directed Acyclic Graph，简称 DAG）是图论中的一个重要概念，由顶点（vertices）和有方向的边（edges）组成。这种结构的特点是图中不存在从任一顶点出发，最终又回到该顶点的环路（cycle）。这意味着，从图中的任意一个顶点出发，经过一系列的有向边，最终将到达一个或多个没有任何出边的顶点，也称为“终端顶点”或“叶节点” 在有向无环图中，边表示顶点之间的单向关系或依赖关系。由于图中不存在环，从任何一个顶点进行深度优先搜索（DFS）或广度优先搜索（BFS）时，搜索过程总会在无法进一步扩展的顶点处停止，而不会陷入无限循环 拓扑排序是一种在有向无环图中对所有顶点进行线性排序的方法，使得对于任何一对顶点\uD835\uDC62和\uD835\uDC63，如果存在从\uD835\uDC62到\uD835\uDC63的有向边，那么在排序结果中\uD835\uDC62必须出现在\uD835\uDC63之前。这种排序方式在以下领域中尤为重要： 任务调度：安排任务执行的顺序，确保所有前置任务都在后续任务之前完成 项目构建：在软件编译过程中正确地编译依赖库或模块 编译优化：确定变量定义的顺序，以优化运行时性能 数据流分析：分析程序中数据的流向和生命周期 有向无环图示例1： A / \\ B C \\ / D 顶点\uD835\uDC34指向顶点\uD835\uDC35和\uD835\uDC36，而\uD835\uDC35和 \uD835\uDC36都指向\uD835\uDC37，拓扑排序的一种可能结果是\uD835\uDC34,\uD835\uDC35,\uD835\uDC36,\uD835\uDC37这表示首先处理\uD835\uDC34然后是\uD835\uDC35和\uD835\uDC36（这两个可以互换顺序、亦或同时执行，因为它们之间没有依赖），最后处理\uD835\uDC37 有向无环图示例2： E / \\ F G \\ / H / \\ I J 顶点E指向顶点F和G，而F和G都指向H，接着H指向I和J，一种可能的拓扑排序结果是E, F, G, H, I, J这个顺序表示首先处理E，接着可以同时或依次处理F和G（因为它们之间没有依赖关系），然后处理H，最后处理I和J 代码 private List<ModuleWithConnections> TopologicalSort() { // 初始化各模块的入度计数字典 var inDegrees = new Dictionary<Guid, short>(); // 初始化邻接表，记录模块的依赖关系 var adjacencyList = new Dictionary<Guid, List<(Guid, short)>>(); // 用于存储模块及其连接信息的字典 var modulesWithConnections = new Dictionary<Guid, ModuleWithConnections>(); // 遍历所有模块，初始化入度为0，邻接表为空，连接信息列表为空 foreach (var module in _modules.Values) { inDegrees[module.ModuleId] = 0; adjacencyList[module.ModuleId] = []; modulesWithConnections[module.ModuleId] = new ModuleWithConnections(module, new List<(Guid, short)>()); } // 遍历所有连接，更新目标模块的入度和源模块的邻接表和连接信息 foreach (var connection in _connectionService.GetAllConnections()) { inDegrees[connection.TargetId]++; adjacencyList[connection.SourceId].Add((connection.TargetId, connection.TargetInputIndex)); modulesWithConnections[connection.SourceId].Connections.Add((connection.TargetId, connection.TargetInputIndex)); } // 查找所有入度为0的模块，作为起始点 var zeroInDegreeQueue = new Queue<ModuleWithConnections>(modulesWithConnections.Values.Where(m => inDegrees[m.Module.ModuleId] == 0)); // 准备一个列表存储排序后的模块 var sortedModules = new List<ModuleWithConnections>(); // 使用队列进行拓扑排序 while (zeroInDegreeQueue.Count > 0) { var moduleWithConnections = zeroInDegreeQueue.Dequeue(); sortedModules.Add(moduleWithConnections); // 遍历当前模块的所有依赖模块 foreach (var (dependentModuleId, inputIndex) in adjacencyList[moduleWithConnections.Module.ModuleId]) { // 减少依赖模块的入度，因为其一个依赖来源已经被处理 inDegrees[dependentModuleId]--; // 如果依赖模块的入度变为0，则加入队列 if (inDegrees[dependentModuleId] == 0) { zeroInDegreeQueue.Enqueue(modulesWithConnections[dependentModuleId]); } } } // 如果排序后的模块数量不等于原模块数量，说明存在循环依赖 if (sortedModules.Count != _modules.Count) { var unsortedModules = _modules.Values.Where(m => !sortedModules.Select(sm => sm.Module.ModuleId).Contains(m.ModuleId)); string message = \"存在循环依赖，涉及模块: \" + string.Join(\", \", unsortedModules.Select(m => m.ModuleId)); throw new InvalidOperationException(message); } return sortedModules; } 示例 通过TopologicalSort方法进行拓扑排序后的结果： private List<ModuleWithConnections> _sortedModules; _sortedModules = TopologicalSort(); A.1.MAS.Controls.ImageProceFlow.ImageSourceViewModel B.2.MAS.Controls.ImageProceFlow.CameraViewModel C.3.MAS.Controls.ImageProceFlow.ColorConvertViewModel D.4.MAS.Controls.ImageProceFlow.ColorConvertViewModel E.5.MAS.Controls.ImageProceFlow.TemplateMatchingViewModel F.6.MAS.Controls.ImageProceFlow.ImageViewerViewModel A,B,C,D,E,F 如果按照拓扑后的结果直接顺序执行的话A -> B -> C -> D -> E -> F 很显然如果直接按照拓扑之后的顺序执行那么肯定是错误的，因为模块间都要进行数据传递 B A | | D C \\ / E | F 模块之间的依赖关系如下： 模块A和 模块B是起始模块，它们没有输入依赖（入度为0） 模块C依赖于 模块`A的输出 模块D依赖于 模块B的输出 模块E依赖于 模块C和 模块`D的输出 模块F是最终模块，依赖于 模块E的输出 执行逻辑： 1. 模块A和模块B作为起始点，它们可以并行执行，因为它们不需要任何输入数据 2. 一旦 模块A和 模块B执行完成，它们的输出数据将分别传递给模块C和模块D 3. 模块C和 模块D在接收到所需的数据后开始执行。这两个模块可以并行执行，因为它们之间没有依赖关系 4. 模块E必须等待模块C和模块D都执行完成并获得它们的输出数据，因为它依赖于这两个模块的输出。一旦模块C和模块D的输出准备就绪，模块E将合并或处理这些数据，并执行 5. 最后，模块F将等待 模块E完成执行，将模块E的输出作为输入数据。完成后，整个流程结束 代码： 入度为0的模块不需要设置输入数据，那么将省略这一步 void SetInputData(short index, object input); 出度为0的模块也不需要设置输出数据，也会省略这一步 Task<object> ExecuteAsync(); 所有模块都有自身的连接信息 public abstract List<Guid> InputModuleIds { get; set; } public abstract List<Guid> OutputModuleIds { get; set; } 代码： public async Task ExecuteAllAsync() { // 如果已排序模块列表为空或未初始化，抛出异常，说明没有注册任何模块 if (_sortedModules == null || _sortedModules.Count == 0) { throw new InvalidOperationException(\"未注册任何模块\"); } // 如果模块没有成功编译，抛出异常，防止执行未编译的模块 if (!_isCompiledSuccessfully) { throw new InvalidOperationException(\"尝试执行模块，但模块未成功编译或未编译\"); } // 初始化队列，筛选出入度为0的模块（即没有输入依赖的模块），这些模块可以立即执行 _readyModules = new Queue<ModuleWithConnections>(_sortedModules.Where(m => m.Module.InputModuleIds.Count == 0)); // 清空存储模块任务的字典，以防之前有未清理的任务 _moduleTasks.Clear(); // 清空存储模块输出数据的字典，确保执行时不会使用之前的残留数据 _moduleOutputs.Clear(); // 当队列中还有可以执行的模块时 while (_readyModules.Count > 0) { // 从队列中取出一个准备执行的模块 var currentModule = _readyModules.Dequeue(); // 如果当前模块没有任何连接（出度为0），则执行结束，不再处理下游模块 if(currentModule.Connections.Count == 0) { continue; } // 调用当前模块的异步执行方法，开始执行模块的逻辑操作，返回一个执行任务 var executionTask = currentModule.Module.ExecuteAsync(); // 将模块的执行任务存储在任务字典中，使用模块的唯一标识符作为键 _moduleTasks[currentModule.Module.ModuleId] = executionTask; // 等待任务执行完成，获取执行结果（输出值） var output = await executionTask; // 将当前模块的执行结果存储在模块输出字典中，值为包含输出的列表 _moduleOutputs[currentModule.Module.ModuleId] = [output]; // 遍历当前模块的所有连接（即输出数据要传递到的目标模块及其输入索引） foreach (var (TargetModuleId, TargetInputIndex) in currentModule.Connections) { // 在已排序的模块列表中查找对应的目标模块 var targetModule = _sortedModules.FirstOrDefault(m => m.Module.ModuleId == TargetModuleId); // 如果找到目标模块，则继续处理 if (targetModule != null) { // 设置目标模块的指定输入数据，将当前模块的输出数据传递给目标模块 targetModule.Module.SetInputData(TargetInputIndex, output); // 检查目标模块的所有输入模块是否都已经有输出数据（即所有输入都已准备好） if (targetModule.Module.InputModuleIds.All(_moduleOutputs.ContainsKey)) { // 如果所有输入都已准备好，将目标模块加入到准备执行的队列中 _readyModules.Enqueue(targetModule); } } } } }"
  },
  "content/MAS.Compilation.html": {
    "href": "content/MAS.Compilation.html",
    "title": "动态编译 | DataMaster",
    "summary": "动态编译 +---------------------+ | SharedInterfaces.dll| | (Default Context) | +----------+----------+ | +----------v----------+ +----------------------------+ | CommLoadContext | | DataAccessLoadContext | | (Custom Context) | | (Custom Context) | | - CommAssembly.dll | | - DataAccessAssembly.dll | +----------+----------+ +----------------------------+ | ^ | | +-------------+---------------+ | Application Logic"
  },
  "content/MAS.EventAggregator.html": {
    "href": "content/MAS.EventAggregator.html",
    "title": "MAS.EventAggregator 事件聚合器 | DataMaster",
    "summary": "MAS.EventAggregator 事件聚合器 MAS.EventAggregator 事件聚合器 IEventAggregator .NET事件和委托： 直接性：事件是直接定义和触发的，订阅者必须直接知道发布者，形成了比较紧密的耦合 简洁性：对于简单的场景，使用标准的.NET事件更直接、简单 组件耦合：发布者和订阅者之间的耦合度较高，因为订阅者需要具体知道是哪个类或实例发布的事件 事件聚合器（Event Aggregator）： 解耦合：发布者和订阅者之间不直接通信，而是通过事件聚合器，这降低了组件之间的耦合度 灵活性：订阅者可以在运行时选择订阅或取消订阅事件，而不需要修改发布者的代码 管理性：事件聚合器作为一个中心点管理所有的事件和订阅，更容易进行事件的管理和调试 IEventAggregator 行为： Step 1: 在 MAS.Events 中定义事件，便于集中管理以及访问 public class DataUpdatedEvent{ public string UpdatedData { get; set; } } Step 2: 订阅者可以在任意位置订阅事件 public class MainViewModel{ private readonly IEventAggregatorService _eventAggregator; public MainViewModel(IEventAggregatorService eventAggregator){ _eventAggregator = eventAggregator; _eventAggregator.Subscribe<DataUpdatedEvent>(OnDataUpdated); } private void OnDataUpdated(DataUpdatedEvent e){ Console.WriteLine($\"数据已更新: {e.UpdatedData}\"); } } Step 3: 发布者可以在任意位置发布事件 public class DataService{ private readonly IEventAggregatorService _eventAggregator; public DataService(IEventAggregatorService eventAggregator){ _eventAggregator = eventAggregator; } public void UpdateData(){ // 执行数据更新操作 // ... _eventAggregator.Publish(new DataUpdatedEvent { UpdatedData = \"新的数据内容\" }); } } 信息： 使用已存在的 DataUpdateEvent<T>(T data) 泛型事件类足以满足多种数据类型的需求 public class DataUpdateEvent<T>(T data) { public T Data { get; } = data; }"
  },
  "content/MAS.Monaco.html": {
    "href": "content/MAS.Monaco.html",
    "title": "当前前后端交互的所有方法 | DataMaster",
    "summary": "当前前后端交互的所有方法 1.1 后端（C#）调用前端（JavaScript）的函数 后端通过 MonacoService 类与前端进行交互，主要通过执行 JavaScript 脚本的方式实现。以下是后端调用前端的方法列表： C# 方法名 前端函数名 描述 调用时机 GetContentAsync getEditorContent 获取编辑器中的当前内容 需要获取编辑器内容时 SetLanguageAsync setLanguage 设置编辑器的编程语言 需要更改编辑器语言时 SetEditorThemeAsync setEditorTheme 设置编辑器的主题 需要更改编辑器主题时 SetEditorThemeByAppThemeAsync setEditorTheme 根据应用程序主题设置编辑器主题 根据应用主题自动设置编辑器主题 LoadFileAsync loadFileContent 加载文件内容到编辑器 需要加载文件时 MarkEditorAsSavedAsync markEditorAsSaved 标记编辑器内容为已保存 内容保存后 1.2 前端（JavaScript）发送消息到后端（C#）的方法 前端通过 window.chrome.webview.postMessage 方法向后端发送消息。以下是前端发送到后端的方法列表： 方法名 描述 调用时机 消息类型 数据模型 sendEditorStatus 发送编辑器的状态信息到后端 编辑器内容变化时 EditorStatus EditorStatusMessage sendCompileStatus 发送编译状态信息到后端 执行编译函数时 CompileStatus CompileStatusMessage"
  },
  "content/PrismaTalk.html": {
    "href": "content/PrismaTalk.html",
    "title": "当前前后端交互的所有方法 | DataMaster",
    "summary": "当前前后端交互的所有方法 1.1 后端（C#）调用前端（JavaScript）的函数 后端通过 PrismaTalkClient 类与前端进行交互，主要通过执行 JavaScript 脚本的方式实现。以下是后端调用前端的方法列表： 前端函数名 描述 参数 startAssistantStream 当后端开始生成流式响应时 streamId: string updateAssistantStream 当后端收到助手的流式数据片段时（每收到一个chunk调用一次） streamId: string, chunk: string endAssistantStream 当流式响应完全结束时 streamId: string addUserMessage 添加用户消息 content: string clearAllMessages 清除所有消息（用于新对话） 无 showToastMessage 显示提示消息 content: string, level: string captureLongScreenshot 捕获长截图 无 1.2 前端（JavaScript）发送消息到后端（C#）的方法 前端通过 window.chrome.webview.postMessage 方法向后端发送消息。以下是前端发送到后端的方法列表： 方法名 描述 调用时机 消息类型 数据模型"
  },
  "content/Utilities.html": {
    "href": "content/Utilities.html",
    "title": "Tools工具列表 | DataMaster",
    "summary": "Tools工具列表 版权声明 本列表衍生自单小飞的开源项目，原始版权归作者所有 已对原内容进行重新排版和整理。原工具列表请参考原仓库 本列表仅作信息分享，不对工具的安全性、稳定性作担保，使用风险自负 说明 表示 开源软件 ，点击进入 开源 仓库； 表示 免费 使用，或者个人 免费 ； 表示 热门 的软件； 表示 推荐 的软件； 表示 装机必备 的软件； 表示 App store 连接地址; 表示 强烈推荐 的必装神器，数量来表达强烈的程度； AI工具 LangChain - 构建基于大语言模型应用的开发框架。 LlamaIndex - 为大语言应用提供高效数据索引和检索。 Stable Diffusion WebUI - 开源AI绘画工具。 Dify - 开源平台，用于快速构建和管理AI应用程序，适合创建定制化的AI工作流。 Fine.dev - AI协作工具，能理解代码库并自主解决任务或生成PR，集成Jira和Linear。 Codeium - 一个免费的AI代码补全工具，支持多种IDE，提供上下文感知的建议。 Tabnine - AI驱动的代码补全工具，支持私有模型部署，保护代码隐私。 Hugging Face Spaces - 一个托管AI模型和应用的平台，支持快速部署机器学习原型。 Web开发 Next.js - React全栈框架，支持SSR和静态生成。 Nuxt - Vue.js的元框架，简化通用应用开发。 Astro - 现代静态站点生成器，支持多框架。 Qwik - 专注于即时交互的Web框架。 Bun - 快速的JavaScript运行时和工具链。 Webcrumbs - 开源插件构建平台，提供可重用的标准化组件，加速Web应用程序开发。 Vite - 下一代前端构建工具，快速热重载和优化的生产构建，支持多框架。 Remix - 一个全栈Web框架，专注于服务器端渲染和用户体验，适合现代Web应用。 SvelteKit - Svelte官方框架，用于构建高效的Web应用，支持静态和动态渲染。 测试工具 Playwright - 一个强大的端到端测试框架，支持多浏览器自动化，替代Puppeteer。 Cypress - 前端测试工具，提供实时调试和录制功能，适合Web应用测试。 TestCafe - 无需WebDriver的自动化测试工具，支持跨浏览器测试，易于设置。 Wireshark - 世界上最广泛使用的网络协议分析软件。 Charles - 一个代理工具，允许你查看所有的HTTP和HTTPS流量。 James - 用于https和http进行查询映射请求。 mitmproxy - 一款支持HTTP(S)的中间人代理工具，可在终端下运行，可用于抓包 Insomnia 3.0 - 漂亮的HTTP请求测试工具。 Cocoa Rest Client - 比Postman看起来漂亮的客户端，测试HTTP/REST endpoints。 Paw - 先进的 HTTP 客户端。 Cellist - HTTP调试客户端。 Integrity - 轻松找到无效链接。 Postman - Postman 帮助我们快速测试API。 编辑器 Cursor - 一款AI驱动的代码编辑器，基于VS Code构建，专注于通过自然语言提示生成代码、自动补全和导航大型代码库。 Zed - 一款高性能、轻量级的代码编辑器，强调速度和多人协作，支持实时代码共享。 Lapce - 开源轻量编辑器，类似VS Code但更注重性能，使用Rust开发，支持插件扩展。 Atom - GitHub推出的开源编辑器。 Sublime Text - 一个比较简洁大方带插件管理系统的流行编辑器。 Brackets - Adobe推出的Brackets免费/开源编辑器。 Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript支持杠杠的。 Emacs - Emacs是基于控制台的编辑器和高度可定制的。 LightTable - 下一代代码编辑器。 TextMate - 文本编辑器软件，与BBedit一起并称苹果机上的emacs和vim，这是以前。 BBEdit - 强大的文件编辑器，用于编辑文件，文本文件及程序源代码。 Coda2 - 编写Web应用长得漂亮的编辑器。 Vim - Vim古老命令行中使用的编辑器。 Vundle.vim - Vim插件管理工具。 vim-plug - 一个简约的vim插件管理器。 WebVim - 倾向于开发JavaScript和Web的vim。 vim-web - 一个前端开发工程师的vim。 Neovim - 提高Vim可扩张灵活性。 Spacevim - 模仿Spacemacs的使用方式。 Spf13 - 一套全方位的配置项目。 Vimr - Vim客户端，升级Vim体验。 HBuilder - HBuilder是DCloud（数字天堂）推出的一款支持HTML5的Web开发IDE。 Tincta - 一个免费的文本编辑器。 Xcode - 开发iOS和MacOS基本IDE。 IntelliJ IDEA - 一款Java开发集成环境。(学生免费) Webstorm - 是jetbrains公司旗下一款JavaScript开发工具。 学生免费，点击这里 查看更多。 一些很好的插件 NodeJS - 集成Node.js，你肯定需要它，很多功能需要它。 EditorConfig - 帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格。 Material Theme UI - Google为React开发的主题。 Deco IDE - React Native IDE 支持控件拖拽界面实时变更。 Xamarin Studio - 免费的跨平台的C# IDE。支持iOS、Android和.net开发。 NetBeans IDE - 免费、开源的IDE，主要用于java开发，可支持多种语言和框架。 Eclipse - 流行的开源IDE，主要用于Java，但为多种语言和平台的插件支持。 CotEditor - 轻量级的纯文本编辑器。 开发者工具 Aviator - 一个工作流自动化工具，优化代码审查、PR合并和部署流程，集成CI/CD管道。 Replexica - AI驱动的本地化平台，加速多语言UI开发，提供CLI和API支持。 Bun - 一个快速的JavaScript运行时和打包工具，替代Node.js和npm，内置TypeScript支持。 Biome - 一个快速的JavaScript/TypeScript格式化和Lint工具，替代Prettier和ESLint，性能极高。 Tauri - 一个轻量级跨平台桌面应用框架，使用Rust和Web技术，替代Electron，占用资源少。 Astro - 一个现代静态站点生成器，专注于性能优化，支持多框架（如React、Vue）。 WeFlow - 一个基于 tmt-workflow 前端工作流的开发工具。 Koala - 预处理器语言图形编译工具，支持Less、Sass、CoffeeScript、Compass framework 的即时编译。 CodeKit - 自动编译Less、Sass、Stylus、CoffeeScript、Jade & Haml等文件。 Hosts.prefpane - 编辑 hosts 文件的工具。 iHosts - 唯一上架 Mac App Store 的 /etc/hosts 编辑神器。 SwitchHosts - 一个管理、切换多个 hosts 方案的工具。 Gas Mask - 编辑 hosts 文件的工具，更简单方便。 DiffMerge - 可视化的文件比较（也可进行目录比较）与合并工具。 PPRows - 计算你写了多少行代码。 Beyond Compare - 对比两个文件夹或者文件，并将差异以颜色标示。 Kaleidoscope - 一款很强大的文本文件和图像比较工具，同时和 git、svn 等版本控制工具能够完美的结合。 Fanvas - 把swf转为HTML5 canvas动画的系统。 EnvPane - 图形终端查看环境变量的应用工具。 Dash - 强大到你无法想象的API离线文档软件。 Dlite - 简单的使用Docker的一个软件。 SnippetsLab - 管理和组织你的代码片段。 StarUML - 强大的软件建模软件。 Vagrant Manager - 管理你本地服务。 FinderGo Finder中快速打开终端，定位到目录 Localname - 提供对本地开发服务器的访问权限。 zeplin - 前端与设计协同工作专用工具。 Go2Shell - 从Finder打开命令行。 SecureCRT - 一款支持SSH、Telnet等多种协议的终端仿真程序。 MJML - 简化设计回应电子邮件的方式。 TeXstudio - 集成创建LaTeX文档的写作环境。 Vagrant - 用来构建虚拟开发环境的工具。 正则编辑器 Regex101 - 在线正则表达式测试工具，支持多种语言（如PCRE、JavaScript），提供详细解释和调试。 Regulex - 正则表达式可视化工具，将正则转为图形，便于理解复杂表达式。 Regexr - 交互式正则表达式编辑器，提供实时测试和社区示例。 RegExp Playground - JetBrains IDE内置的正则测试工具（独立版可通过插件获取），支持多语言调试。 RegexBuddy - 功能强大的正则表达式开发和调试工具，支持多种语言和代码生成。 RegEx Tester - Chrome插件形式的正则测试工具，简单易用，适合快速验证。 Pythex - 专注于Python正则表达式的在线测试工具，提供实时匹配和错误提示。 Regexper - 正则表达式可视化工具，将表达式转为流程图，开源且轻量。 Regex Tester (VS Code Extension) - VS Code插件，提供内置正则测试环境，支持高亮和替换。 Patterns - 正则表达式编辑器。 Reginald - 正则表达式测试应用程序，使用 RegexKitLite。 Regex - 感觉是用过最漂亮的正则表达式测试工具。 Reggy - 正则表达式编辑器。 RegExRX - 正则表达式的开发工具。 命令行工具 Zoxide - 一个智能目录跳转工具，替代cd，基于Rust开发，支持zsh/bash。 Eza - 一个现代化的ls替代品，提供彩色输出和Git集成，增强命令行体验。 iTerm2 - 免费的终端工具，直接替代自带的Terminal，有非常多惊人的特性。 cool-retro-term - 怀旧的命令行终端。 Oh my zsh - 拥有大量的有用的功能，助手，插件，主题，等特性的命令行工具插件。 Glances - 在命令行中查看你系统运行状态的工具。 Cakebrew - Homebrew 的客户端软件。摆脱命令方便安装、查看、卸载软件。 ndm - 查看本地NPM安装的包客户端软件。摆脱命令方便安装、查看、卸载软件。 Black Screen - 来自 21 世纪的强大终端。 Fish Shell - 智能且用户友好的命令行终端。 oh-my-fish - 和Oh my zsh相似，建立在Fish Shell框架上。 bash-it - 一个社区的bash的框架。 color-retro-term - 一款复古风格的终端，非常酷炫。 HyperTerm - 一款基于Node开发的终端软件，逼格很高。 itunes-remote - 通过终端控制您的iTunes。 mycli - 为MySQL命令行客户端，提供语法高亮和提示功能的工具！ LNav - 日志文件阅读器. tmux 终端登录远程主机的命令行工具。 mas - 一个简单的命令行界面的苹果应用商店。 版本控制 Git - 版本控制工具，官网提供数十种GUI客户端 for Mac。 SVN - 版本控制工具。 GUI Lazygit - 一个简单高效的Git终端UI，适合快速提交和分支管理。 Gitbar - 开源，在你的菜单栏上显示GitHub贡献统计。 GitHub Desktop - 使用GitHub的GUI应用。 Oh My Star - GitHub的star功能弱，比如分类，本地组织你的GitHub star! GitUp - 一个简单功能强大的git客户端。 Hub - 将GitHub接口和git命令进行包装。 SourceTree - 强大的Git跨平台客户端。 Tower2 - 最强大的Git客户端。 Versions - Mac上最好的SVN管理工具。 Cornerstone - Mac上最佳的SVN管理工具。 SmartGit - 非商业用途免费，全平台支持，集成 Github服务。 GitKraken - 最流行的图形用户界面的git管理工具。 版本控制系统 GitLab - 一个用于仓库管理系统的开源项目。 GitHub GitHub代码托管，项目管理，演示部署，瞧，您现在就访问GitHub。 Coding.net - 代码托管，项目管理，WebIDE，演示部署，开启云端开发模式，让开发更简单。 phabricator phabricator支持Git、SVN、HG 基于 PHP + Mysql 的开放源代码软件开发平台。 Gogs - 一款极易搭建的自助 Git 服务Golang版本。 Gerrit Gerrit 是一个免费、开放源代码的代码审查软件，使用网页界面。 Gitblit Java版本Git代码托管，项目管理。 数据库 Sequel Pro - 一个MySQL数据库管理软件。 MySQL Workbench - MySQL数据库官方管理软件。 SQLPro Studio - 支持SQL Server, Postgres, Oracle 以及MySQL等主流的数据库可视化管理工具. Bdash - SQL客户端应用程序，支持MySQL、 PostgreSQL (Redshift)、 BigQuery、。 Postico - 现代PostgreSQL客户端，漂亮功能多。 ElectroCRUD - MySQL数据库CRUD应用程序。 Base 2 - 一个用于管理SQLite数据库的软件。 Postgres.app - Mac上最简单的方法的使用PostgreSQL关系型数据库管理系统。 PSequel - PostgreSQL数据库GUI软件。 Robomongo - 基于Shell的MongoDB图形化客户端管理软件。 MongoBooster - MongoDB图形化管理软件，内嵌MongoShell，ES6语法，流畅查询及智能感知。 Mongo Management Studio - MongoDB图形化客户端管理软件。 MongoChef - MongoDB图形化客户端管理软件。 Mongotron - 使用Electron和Angular开发的MongoDB图形化客户端。 Chrome MySQL Admin - 一个Chrome插件，是MySQL开发的跨平台、可视化数据库工具。 JackDB - 直接的SQL访问你所有的数据，无论在哪里。 medis - 漂亮的Redis管理软件。 RedisDesktopManager - Redis跨平台的GUI管理工具。 MDB Explorer - Mac上查看编辑Access数据库的工具。 Datum - SQLite - Sqlite3数据库管理软件。 mongoDB.app - 在Mac 上最简单的使用MongoDB DataGrip - 是jetbrains公司旗下一款数据库管理工具。点击这里 学生免费。 Tableau Public - 数据可视化工具。 设计和产品 设计工具 Penpot - 开源设计和原型工具，类似Figma，支持团队协作和矢量编辑。 Excalidraw - 一个轻量级开源白板工具，适合快速绘制流程图和草图。 Acorn - 一个像PS，全面的功能集的图像编辑器。 Affinity Designer - 矢量图像设计工具，可能的Adobe Illustrator的替代。 Affinity Photo - 光栅图像设计工具，可以替代Adobe PS图象处理软件。 Blender - 全功能可扩展的跨平台3D内容套件。 Pixelmator - 强大的图像编辑器，可能PS图像处理软件的选择。 Sketch - 混合矢量/位图布局应用，特别适用于用户界面，Web和移动设计。 Sketch Toolbox - 一个超级简单的Sketch插件管理器。 FLINTO - 快速制作高保真的互交原型工具，支持Sketch导入。 Kite - 一个强大的动画制作工具制作Mac和iOS原型中的应用。 inklet - 将Mac上的触摸板变成绘图板。 Alchemy - 开源的绘图工具软件，用于素描、会话以及一种新的绘图方式。 GIMP - 图像编辑软件，号称Linux下的PhotoShop，同时有Mac版本。 Monodraw - 一款文本图像编辑器。 SketchBook - 出众的绘图软件。 Tayasui Sketches - 专业的绘图软件。 FontForge - 字体编辑工具。 Nik Collection - 专业照片后期制作工具Google收购后免费。 Paintbrush - 位图图像编辑器。 Krita - 一个开源的位图形编辑软件，包含一个绘画程式和照片编辑器。 Vectr - 免费图形编辑器。这是一个简单而强大的Web和桌面跨平台工具，把你的设计变成现实。 Principle - 使用它很容易设计动画和交互式用户界面。 MagicaVoxel - 轻量级的8位像素编辑和交互路径追踪渲染器。 ScreenToLayers - 轻松导出桌面分层文件PSD文件。 原型流程 FigJam - Figma推出的协作白板工具，适合头脑风暴和流程设计，集成Figma生态。 Justinmind - 功能更丰富团队协作方便。 MockFlow - 用于网页设计和可用性测试的在线原型设计套件。 Axure RP 8 - 画原型图工具，团队协作SVN方便好用。 pencil - 开源免费制作软件原型的工具 Mockplus - 更快更简单的原型设计工具。 OmniGraffle - 可用来绘制图表、流程图、组织结构图、思维导图以及插图或原型。 XMind - 一款实用的思维导图软件。 Lighten - XMind出品的一款实用的思维导图软件。 Scapple - 一款实用的思维导图软件。 Framer - 做交互原型的工具。 Balsamiq Mockups - 一个快速的网页设计原型工具，帮助你更快、更聪明的工作。 Marvel - 简单设计，原型设计和协作。 MindNode - 简洁的风格与人性化的操作，绘制思维脑图。 Proto.io - 高保真交互原型工具，适合移动端和网页设计。 Adobe XD - Adobe 推出的免费原型设计工具。 Lucidchart - 在线流程图和思维导图工具，支持团队协作。 Whimsical - 快速绘制线框图、流程图和思维导图。 Miro - 在线协作白板工具，适合远程团队。 InVision - 强大的原型设计和协作平台。 Figma - 实时协作的UI/UX设计工具，支持原型设计。 Draw.io - 免费在线图表工具（流程图、UML等）。 PlantUML - 用代码生成流程图的工具。 其它工具 Notes - 简洁的笔记应用。 TinyPNG4Mac - 图片压缩专用开源工具。 Image2icon - 将你的图片转换成图标。 ImageAlpha - 压缩PNG图片，去掉无效的透明。 ImageOptim - 压缩图片，删除EXIF信息。 Sip - 收集，整理和分享你的颜色拾色器。 Mark Man - 高效的设计稿标注、测量工具。 Frank DeLoupe - 支持 Retina 的屏幕拾色器。 ColorSchemer - 专业的配色、调色软件。 IconKit - App图标自动生成器。 GifCapture 开源 macOS 截屏生成 Gif 工具。 APNGb - 编辑apng图片格式的软件。 Licecap - 是一款屏幕录制工具输出GIF，录制过程中可以随意改变录屏范围。 Kap - 轻量 GIF 录屏小工具。 GIPHY Capture - 免费软件的捕捉和分享图片在桌面上。 Skitch - 截图附带强大的标注功能。 截图(Jietu) - 截图附带强大的标注功能，腾讯作品。 Snip - 高效的截图工具，支持滚动截屏，腾讯作品。 iPic - 上传插图链接分享。 Iconjar - 图标管理软件，带组织和搜索功能。 RightFont - 字体管理工具。 Solarized - 干净清爽的颜色主题，支持iTerm、Intellij IDEA、Vim等。 虚拟机 Parallels Desktop - 虽然好用但是收费机制，更新花钱、花钱、花钱。 VirtualBox - 免费、免费、免费，带NTFS读写，不用买ParagonNTFS，省100块。 VMware Fusion - 强大的虚拟机，商业软件，现已对个人用户免费开放。 Veertu - Mac上最轻便的虚拟机，只有跑Windows才会收费。比较新，很多功能不支持。 UTM - 专为Mac设计的开源虚拟机，支持Apple Silicon和Intel，支持ARM和x86架构，简单易用。 QEMU - 开源虚拟化解决方案，支持多种架构（x86、ARM、RISC-V等），跨平台，功能强大但配置复杂。 VMware Workstation - VMware面向Windows和Linux的桌面虚拟机，功能丰富，现对个人免费。 Microsoft Hyper-V - Windows内置的虚拟化平台，免费且集成度高，适合Windows用户。 Proxmox VE - 开源服务器虚拟化平台，基于Debian，支持KVM和LXC，适合高级用户。 XCP-ng - 开源的XenServer替代品，专注于服务器虚拟化，易于管理和扩展。 KVM - Linux内核内置的虚拟化技术，开源且高效，需搭配管理工具如Virt-Manager使用。 Anka - Veertu的进阶版，面向开发者的高性能Mac虚拟化工具，支持CI/CD集成。 Lima - 开源工具，简化Linux上虚拟机运行，支持Docker和容器化工作流。 Multipass - Canonical推出的轻量级虚拟机工具，快速部署Ubuntu实例，跨平台支持。 Boxes - GNOME生态的简单虚拟机管理工具，开源且用户友好，适合Linux桌面用户。 工业自动化软件 PLC与自动化编程 OpenPLC Editor - 基于IEC 61131-3的开源PLC编程环境，支持多种硬件平台。 LogixPro - Allen-Bradley PLC仿真学习软件，适合教学使用。 ISaGRAF - 符合IEC 61499标准的工业自动化软件，支持分布式控制系统。 UniLogic - Unitronics PLC的集成开发环境，支持HMI和PLC联合编程。 Sysmac Studio - 欧姆龙NJ/NX系列控制器的编程软件。 SoMachine - 施耐德电气中小型机械自动化解决方案。 PAS4000 - Pro-face的PLC编程工具，支持多品牌控制器。 MELSOFT GX Works2 - 三菱电机FX/Q系列PLC编程软件(经典版本)。 STEP 7 - 西门子S7-300/400系列PLC编程软件(经典版本)。 Automation Builder - ABB PLC的集成开发环境，支持AC500系列控制器。 Do-more Designer - Automation Direct Do-more系列PLC编程软件。 Visu+ - 炜晨PLC编程软件，支持国产PLC开发。 KW-Software - 符合IEC 61131-3标准的编程系统，支持多平台。 Beremiz - 开源IEC 61131 - 3编程环境，支持梯形图、结构化文本等多语言编程，提供跨平台调试和模拟功能，适用于中小型自动化项目，支持OPC UA通信和SVGHMI工具包，可与工业物联网平台集成。 三菱GX Works3 - 三菱电机的PLC编程软件，支持Q系列、FX系列PLC，提供结构化文本、梯形图等编程方式，集成运动控制和网络配置。 欧姆龙CX - Programmer - 欧姆龙PLC的专用编程工具，支持CX - Integrator集成开发环境，提供可视化调试和仿真功能。 TIA Portal (Totally Integrated Automation) - 西门子集成自动化工程软件，支持PLC、HMI和驱动系统编程与调试。 Studio 5000 - Rockwell Automation的旗舰PLC编程环境，用于Allen-Bradley设备。 CODESYS - 开源IEC 61131-3编程工具，支持多种PLC品牌，广泛用于工业自动化。 EcoStruxure Machine Expert - 施耐德电气的PLC和运动控制编程工具。 TwinCAT - Beckhoff的实时控制和PLC编程软件，适合高性能应用。 PLCnext Engineer - Phoenix Contact的现代化PLC编程工具，支持传统与新兴技术。 SCADA与HMI GE Digital iFIX - GE数字化的SCADA解决方案，提供实时监控和数据分析功能。 Citect SCADA - 施耐德电气旗下的高性能SCADA平台。 Proficy HMI/SCADA - GE的工业监控与数据采集软件套件。 VTScada - 专注于水处理和基础设施监控的SCADA系统。 EcoStruxure Operator Terminal Expert - 施耐德电气HMI开发工具。 CODESYS Visualization - 基于IEC 61131-3标准的HMI开发环境。 KEPServerEX - 工业连接平台，支持300多种设备驱动。 DAQFactory - 数据采集和HMI软件，适合实验室和工业应用。 D2000 - 捷克IPESOFT开发的SCADA/EMS/MES平台。 InduSoft Web Studio - 快速HMI/SCADA开发工具，支持IoT集成。 PcVue - ARC Informatique的SCADA解决方案，支持AR/VR应用。 SIMATIC WinCC Unified - 西门子新一代Web-based HMI/SCADA平台。 Pro-face GP-Pro EX - 专业HMI编程软件，支持多种PLC连接。 Beijer iX Developer - 贝加莱HMI开发环境，支持高级脚本功能。 Mitsubishi GT Works3 - 三菱电机HMI编程软件。 霍尼韦尔Uniformance - 过程历史与分析软件，支持实时数据采集、报警管理和生产优化，适用于石油、化工等流程工业。 亚控组态王（KingView） - 国产SCADA软件，支持6000 +设备驱动，提供C/S、B/S架构和移动端监控，广泛应用于水处理、电力等领域。 WAGO SCADA - 基于Web的SCADA系统，支持云边协同部署、3D数字孪生和多协议接入，适用于中大型工业项目。 Ignition - Inductive Automation的模块化SCADA平台，支持无限客户端的工业监控。 WinCC - 西门子的HMI和SCADA软件，用于工业过程可视化。 FactoryTalk - Rockwell的工业软件套件，涵盖HMI和MES功能。 AVEVA System Platform - AVEVA的SCADA、HMI和MES集成解决方案。 OpenSCADA - 开源SCADA系统，支持多种协议，适合中小型项目。 Weintek EasyBuilder Pro - 威纶通的HMI编程软件，支持多品牌PLC，界面设计直观。 机器人仿真与编程 CoppeliaSim (V-REP) - 多功能机器人仿真平台，支持多种编程接口。 Gazebo - 机器人3D仿真环境，与ROS深度集成。 Webots - 开源机器人仿真软件，支持多种机器人模型。 MoveIt - ROS中的运动规划框架，用于机械臂控制。 MATLAB Robotics System Toolbox - MATLAB机器人系统工具箱，提供算法开发和仿真功能。 FlexSim - 3D仿真软件，适用于自动化系统和机器人工作单元设计。 DELMIA Robotics - 达索系统的机器人编程和仿真解决方案。 RoboLogix - 工业机器人编程教学仿真软件。 RoboMind - 教育用机器人编程软件，适合初学者。 OpenRAVE - 开源机器人仿真和规划环境。 RoboDK for Education - 教育版机器人仿真软件，提供教学资源。 Meca500 Simulator - Meca500小型工业机器人的仿真环境。 Universal Robots PolyScope - UR协作机器人的编程与仿真软件，支持图形化编程、路径优化和离线调试。 ROS Industrial - 基于ROS的工业机器人开发框架，支持多机器人协同、传感器集成和算法验证。 RoboDK - 强大的机器人仿真和离线编程工具，支持超过50个品牌机器人，适用于焊接、加工等任务。 RobotStudio - ABB的机器人离线编程和仿真软件，提供虚拟调试功能。 KUKA.Sim - KUKA的机器人仿真软件，支持数字孪生和虚拟调试。 FANUC ROBOGUIDE - FANUC的机器人仿真工具，专注于离线编程和路径优化。 Visual Components - 工业机器人和生产线的3D仿真平台，支持自动化设计和验证。 Process Simulate - 西门子Tecnomatix的机器人仿真软件，用于制造过程验证。 工业通信与附加工具 Node-RED - 开源流程编辑器，用于工业设备的可视化连接，支持MQTT、OPC UA等协议，适合IIoT开发。 OpenOPC - 开源OPC客户端工具，支持经典OPC DA协议，适用于与传统工业系统通信。 Modbus Poll - Modbus协议调试工具，支持主站模拟和数据监控，适用于PLC和传感器通信。 Modbus Slave - Modbus从站模拟器，用于测试和开发工业通信系统。 Wireshark - 开源网络协议分析工具，支持工业协议（如Modbus、OPC）的深度抓包和分析。 OPC Router - 工业数据集成平台，支持OPC UA、MQTT和数据库连接，简化工厂数据流。 ThingWorx - PTC的IIoT平台，支持工业设备的数据采集、分析和可视化。 RabbitMQ - 开源消息队列系统，支持AMQP和MQTT，适用于工业数据分发。 Ignition Edge - Ignition的边缘计算版本，支持MQTT和OPC UA，适合分布式工业环境。 Mbed TLS - 开源TLS/SSL库，为工业设备提供安全通信支持。 Profinet Explorer - 西门子的Profinet网络诊断工具，用于工业以太网调试。 EtherNet/IP Scanner Simulator - 模拟EtherNet/IP主站的工具，用于测试和开发工业网络设备。 IO-Link Master Tool - 用于配置和调试IO-Link设备的工具，支持工业传感器通信。 Tofino工业防火墙 - 工业网络安全解决方案，支持深度包检测（DPI）、防火墙策略配置和入侵防御，保护SCADA和PLC系统。 Eclipse Mosquitto - 开源MQTT消息代理，支持工业物联网设备间的轻量级通信，适用于边缘计算和实时数据传输。 Matrikon OPC UA Suite - OPC UA通信解决方案，支持工业设备间安全数据交换。 Kepware KEPServerEX - PTC的工业连接平台，支持数百种协议，连接PLC、SCADA和MES。 通信 Discord - 专为游戏玩家设计的语音和文字聊天工具。 Element - 基于Matrix协议的安全通信工具。 Signal - 注重隐私安全的加密通讯应用。 Mattermost - 开源的企业级消息平台。 Rocket.Chat - 开源团队通讯软件。 Wire - 安全的企业级通讯工具。 Jitsi - 开源视频会议工具。 Microsoft Teams - 微软团队协作工具。 Zoom - 视频会议和网络研讨会工具。 飞书 - 字节跳动推出的企业协作平台。 TIM - 腾讯推出的办公版QQ。 企业微信 - 微信企业版。 蓝信 - 安全的企业即时通讯工具。 Talky - 简单的视频聊天应用。 Keybase - 加密的团队协作工具。 Franz - 一个使用 Electron开发的，可以同时登录23个平台的即时通讯软件。 QQ - QQ for Mac App。 WeChat - 微信 for Mac App。 Electronic WeChat - 调用微信接口，使用 Electron 开发的第三方漂亮开源微信应用。 Skype - Skype共享、跨平台的短信和电话。 Maipo脉搏 - 微博第三方Mac应用。 御飯 - 饭否第三方Mac应用。 ChitChat - WhatsApp非官方。 Telegram - 通讯新时代。 Messenger - Facebook第三方聊天工具。 Adium - 呃这个是老的集成多个平台的聊天客户端。 Textual - 最受欢迎的世界与我们相关的KPI应用 for OS X。 Gitter - 关于GitHub的项目交流，支持 Markdown，对开发者极为友好。 简聊 - 企业级即时沟通工具，已经下线了，可以自己搭建一套系统玩儿。 钉钉 - 企业级办公通讯免费平台。 Slack - 团队协作，沟通工具。 零信 - 随时随地工作，跨平台。 今目标 - 一款面向中小企业的互联网工作平台。 BearyChat - 互联网团队协作，沟通工具。 Bitpost - 私人分散消息。它是一个p2p的去中心化和无须第三方提供信用担保协议。 Teambition - 团队协作。提供管理任务、安排日程、查找文件、即时讨论等团队所需要的一切协作功能。 日事清 - 个人日程管理，团队协作工具。日程安排，计划分配，笔记总结等。 Coding.net - 代码托管，项目管理，WebIDE，演示部署，开启云端开发模式，让开发更简单。 WeeChat - 一个命令行聊天客户端。 Email eM Client - 功能丰富的邮件客户端，支持日历和任务管理。 Mailspring - 美观高效的跨平台邮件客户端（基于Nylas N1）。 Canary Mail - 注重隐私安全的现代邮件客户端。 Mimestream - 专为Gmail优化的原生macOS邮件客户端。 Newton Mail - 具有智能功能的跨平台邮件客户端（原CloudMagic）。 BlueMail - 支持所有邮件服务的统一收件箱客户端。 Missive - 团队协作邮件客户端，集成聊天功能。 Spike - 将邮件转换为聊天式界面的创新客户端。 Spark - 新推出的快速邮件客户端支持Mac和iPhone。 Airmail - 快速的邮件客户端支持Mac和iPhone。 Foxmail - 快速的邮件客户端。 MailTags - 管理和组织邮件，日程和标签进行分类邮件。 N1 - 可以扩展的开源收费邮件客户端。 Postbox - 这个貌似也非常强大哦，关键是简洁漂亮的收费邮件客户端。 Polymail - 简单，功能强大，长得好看的新晋邮件客户端。 CloudMagic Email - 界面非常简洁的一个邮件客户端。 ThunderBird - Mozilla 公司出品的强大的Email客户端程序。 数据恢复 EaseUS Data Recovery Wizard - 简单易用的数据恢复工具，支持多种文件类型。 Recuva - 轻量级免费数据恢复软件，适合快速恢复误删文件。 TestDisk - 开源强大的分区修复和数据恢复工具。 PhotoRec - 专注于恢复丢失的文件包括视频、文档和档案。 Disk Drill - 提供数据恢复和磁盘保护功能。 Ontrack EasyRecovery - 专业级数据恢复解决方案。 MiniTool Power Data Recovery - 提供免费版和专业版的数据恢复工具。 UFS Explorer - 专业数据恢复软件，支持各种文件系统和存储设备。 DMDE - 强大的磁盘编辑器和数据恢复工具。 iBoysoft Data Recovery - 专注于Mac数据恢复，支持APFS/HFS+文件系统。 DiskWarrior - 恢复文件系统损坏时，磁盘工具进行选择。 Data Rescue - 多种情况下的全面和专业的数据恢复。 Stellar Phoenix Mac Data Recovery - 一个功能强大的恢复文件面向Mac的工具。 R-Studio for Mac - 可恢复分区被格式化、损坏或被删除的文件。 音频和视频 Kodi - 一款一流的免费开源媒体中心软件，可用于播放视频、音乐，查看图片，玩游戏等. MPV - 一个免费、开源和跨平台的媒体播放器。 IINA - 基于MPV的，现代视频播放器，支持多点触摸控制。 VOX Player - 免费全能音乐播放器，撸码之余听听歌是一种享受。 Radiant Player - Google Play音乐播放器。 Sonora - 一个很小的音乐播放器。 Audacity - 免费开源的编辑音频的软件。 Natron - 开源的视频合成软件，功能与 Adobe After Effects 或者 Nuke 类似。 Ardour - 录制，编辑和混合多轨音频。 Hydrogen - 专业鼓乐类工具，创建专业但简单而直观的鼓乐节目。 Audio Hijack - 一个记录任何应用程序的音频，包括网络电话Skype，网络流从Safari，以及更多。 Stringed 2 - 音频编辑处理工具。 Mixxx - 免费的DJ软件，给你一切你需要的表演组合，名副其实的替代Traktor。 MuseScore - 免费的作曲与乐谱软件。 Cog - 一个免费的开源音频播放器。 VLC - 开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件。 XLD - 解码/解码/转换/播放各种“无损”音频文件。 HandBrake - 高性能的视频编码和转换工具，具有很好的图形用户界面。 MPlayerX - 媒体播放器。 Shotcut - 免费开源视频编辑器。 ScreenFlow - 屏幕和视频编辑软件。 ArcTime - 跨平台字幕制作软件。 Perian - 让QuickTime播放所有常见格式的免费插件。 Adapter - 视频，音频和图像转换工具。 Synfig Studio - 工业级、强大的2D矢量动画制作软件。 云音乐播放器 网易云音乐 QQ音乐 虾米音乐 酷我音乐 酷狗音乐 Apple Music Spotify YouTube Music Amazon Music Tidal 书签阅读写作 OpenOffice - 是一套跨平台的办公室软件套件。 LibreOffice - 一款功能强大的免费开源办公软件，默认使用开放文档格式，并支持其他多种文档格式。 KOffice - 集成化办公套件，包含文字处理器、电子 表格、幻灯片制作、项目管理等多种工具。 Spillo - 功能强大，美观、快速网络书签网页阅读。 iChm - 读chm文件的软件。 Chmox - 读chm文件的软件。 CHM Reader - 读chm文件的软件。 Skim - is a PDF reader and note-taker for OS X. Kindle App - 亚马逊 Kindle App 电子书阅读器。 RSS Feeds 2 - 监控任何RSS。 ReadKit - 书签RSS管理客户端。 Reeder 3 - RSS 服务订阅。 Leaf - RSS 客户端程序。 Vienna - RSS/Atom 新闻阅读客户端。 texpad - 研究很难，写作应该容易 Markdown Mou - 免费 Markdown 编辑神器。 Marp - Markdown 制作幻灯片编辑器。 TextNut - Markdown编辑器，富文本之间自由切换。 MWeb - 专业的 Markdown 写作、记笔记、静态博客生成软件。 Typora - 基于 Electron 的“读写一体” Markdown 编辑器。 MacDown - 一款开源的Markdown编辑器，深受Mou的影响。 EME - 最近刚出的一款Markdown编辑器，界面很像Chrome浏览器的界面，很简约。 LightPaper - 简单的Markdown文本编辑器。 Marked 2 - Markdown文本预览编辑。 iA Writer - Markdown文本预览编辑，注重语法检查，专门为作家提供的编辑器。 Cmd Markdown - Cmd Markdown 编辑阅读器，支持实时同步预览，区分写作和阅读模式，支持在线存储，分享文稿网址。 笔记 Quiver - 程序猿的笔记本。 有道云笔记 - 支持多目录，Markdown，iWork/Office预览。 为知笔记 - 支持Markdown，搜集整理图片链接导入文档。 leanote - 支持Markdown的一款开源笔记软件，支持直接成为个人博客。 Inkdrop - Markdown爱好者的笔记本应用程序。 制作电子书 Scrivener - 专业写作软件，支持电子书导出格式。 Vellum - 优雅的电子书排版工具，适合Mac用户。 Pandoc - 万能文档转换工具，支持多种电子书格式。 Jutoh - 简单易用的电子书创作工具。 Kindle Create - 亚马逊官方Kindle电子书制作工具。 Pressbooks - 在线电子书制作平台，支持多种输出格式。 Leanpub - 自出版平台，支持实时预览和多种格式导出。 iBooks Author - 苹果官方电子书制作工具(Mac专用)。 Markdown to Ebook - 将Markdown转换为电子书格式。 Softmaker Office - 办公套件包含电子书导出功能。 Calibre - 丑陋的软件，但强大的软件电子书管理和转换。 Sigil - 多平台EPUB编辑器 FTP客户端 ForkLift - 强大的文件管理器和FTP/SFTP客户端。 WinSCP - Windows平台知名的免费SFTP/FTP客户端。 Captain FTP - 专为macOS设计的FTP客户端。 CrossFTP - 跨平台FTP客户端，支持Amazon S3/Google云存储。 Fetch - 简单易用的macOS FTP客户端。 CloudMounter - 将FTP/SFTP挂载为本地磁盘的工具。 Commander One - 双面板文件管理器，支持FTP/SFTP。 ExpanDrive - 将FTP/SFTP映射为网络驱动器的工具。 FireFTP - Firefox浏览器的FTP客户端扩展。 lftp - 命令行FTP客户端。 Transmit - 一个FTP客户端，支持FTP + SFTP + S3。 Flow - 支持简单的 FTP + SFTP 客户端。 Yummy FTP - 专业快速，可靠的FTP客户端。 Cyberduck - 免费FTP，SFTP，S3和WebDAV客户端 & OpenStack Swift Client。 FileZilla - 跨平台的FTP，FTPS和SFTP客户端。 软件打包工具 create-dmg - 快速创建一个压缩镜像文件。 Finicky - Web应用程序转化为苹果的应用程序。 nw.js - 使用HTML和JavaScript来制作桌面应用。 Electron - 前身是 AtomShell，使用 JS、HTML 和CSS 构建跨平台的桌面应用程序。 react-desktop - 为 macOS Sierra带来React UI组件。 React Native Desktop for Mac - 用 React Native 技术构建 OS X 下的桌面应用程序。 React Native Desktop for Ubuntu - 用 React Native 技术构建 Ubuntu 下的桌面应用程序。 AppJS - 使用 JS、HTML 和CSS 构建跨平台的桌面应用程序。 HEX - 使用 JS、HTML 和CSS 构建跨平台的桌面应用程序，有道出品。 AlloyDesktop - 同上，腾讯出品，给个差评。 MacGap - 桌面WebKit打包HTML、CSS、JS应用。 ionic - 一个用来开发混合手机应用的，开源的，免费的代码库。 下载工具 qBittorrent - 开源免费的BitTorrent客户端。 Motrix - 全能的下载管理器，支持HTTP/BT/磁力链。 EagleGet - 轻量级免费下载管理器。 Internet Download Manager - 强大的下载加速器，支持续传。 Xtreme Download Manager - 开源下载加速器。 Neat Download Manager - 简单高效的下载管理器。 Persepolis - aria2的图形界面客户端。 WebTorrent - 基于WebRTC的流式BT客户端。 youtube-dl - 命令行视频下载工具。 DownZemAll! - 开源批量下载工具。 Transmission - 免费的BitTorrent客户端 aria2 - 一款支持多种协议的轻量级命令行下载工具。 JDownloader - 下载工具，下载文件的一键式托管。 You-Get - 网络富媒体命令行下载工具。 Free Download Manager - 功能强大的下载加速器。 FOLX - Folx 是一个Mac osx 系统风格界面的下载管理工具。 网盘 iCloud Drive - 苹果官方云存储服务。 Google Drive - 谷歌云端硬盘。 OneDrive - 微软云存储服务。 阿里云盘 - 阿里云推出的高速网盘。 和彩云 - 中国移动旗下云存储服务。 pCloud - 瑞士安全云存储服务。 TeraBox - 提供1TB免费空间的云存储。 Dropbox - 非常好用的免费网络文件同步工具，提供在线存储服务。 百度云 - 百度云客户端。 腾讯微云 - 腾讯云客户端。 坚果云 - 坚果云客户端。 115 - 115云客户端。 360 - 360云客户端。 快盘 - 金山快盘。 ownCloud - 私有云网盘。 NextCloud - 基于ownCloud完全开源免费开源，企业文件同步和共享。 Mega - 免费的云服务，提供50GB的免费存储空间。 亿方云 - 硅谷团队打造，个人免费。 Seafile - 是由国内团队开发的国际化的开源云存储软件项目。 输入法 讯飞输入法 - 支持语音输入的智能输入法。 Gboard - 谷歌官方输入法。 触宝输入法 - 支持多种输入方式的智能输入法。 鼠须管 - RIME输入法的macOS发行版。 落格输入法 - 专为程序员设计的输入法。 小狼毫 - Windows版RIME输入法引擎。 QQ输入法 - 腾讯出品的输入法。 搜狗输入法 - 搜狗输入法。 百度输入法 - 支持拼音五笔输入。 清歌五笔输入法 - 为 iOS 和 Mac 专门打造的五笔输入法。 WBIM - 五笔输入法。 Rocket - Emoji标签输入。 颜文字 - 颜文字输入。 RIME - 中州韻輸入法引擎。 哈利路亚英文输入法 - 智能英文输入法，具备自动补全，自动纠错功能。 浏览器 Microsoft Edge - 微软基于Chromium的新版浏览器。 Arc - 创新的浏览器设计，专注于工作流优化。 Sidekick - 为工作效率优化的浏览器。 Tor Browser - 保护隐私的匿名浏览器。 Puffin - 云加速移动浏览器。 Falkon - KDE开发的轻量级浏览器。 Waterfox - Firefox的高性能分支。 Epic Privacy Browser - 隐私保护浏览器。 Min - 极简主义浏览器。 Safari - Mac预装自带浏览器。 Chrome - Chrome浏览器谷歌出品。 Firefox - 火狐浏览器。 Opera - Opera 浏览器。 QQ浏览器 - QQ浏览器－腾讯出品。 傲游云浏览器 - 傲游云浏览器。 Vivaldi - Opera开发商出品新的浏览器。 Ōryōki - 小的web浏览器。这是一个试验性的项目，目前正在开发中 Brave - 用Brave浏览更快更安全。 翻译工具 DeepL - 高质量的AI翻译服务。 Linguee - 多语言词典和翻译搜索工具。 Google Translate - 谷歌在线翻译服务。 Mate Translate - 多语言翻译工具，支持OCR识别。 Translate Shell - 命令行翻译工具。 CopyTranslator - 复制即翻译的工具。 Bob - Mac端翻译软件，支持划词翻译。 GoldenDict - 开源词典程序。 Ludwig - 英语句子搜索引擎和写作助手。 有道翻译 - 有道词典桌面版。 辞海词典 - 学单词、背单词、辞海词典。 eudic - 欧路词典词典。 iTranslate - 支持全世界超过 80 种语言发音和输出。 Grammarly - 修正英语语法及用语 科学上网 V2Ray - 强大的科学上网工具，支持VMess协议，提供多平台客户端。 Trojan - 轻量级代理工具，基于Trojan协议，注重隐私和速度。 Brook - 简单高效的跨平台代理工具，支持多种协议。 Hysteria - 基于QUIC协议的高性能代理工具，抗封锁能力强。 Hysteria 2 - Hysteria的升级版，进一步优化速度和稳定性。 Xray - V2Ray的分支增强版，支持更多协议和配置选项。 Clash - 多协议代理工具，支持规则管理，适用于桌面和移动端。 WireGuard - 现代VPN协议，速度快、安全性高，配置简单。 SoftEther VPN - 开源多协议VPN软件，支持OpenVPN、L2TP等。 Outline VPN - 基于Shadowsocks的简单VPN解决方案，易于部署。 ProtonVPN - 注重隐私的VPN服务，提供免费基础版和付费高级版。 Mullvad VPN - 以匿名性著称的VPN服务，支持WireGuard协议。 NordVPN - 知名的商业VPN服务，速度快、服务器覆盖广。 ExpressVPN - 高性能VPN，提供稳定性和用户友好界面。 Surfshark - 性价比高的VPN，支持无限设备连接。 StrongVPN - 老牌VPN服务，提供可靠的科学上网功能。 Psiphon - 开源科学上网工具，专注于突破网络封锁。 Tor Browser - 通过洋葱路由实现匿名上网，适合隐私需求。 SpechtLite - 支持 Shadowsocks 及规则管理的高效率代理。 ShadowsocksX - 一个快速的隧道代理，可以帮助你绕过防火墙。 ShadowsocksX-NG - 一款ShadowsocksX客户端软件。 Lantern - 科学上网。 鱼摆摆 - 科学上网。 Tunnelblick - OpenVPN的免费软件。 GoAgentX - 科学上网。 Surge - 科学上网。 云梯 - 在圈内小有名气的VPN服务提供商。 srocket - 开启科学上网。 LoCoVPN - 每天签到可获得2小时免费VPN加速。 二师兄VPN - 提供无限流量、无限续期免费VPN账号。 GTX加速器 - 每天签到领取500M流量。 GreenVPN - 注册激活送免费VPN加速流量。 风驰VPN - 无限流量、无限续期的免费VPN加速服务。 开眼 - Chrome插件免费的科学上网利器。 PlutoX - 一款网络调试工具，科学上网工具。 tinc - VPN软件. 远程协助 Splashtop - 高性能远程桌面解决方案，支持4K流媒体。 Parsec - 专为游戏和创意工作设计的低延迟远程工具。 NoMachine - 企业级远程访问解决方案，支持Linux。 Microsoft Remote Desktop - 微软官方远程桌面客户端。 Jump Desktop - 支持RDP/VNC协议的跨平台远程工具。 Remotely - 注重隐私安全的远程支持解决方案。 Zoho Assist - 基于云的远程支持软件。 UltraViewer - 越南开发的轻量级远程控制软件。 DWService - 开源远程支持平台。 RayLink - 国产4K高清远程控制软件。 TeamViewer - 远程协助及在线协作和会议功能的软件，商业软件个人使用免费。 RealVNC - 免费的远程控制跨多平台的程序。 AnyDesk - 远程控制跨多平台的程序。 ToDesk - 国产远程控制软件，支持多平台且个人免费。 向日葵远程控制 - 国内知名远程工具，提供跨平台支持。 RustDesk - 开源远程桌面工具，支持自建服务器。 Chrome Remote Desktop - 谷歌推出的轻量级浏览器扩展。 其它实用工具 12306ForMac - Mac版12306 订票/捡票 助手。 AirServer - 将手机投影到电脑上。 CheatSheet - CheatSheet 是一款Mac上的非常实用的快捷键快速提醒工具。 WWDC - Mac OS的非官方的WWDC APP。 xScope - 测量、检查和测试屏幕上的图形和布局的工具。搜索你的苹果和网络，快速打开应用程序。 f.lux - 自动调整您的电脑屏幕，以匹配亮度。 Todoist - 跨平台的任务管理器与移动应用程序。 TaskPaper - 漂亮的纯文本任务列表。 Wunderlist - 奇妙清单跨平台的任务管理器与移动应用程序。 Ukelele - Unicode键盘布局编辑器。 Karabiner - 一个强大的和稳定的OS X的键盘定制。 Keytty - 让你通过键盘使用鼠标。 AppCleaner - 一个小应用程序，让你彻底卸载不需要的应用程序。 BetterZip 3 - 压缩解压缩工具支持格式 ZIP、TAR、TGZ、TBZ、TXZ (new)、7-ZIP、RAR。 Keka - 一个免费的 macOS 文件解压缩程序。 Numi - 漂亮的计算器应用。 Fantastical - 日历应用程序，你将管理好生活。 Day-O 2 - 菜单日历更换内置日历。 OnyX - 多功能实用工具来验证磁盘和文件，运行清洁和系统维护任务，配置隐藏选项等。 Focus - 一个漂亮的番茄工作法为基础的时间管理工具。 SSH Tunnel - 管理你的SSH。 Mounty - NTFS 分区读写组件。 Paragon NTFS - 在Mac OS X中完全读写、修改、访问Windows NTFS硬盘、U盘等外接设备的文件。 Tuxera NTFS - Mac上的NTFS文件系统驱动。 gfxCardStatus - 控制Mac独立显卡与集成显卡之间的切换。 openEmu - 模拟器，可以玩魂斗罗之类，放松回到小时候。 Alfred - 效率神器。 Hammerspoon - 功能强大的自动化工具，Lua 脚本驱动，支持窗口管理。 DaisyDisk - 磁盘空间使用扫描工具。 OmniDiskSweeper - 磁盘空间使用扫描工具。 iStat pro - 免费的Mac OS电脑硬件信息检测软件。 BitBar - 支持使用各种语言将信息展示到Mac OS的菜单栏。 ClipMenu - 一个剪贴板操作的管理器。 Paste - 智能剪贴板历史片段管理。 ControlPlane - 自定义Mac情景模式。某些场景让Mac自动静音或是自动打开Mail客户端等等。 Caffeine - 实用工具，菜单栏按钮，点击休眠。 Itsycal - 一款简洁实用的开源日历工具。 HTML5 Player - Chrome插件解决中国视频网站播放视频电脑发热的情况。 Monity - 帮助用户实时监控系统的一款非常漂亮的软件。 BetterTouchTool - 代替默认的系统操作方式（组合键、修饰键、手势等）。 iStats - iStats 是一个可以让你快速查看电脑 CPU 温度，磁盘转速和电池等信息的命令行工具。 Juice - 让电池显示更有趣 InsomniaX - 合上盖子不眠不休，继续听歌下载。 NoSleep - 合上盖子不休眠，可根据是否连接电源单独设置。 Coolant - 这是能让你知道什么应用程序造成你CPU100%让Mac电脑过热电池耗尽的菜单应用程序。 窗口管理 ShiftIt - 窗口位置和大小管理软件。 Moom - 多任务多窗口的软件。 Slate - 窗口管理器，可用JavaScript写配置。 Amethyst - 窗口管理器（自动保持窗口大小的窗口）。 Spectacle - 简单的移动和调整大小的窗口，和可定制的键盘快捷键。 密码管理 1password - 跨平台帐号密码管理软件。 LastPass - 密码管理器和安全的数字笔记。 KeePassX - 一个免费的，开源的，体积小的密码管理器。 MacPass - 密码管理器。 Finder Quicklook-Plugins - Finder快速预览文件插件。 ForkLift - 先进的双窗口文件管理器和文件传输客户端。 Path Finder - 强大的Finder替代者，拥有很多特性。 TotalFinder - 强大的Finder替代者，界面风格像Chrome。 XtraFinder - 给Finder添加有用的新特性。 Hazel - 设计精美的自动文件管理软件。"
  },
  "index.html": {
    "href": "index.html",
    "title": "DataMaster - 主页 | DataMaster",
    "summary": "\uD83D\uDEE0️ 开发者模式 视觉工作台中的源文件编辑 数据库中定义数据交换的引用程序集、自定义属性显示 Prisma 配置中使用环境变量为MAS.PrismaTalk_API的明文密钥 配置页面中每个单独的修改次数 \uD83D\uDD00 分支规范 主分支（Main）：main为项目的主分支，存放最新的稳定版本 开发分支（Development）：develop用于进行功能开发或整体项目的开发版本 功能分支（Feature）：feature/每个新功能对应一个功能分支，从开发分支拉出 修复分支（Bugfix）：bugfix/用于修复特定问题的分支，通常也从开发分支拉出 发布分支（Release）：release/用于版本发布，进入发布阶段时从开发分支创建 热修复分支（Hotfix）：hotfix/用于紧急修复生产环境问题，从主分支拉出并直接合并回主分支和开发分支 文档分支（Docs）：docs/用于修改或新增文档内容的分支 \uD83D\uDCCF 设计原则与最佳实践 内存与资源管理： 正确管理事件订阅和取消订阅，使用 using 语句或实现 IDisposable 接口，确保资源及时释放，防止内存泄漏 有效管理文件句柄、数据库连接等资源，避免资源耗尽 错误处理与日志记录： 提供具体的错误信息，使用自定义异常类，捕获和处理预期外的异常，确保应用程序的健壮性 记录关键操作、错误和调试信息，便于后续调试和维护 设计原则（SOLID）： Single Responsibility Principle (单一职责原则) Open/Closed Principle (开闭原则) Liskov Substitution Principle (里氏替换原则) Interface Segregation Principle (接口隔离原则) Dependency Inversion Principle (依赖倒置原则) DRY (Don't Repeat Yourself): 避免代码重复，通过重用和模块化提升代码质量 KISS (Keep It Simple, Stupid): 保持设计简单，避免不必要的复杂性 YAGNI (You Aren't Gonna Need It): 仅实现当前需求，避免过度设计 架构模式： MVVM (Model-View-ViewModel): 分离UI与业务逻辑，提高代码的可测试性和可维护性 依赖注入 (Dependency Injection): 使用依赖注入框架管理对象的生命周期和依赖关系，增强模块解耦 选择合适的设计模式（如工厂模式、策略模式、观察者模式等）提升代码复用性和扩展性 测试与质量保障： 编写全面的单元测试，使用测试框架确保代码的可靠性和健壮性 集成测试验证不同模块之间的协作，确保系统整体功能的正确性 持续集成/持续部署 (CI/CD): 实施 CI/CD 流程，使用工具自动化构建、测试和部署，提高开发效率和发布质量 代码规范与文档： 遵循一致的命名规范和编码风格（Microsoft C# 编码规范），提升代码的可读性和一致性 定期进行代码审查，确保代码质量、遵循规范并发现潜在问题 编写清晰的代码注释和技术文档，记录设计决策，便于团队协作和知识传承 性能与优化： 使用性能分析工具（如 Visual Studio Profiler、dotTrace）定期分析和优化代码性能 利用async/await和异步编程模式，提高应用程序的响应性和吞吐量 实施有效的缓存策略，减少重复计算和数据访问，提高系统性能 可扩展性与可维护性： 采用模块化设计，分离不同功能模块，提升系统的可扩展性和可维护性 使用接口和抽象类定义模块边界，促进代码解耦和灵活性 国际化与本地化： 实现应用程序的国际化和本地化，支持多种语言和区域设置，提升用户体验 版本控制与协作： 使用 Git 等版本控制系统管理代码，采用分支策略促进团队协作和代码管理 \uD83D\uDDA5️ 应用程序 实时运行信息 数据表格 数据可视化 v2024_05_beta 数据可视化 v2024_07_beta 数据可视化 v2024_12_rc 产品密钥生成 代码编辑 通讯构建 节点式工作流"
  }
}